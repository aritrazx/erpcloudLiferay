/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.AppraisalSetup;
import com.liferay.famocom.erpcloud.model.AppraisalSetupModel;
import com.liferay.famocom.erpcloud.model.AppraisalSetupSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppraisalSetup service. Represents a row in the &quot;appraisalSetup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AppraisalSetupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppraisalSetupImpl}.
 * </p>
 *
 * @author Samaresh
 * @see AppraisalSetupImpl
 * @see AppraisalSetup
 * @see AppraisalSetupModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AppraisalSetupModelImpl extends BaseModelImpl<AppraisalSetup>
	implements AppraisalSetupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a appraisal setup model instance should use the {@link AppraisalSetup} interface instead.
	 */
	public static final String TABLE_NAME = "appraisalSetup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appraisalSettingId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "financialYear", Types.VARCHAR },
			{ "fromDateCycle", Types.TIMESTAMP },
			{ "toDateCycle", Types.TIMESTAMP },
			{ "fromDateSubmission", Types.TIMESTAMP },
			{ "toDateSubmission", Types.TIMESTAMP },
			{ "appraisalPeriod", Types.BIGINT },
			{ "totalEmp", Types.BIGINT },
			{ "beforeCtcAll", Types.BIGINT },
			{ "appraisalEmp", Types.BIGINT },
			{ "beforeCtc", Types.BIGINT },
			{ "afterCtc", Types.BIGINT },
			{ "totalAreas", Types.BIGINT },
			{ "totalBonus", Types.BIGINT },
			{ "totalCtcAfter", Types.BIGINT },
			{ "isLocked", Types.BIGINT },
			{ "isActive", Types.BIGINT },
			{ "employeeType", Types.VARCHAR },
			{ "addedDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("appraisalSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("financialYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromDateCycle", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDateCycle", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromDateSubmission", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDateSubmission", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appraisalPeriod", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalEmp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("beforeCtcAll", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalEmp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("beforeCtc", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("afterCtc", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAreas", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalBonus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalCtcAfter", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isLocked", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isActive", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table appraisalSetup (appraisalSettingId LONG not null primary key,companyId LONG,financialYear VARCHAR(75) null,fromDateCycle DATE null,toDateCycle DATE null,fromDateSubmission DATE null,toDateSubmission DATE null,appraisalPeriod LONG,totalEmp LONG,beforeCtcAll LONG,appraisalEmp LONG,beforeCtc LONG,afterCtc LONG,totalAreas LONG,totalBonus LONG,totalCtcAfter LONG,isLocked LONG,isActive LONG,employeeType VARCHAR(75) null,addedDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table appraisalSetup";
	public static final String ORDER_BY_JPQL = " ORDER BY appraisalSetup.appraisalSettingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY appraisalSetup.appraisalSettingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalSetup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalSetup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.AppraisalSetup"),
			true);
	public static final long FINANCIALYEAR_COLUMN_BITMASK = 1L;
	public static final long ISACTIVE_COLUMN_BITMASK = 2L;
	public static final long APPRAISALSETTINGID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppraisalSetup toModel(AppraisalSetupSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppraisalSetup model = new AppraisalSetupImpl();

		model.setAppraisalSettingId(soapModel.getAppraisalSettingId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setFinancialYear(soapModel.getFinancialYear());
		model.setFromDateCycle(soapModel.getFromDateCycle());
		model.setToDateCycle(soapModel.getToDateCycle());
		model.setFromDateSubmission(soapModel.getFromDateSubmission());
		model.setToDateSubmission(soapModel.getToDateSubmission());
		model.setAppraisalPeriod(soapModel.getAppraisalPeriod());
		model.setTotalEmp(soapModel.getTotalEmp());
		model.setBeforeCtcAll(soapModel.getBeforeCtcAll());
		model.setAppraisalEmp(soapModel.getAppraisalEmp());
		model.setBeforeCtc(soapModel.getBeforeCtc());
		model.setAfterCtc(soapModel.getAfterCtc());
		model.setTotalAreas(soapModel.getTotalAreas());
		model.setTotalBonus(soapModel.getTotalBonus());
		model.setTotalCtcAfter(soapModel.getTotalCtcAfter());
		model.setIsLocked(soapModel.getIsLocked());
		model.setIsActive(soapModel.getIsActive());
		model.setEmployeeType(soapModel.getEmployeeType());
		model.setAddedDate(soapModel.getAddedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppraisalSetup> toModels(AppraisalSetupSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppraisalSetup> models = new ArrayList<AppraisalSetup>(soapModels.length);

		for (AppraisalSetupSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.AppraisalSetup"));

	public AppraisalSetupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appraisalSettingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppraisalSettingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appraisalSettingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppraisalSetup.class;
	}

	@Override
	public String getModelClassName() {
		return AppraisalSetup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appraisalSettingId", getAppraisalSettingId());
		attributes.put("companyId", getCompanyId());
		attributes.put("financialYear", getFinancialYear());
		attributes.put("fromDateCycle", getFromDateCycle());
		attributes.put("toDateCycle", getToDateCycle());
		attributes.put("fromDateSubmission", getFromDateSubmission());
		attributes.put("toDateSubmission", getToDateSubmission());
		attributes.put("appraisalPeriod", getAppraisalPeriod());
		attributes.put("totalEmp", getTotalEmp());
		attributes.put("beforeCtcAll", getBeforeCtcAll());
		attributes.put("appraisalEmp", getAppraisalEmp());
		attributes.put("beforeCtc", getBeforeCtc());
		attributes.put("afterCtc", getAfterCtc());
		attributes.put("totalAreas", getTotalAreas());
		attributes.put("totalBonus", getTotalBonus());
		attributes.put("totalCtcAfter", getTotalCtcAfter());
		attributes.put("isLocked", getIsLocked());
		attributes.put("isActive", getIsActive());
		attributes.put("employeeType", getEmployeeType());
		attributes.put("addedDate", getAddedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appraisalSettingId = (Long)attributes.get("appraisalSettingId");

		if (appraisalSettingId != null) {
			setAppraisalSettingId(appraisalSettingId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String financialYear = (String)attributes.get("financialYear");

		if (financialYear != null) {
			setFinancialYear(financialYear);
		}

		Date fromDateCycle = (Date)attributes.get("fromDateCycle");

		if (fromDateCycle != null) {
			setFromDateCycle(fromDateCycle);
		}

		Date toDateCycle = (Date)attributes.get("toDateCycle");

		if (toDateCycle != null) {
			setToDateCycle(toDateCycle);
		}

		Date fromDateSubmission = (Date)attributes.get("fromDateSubmission");

		if (fromDateSubmission != null) {
			setFromDateSubmission(fromDateSubmission);
		}

		Date toDateSubmission = (Date)attributes.get("toDateSubmission");

		if (toDateSubmission != null) {
			setToDateSubmission(toDateSubmission);
		}

		Long appraisalPeriod = (Long)attributes.get("appraisalPeriod");

		if (appraisalPeriod != null) {
			setAppraisalPeriod(appraisalPeriod);
		}

		Long totalEmp = (Long)attributes.get("totalEmp");

		if (totalEmp != null) {
			setTotalEmp(totalEmp);
		}

		Long beforeCtcAll = (Long)attributes.get("beforeCtcAll");

		if (beforeCtcAll != null) {
			setBeforeCtcAll(beforeCtcAll);
		}

		Long appraisalEmp = (Long)attributes.get("appraisalEmp");

		if (appraisalEmp != null) {
			setAppraisalEmp(appraisalEmp);
		}

		Long beforeCtc = (Long)attributes.get("beforeCtc");

		if (beforeCtc != null) {
			setBeforeCtc(beforeCtc);
		}

		Long afterCtc = (Long)attributes.get("afterCtc");

		if (afterCtc != null) {
			setAfterCtc(afterCtc);
		}

		Long totalAreas = (Long)attributes.get("totalAreas");

		if (totalAreas != null) {
			setTotalAreas(totalAreas);
		}

		Long totalBonus = (Long)attributes.get("totalBonus");

		if (totalBonus != null) {
			setTotalBonus(totalBonus);
		}

		Long totalCtcAfter = (Long)attributes.get("totalCtcAfter");

		if (totalCtcAfter != null) {
			setTotalCtcAfter(totalCtcAfter);
		}

		Long isLocked = (Long)attributes.get("isLocked");

		if (isLocked != null) {
			setIsLocked(isLocked);
		}

		Long isActive = (Long)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		String employeeType = (String)attributes.get("employeeType");

		if (employeeType != null) {
			setEmployeeType(employeeType);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getAppraisalSettingId() {
		return _appraisalSettingId;
	}

	@Override
	public void setAppraisalSettingId(long appraisalSettingId) {
		_appraisalSettingId = appraisalSettingId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getFinancialYear() {
		if (_financialYear == null) {
			return "";
		}
		else {
			return _financialYear;
		}
	}

	@Override
	public void setFinancialYear(String financialYear) {
		_columnBitmask |= FINANCIALYEAR_COLUMN_BITMASK;

		if (_originalFinancialYear == null) {
			_originalFinancialYear = _financialYear;
		}

		_financialYear = financialYear;
	}

	public String getOriginalFinancialYear() {
		return GetterUtil.getString(_originalFinancialYear);
	}

	@JSON
	@Override
	public Date getFromDateCycle() {
		return _fromDateCycle;
	}

	@Override
	public void setFromDateCycle(Date fromDateCycle) {
		_fromDateCycle = fromDateCycle;
	}

	@JSON
	@Override
	public Date getToDateCycle() {
		return _toDateCycle;
	}

	@Override
	public void setToDateCycle(Date toDateCycle) {
		_toDateCycle = toDateCycle;
	}

	@JSON
	@Override
	public Date getFromDateSubmission() {
		return _fromDateSubmission;
	}

	@Override
	public void setFromDateSubmission(Date fromDateSubmission) {
		_fromDateSubmission = fromDateSubmission;
	}

	@JSON
	@Override
	public Date getToDateSubmission() {
		return _toDateSubmission;
	}

	@Override
	public void setToDateSubmission(Date toDateSubmission) {
		_toDateSubmission = toDateSubmission;
	}

	@JSON
	@Override
	public long getAppraisalPeriod() {
		return _appraisalPeriod;
	}

	@Override
	public void setAppraisalPeriod(long appraisalPeriod) {
		_appraisalPeriod = appraisalPeriod;
	}

	@JSON
	@Override
	public long getTotalEmp() {
		return _totalEmp;
	}

	@Override
	public void setTotalEmp(long totalEmp) {
		_totalEmp = totalEmp;
	}

	@JSON
	@Override
	public long getBeforeCtcAll() {
		return _beforeCtcAll;
	}

	@Override
	public void setBeforeCtcAll(long beforeCtcAll) {
		_beforeCtcAll = beforeCtcAll;
	}

	@JSON
	@Override
	public long getAppraisalEmp() {
		return _appraisalEmp;
	}

	@Override
	public void setAppraisalEmp(long appraisalEmp) {
		_appraisalEmp = appraisalEmp;
	}

	@JSON
	@Override
	public long getBeforeCtc() {
		return _beforeCtc;
	}

	@Override
	public void setBeforeCtc(long beforeCtc) {
		_beforeCtc = beforeCtc;
	}

	@JSON
	@Override
	public long getAfterCtc() {
		return _afterCtc;
	}

	@Override
	public void setAfterCtc(long afterCtc) {
		_afterCtc = afterCtc;
	}

	@JSON
	@Override
	public long getTotalAreas() {
		return _totalAreas;
	}

	@Override
	public void setTotalAreas(long totalAreas) {
		_totalAreas = totalAreas;
	}

	@JSON
	@Override
	public long getTotalBonus() {
		return _totalBonus;
	}

	@Override
	public void setTotalBonus(long totalBonus) {
		_totalBonus = totalBonus;
	}

	@JSON
	@Override
	public long getTotalCtcAfter() {
		return _totalCtcAfter;
	}

	@Override
	public void setTotalCtcAfter(long totalCtcAfter) {
		_totalCtcAfter = totalCtcAfter;
	}

	@JSON
	@Override
	public long getIsLocked() {
		return _isLocked;
	}

	@Override
	public void setIsLocked(long isLocked) {
		_isLocked = isLocked;
	}

	@JSON
	@Override
	public long getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(long isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public long getOriginalIsActive() {
		return _originalIsActive;
	}

	@JSON
	@Override
	public String getEmployeeType() {
		if (_employeeType == null) {
			return "";
		}
		else {
			return _employeeType;
		}
	}

	@Override
	public void setEmployeeType(String employeeType) {
		_employeeType = employeeType;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppraisalSetup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppraisalSetup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppraisalSetup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppraisalSetupImpl appraisalSetupImpl = new AppraisalSetupImpl();

		appraisalSetupImpl.setAppraisalSettingId(getAppraisalSettingId());
		appraisalSetupImpl.setCompanyId(getCompanyId());
		appraisalSetupImpl.setFinancialYear(getFinancialYear());
		appraisalSetupImpl.setFromDateCycle(getFromDateCycle());
		appraisalSetupImpl.setToDateCycle(getToDateCycle());
		appraisalSetupImpl.setFromDateSubmission(getFromDateSubmission());
		appraisalSetupImpl.setToDateSubmission(getToDateSubmission());
		appraisalSetupImpl.setAppraisalPeriod(getAppraisalPeriod());
		appraisalSetupImpl.setTotalEmp(getTotalEmp());
		appraisalSetupImpl.setBeforeCtcAll(getBeforeCtcAll());
		appraisalSetupImpl.setAppraisalEmp(getAppraisalEmp());
		appraisalSetupImpl.setBeforeCtc(getBeforeCtc());
		appraisalSetupImpl.setAfterCtc(getAfterCtc());
		appraisalSetupImpl.setTotalAreas(getTotalAreas());
		appraisalSetupImpl.setTotalBonus(getTotalBonus());
		appraisalSetupImpl.setTotalCtcAfter(getTotalCtcAfter());
		appraisalSetupImpl.setIsLocked(getIsLocked());
		appraisalSetupImpl.setIsActive(getIsActive());
		appraisalSetupImpl.setEmployeeType(getEmployeeType());
		appraisalSetupImpl.setAddedDate(getAddedDate());
		appraisalSetupImpl.setCreatedBy(getCreatedBy());
		appraisalSetupImpl.setModifiedDate(getModifiedDate());
		appraisalSetupImpl.setModifiedBy(getModifiedBy());

		appraisalSetupImpl.resetOriginalValues();

		return appraisalSetupImpl;
	}

	@Override
	public int compareTo(AppraisalSetup appraisalSetup) {
		long primaryKey = appraisalSetup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppraisalSetup)) {
			return false;
		}

		AppraisalSetup appraisalSetup = (AppraisalSetup)obj;

		long primaryKey = appraisalSetup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AppraisalSetupModelImpl appraisalSetupModelImpl = this;

		appraisalSetupModelImpl._originalFinancialYear = appraisalSetupModelImpl._financialYear;

		appraisalSetupModelImpl._originalIsActive = appraisalSetupModelImpl._isActive;

		appraisalSetupModelImpl._setOriginalIsActive = false;

		appraisalSetupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppraisalSetup> toCacheModel() {
		AppraisalSetupCacheModel appraisalSetupCacheModel = new AppraisalSetupCacheModel();

		appraisalSetupCacheModel.appraisalSettingId = getAppraisalSettingId();

		appraisalSetupCacheModel.companyId = getCompanyId();

		appraisalSetupCacheModel.financialYear = getFinancialYear();

		String financialYear = appraisalSetupCacheModel.financialYear;

		if ((financialYear != null) && (financialYear.length() == 0)) {
			appraisalSetupCacheModel.financialYear = null;
		}

		Date fromDateCycle = getFromDateCycle();

		if (fromDateCycle != null) {
			appraisalSetupCacheModel.fromDateCycle = fromDateCycle.getTime();
		}
		else {
			appraisalSetupCacheModel.fromDateCycle = Long.MIN_VALUE;
		}

		Date toDateCycle = getToDateCycle();

		if (toDateCycle != null) {
			appraisalSetupCacheModel.toDateCycle = toDateCycle.getTime();
		}
		else {
			appraisalSetupCacheModel.toDateCycle = Long.MIN_VALUE;
		}

		Date fromDateSubmission = getFromDateSubmission();

		if (fromDateSubmission != null) {
			appraisalSetupCacheModel.fromDateSubmission = fromDateSubmission.getTime();
		}
		else {
			appraisalSetupCacheModel.fromDateSubmission = Long.MIN_VALUE;
		}

		Date toDateSubmission = getToDateSubmission();

		if (toDateSubmission != null) {
			appraisalSetupCacheModel.toDateSubmission = toDateSubmission.getTime();
		}
		else {
			appraisalSetupCacheModel.toDateSubmission = Long.MIN_VALUE;
		}

		appraisalSetupCacheModel.appraisalPeriod = getAppraisalPeriod();

		appraisalSetupCacheModel.totalEmp = getTotalEmp();

		appraisalSetupCacheModel.beforeCtcAll = getBeforeCtcAll();

		appraisalSetupCacheModel.appraisalEmp = getAppraisalEmp();

		appraisalSetupCacheModel.beforeCtc = getBeforeCtc();

		appraisalSetupCacheModel.afterCtc = getAfterCtc();

		appraisalSetupCacheModel.totalAreas = getTotalAreas();

		appraisalSetupCacheModel.totalBonus = getTotalBonus();

		appraisalSetupCacheModel.totalCtcAfter = getTotalCtcAfter();

		appraisalSetupCacheModel.isLocked = getIsLocked();

		appraisalSetupCacheModel.isActive = getIsActive();

		appraisalSetupCacheModel.employeeType = getEmployeeType();

		String employeeType = appraisalSetupCacheModel.employeeType;

		if ((employeeType != null) && (employeeType.length() == 0)) {
			appraisalSetupCacheModel.employeeType = null;
		}

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			appraisalSetupCacheModel.addedDate = addedDate.getTime();
		}
		else {
			appraisalSetupCacheModel.addedDate = Long.MIN_VALUE;
		}

		appraisalSetupCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appraisalSetupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appraisalSetupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appraisalSetupCacheModel.modifiedBy = getModifiedBy();

		return appraisalSetupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{appraisalSettingId=");
		sb.append(getAppraisalSettingId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", financialYear=");
		sb.append(getFinancialYear());
		sb.append(", fromDateCycle=");
		sb.append(getFromDateCycle());
		sb.append(", toDateCycle=");
		sb.append(getToDateCycle());
		sb.append(", fromDateSubmission=");
		sb.append(getFromDateSubmission());
		sb.append(", toDateSubmission=");
		sb.append(getToDateSubmission());
		sb.append(", appraisalPeriod=");
		sb.append(getAppraisalPeriod());
		sb.append(", totalEmp=");
		sb.append(getTotalEmp());
		sb.append(", beforeCtcAll=");
		sb.append(getBeforeCtcAll());
		sb.append(", appraisalEmp=");
		sb.append(getAppraisalEmp());
		sb.append(", beforeCtc=");
		sb.append(getBeforeCtc());
		sb.append(", afterCtc=");
		sb.append(getAfterCtc());
		sb.append(", totalAreas=");
		sb.append(getTotalAreas());
		sb.append(", totalBonus=");
		sb.append(getTotalBonus());
		sb.append(", totalCtcAfter=");
		sb.append(getTotalCtcAfter());
		sb.append(", isLocked=");
		sb.append(getIsLocked());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", employeeType=");
		sb.append(getEmployeeType());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.AppraisalSetup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appraisalSettingId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialYear</column-name><column-value><![CDATA[");
		sb.append(getFinancialYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDateCycle</column-name><column-value><![CDATA[");
		sb.append(getFromDateCycle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDateCycle</column-name><column-value><![CDATA[");
		sb.append(getToDateCycle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDateSubmission</column-name><column-value><![CDATA[");
		sb.append(getFromDateSubmission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDateSubmission</column-name><column-value><![CDATA[");
		sb.append(getToDateSubmission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalPeriod</column-name><column-value><![CDATA[");
		sb.append(getAppraisalPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalEmp</column-name><column-value><![CDATA[");
		sb.append(getTotalEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beforeCtcAll</column-name><column-value><![CDATA[");
		sb.append(getBeforeCtcAll());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalEmp</column-name><column-value><![CDATA[");
		sb.append(getAppraisalEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beforeCtc</column-name><column-value><![CDATA[");
		sb.append(getBeforeCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>afterCtc</column-name><column-value><![CDATA[");
		sb.append(getAfterCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAreas</column-name><column-value><![CDATA[");
		sb.append(getTotalAreas());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalBonus</column-name><column-value><![CDATA[");
		sb.append(getTotalBonus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCtcAfter</column-name><column-value><![CDATA[");
		sb.append(getTotalCtcAfter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLocked</column-name><column-value><![CDATA[");
		sb.append(getIsLocked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeType</column-name><column-value><![CDATA[");
		sb.append(getEmployeeType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AppraisalSetup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AppraisalSetup.class, ModelWrapper.class
		};
	private long _appraisalSettingId;
	private long _companyId;
	private String _financialYear;
	private String _originalFinancialYear;
	private Date _fromDateCycle;
	private Date _toDateCycle;
	private Date _fromDateSubmission;
	private Date _toDateSubmission;
	private long _appraisalPeriod;
	private long _totalEmp;
	private long _beforeCtcAll;
	private long _appraisalEmp;
	private long _beforeCtc;
	private long _afterCtc;
	private long _totalAreas;
	private long _totalBonus;
	private long _totalCtcAfter;
	private long _isLocked;
	private long _isActive;
	private long _originalIsActive;
	private boolean _setOriginalIsActive;
	private String _employeeType;
	private Date _addedDate;
	private long _createdBy;
	private Date _modifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private AppraisalSetup _escapedModel;
}