/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.LeaveApply;
import com.liferay.famocom.erpcloud.model.LeaveApplyModel;
import com.liferay.famocom.erpcloud.model.LeaveApplySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LeaveApply service. Represents a row in the &quot;leaveApply&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LeaveApplyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveApplyImpl}.
 * </p>
 *
 * @author Samaresh
 * @see LeaveApplyImpl
 * @see LeaveApply
 * @see LeaveApplyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LeaveApplyModelImpl extends BaseModelImpl<LeaveApply>
	implements LeaveApplyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave apply model instance should use the {@link LeaveApply} interface instead.
	 */
	public static final String TABLE_NAME = "leaveApply";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveApplyId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "fromDate", Types.TIMESTAMP },
			{ "fromDateSession", Types.VARCHAR },
			{ "toDate", Types.TIMESTAMP },
			{ "toDateSession", Types.VARCHAR },
			{ "leaveDays", Types.DOUBLE },
			{ "reason", Types.VARCHAR },
			{ "attachedFile", Types.VARCHAR },
			{ "cancelReason", Types.VARCHAR },
			{ "hrComments", Types.VARCHAR },
			{ "isApprove", Types.INTEGER },
			{ "addedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("leaveApplyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromDateSession", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDateSession", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDays", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("reason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attachedFile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cancelReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isApprove", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table leaveApply (leaveApplyId LONG not null primary key,companyId LONG,employeeId LONG,leaveTypeId LONG,fromDate DATE null,fromDateSession VARCHAR(75) null,toDate DATE null,toDateSession VARCHAR(75) null,leaveDays DOUBLE,reason VARCHAR(75) null,attachedFile VARCHAR(75) null,cancelReason VARCHAR(75) null,hrComments VARCHAR(75) null,isApprove INTEGER,addedDate DATE null,userId LONG,fileEntryId LONG,groupId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table leaveApply";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveApply.leaveApplyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leaveApply.leaveApplyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveApply"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveApply"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.LeaveApply"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long LEAVEAPPLYID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LeaveApply toModel(LeaveApplySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveApply model = new LeaveApplyImpl();

		model.setLeaveApplyId(soapModel.getLeaveApplyId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setLeaveTypeId(soapModel.getLeaveTypeId());
		model.setFromDate(soapModel.getFromDate());
		model.setFromDateSession(soapModel.getFromDateSession());
		model.setToDate(soapModel.getToDate());
		model.setToDateSession(soapModel.getToDateSession());
		model.setLeaveDays(soapModel.getLeaveDays());
		model.setReason(soapModel.getReason());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setCancelReason(soapModel.getCancelReason());
		model.setHrComments(soapModel.getHrComments());
		model.setIsApprove(soapModel.getIsApprove());
		model.setAddedDate(soapModel.getAddedDate());
		model.setUserId(soapModel.getUserId());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LeaveApply> toModels(LeaveApplySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LeaveApply> models = new ArrayList<LeaveApply>(soapModels.length);

		for (LeaveApplySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.LeaveApply"));

	public LeaveApplyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveApplyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveApplyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveApplyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveApply.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveApply.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveApplyId", getLeaveApplyId());
		attributes.put("companyId", getCompanyId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("fromDate", getFromDate());
		attributes.put("fromDateSession", getFromDateSession());
		attributes.put("toDate", getToDate());
		attributes.put("toDateSession", getToDateSession());
		attributes.put("leaveDays", getLeaveDays());
		attributes.put("reason", getReason());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("cancelReason", getCancelReason());
		attributes.put("hrComments", getHrComments());
		attributes.put("isApprove", getIsApprove());
		attributes.put("addedDate", getAddedDate());
		attributes.put("userId", getUserId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveApplyId = (Long)attributes.get("leaveApplyId");

		if (leaveApplyId != null) {
			setLeaveApplyId(leaveApplyId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		String fromDateSession = (String)attributes.get("fromDateSession");

		if (fromDateSession != null) {
			setFromDateSession(fromDateSession);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		String toDateSession = (String)attributes.get("toDateSession");

		if (toDateSession != null) {
			setToDateSession(toDateSession);
		}

		Double leaveDays = (Double)attributes.get("leaveDays");

		if (leaveDays != null) {
			setLeaveDays(leaveDays);
		}

		String reason = (String)attributes.get("reason");

		if (reason != null) {
			setReason(reason);
		}

		String attachedFile = (String)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		String cancelReason = (String)attributes.get("cancelReason");

		if (cancelReason != null) {
			setCancelReason(cancelReason);
		}

		String hrComments = (String)attributes.get("hrComments");

		if (hrComments != null) {
			setHrComments(hrComments);
		}

		Integer isApprove = (Integer)attributes.get("isApprove");

		if (isApprove != null) {
			setIsApprove(isApprove);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getLeaveApplyId() {
		return _leaveApplyId;
	}

	@Override
	public void setLeaveApplyId(long leaveApplyId) {
		_leaveApplyId = leaveApplyId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_leaveTypeId = leaveTypeId;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	@Override
	public String getFromDateSession() {
		if (_fromDateSession == null) {
			return "";
		}
		else {
			return _fromDateSession;
		}
	}

	@Override
	public void setFromDateSession(String fromDateSession) {
		_fromDateSession = fromDateSession;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@JSON
	@Override
	public String getToDateSession() {
		if (_toDateSession == null) {
			return "";
		}
		else {
			return _toDateSession;
		}
	}

	@Override
	public void setToDateSession(String toDateSession) {
		_toDateSession = toDateSession;
	}

	@JSON
	@Override
	public double getLeaveDays() {
		return _leaveDays;
	}

	@Override
	public void setLeaveDays(double leaveDays) {
		_leaveDays = leaveDays;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		_reason = reason;
	}

	@JSON
	@Override
	public String getAttachedFile() {
		if (_attachedFile == null) {
			return "";
		}
		else {
			return _attachedFile;
		}
	}

	@Override
	public void setAttachedFile(String attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public String getCancelReason() {
		if (_cancelReason == null) {
			return "";
		}
		else {
			return _cancelReason;
		}
	}

	@Override
	public void setCancelReason(String cancelReason) {
		_cancelReason = cancelReason;
	}

	@JSON
	@Override
	public String getHrComments() {
		if (_hrComments == null) {
			return "";
		}
		else {
			return _hrComments;
		}
	}

	@Override
	public void setHrComments(String hrComments) {
		_hrComments = hrComments;
	}

	@JSON
	@Override
	public int getIsApprove() {
		return _isApprove;
	}

	@Override
	public void setIsApprove(int isApprove) {
		_isApprove = isApprove;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveApply.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveApply toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveApply)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveApplyImpl leaveApplyImpl = new LeaveApplyImpl();

		leaveApplyImpl.setLeaveApplyId(getLeaveApplyId());
		leaveApplyImpl.setCompanyId(getCompanyId());
		leaveApplyImpl.setEmployeeId(getEmployeeId());
		leaveApplyImpl.setLeaveTypeId(getLeaveTypeId());
		leaveApplyImpl.setFromDate(getFromDate());
		leaveApplyImpl.setFromDateSession(getFromDateSession());
		leaveApplyImpl.setToDate(getToDate());
		leaveApplyImpl.setToDateSession(getToDateSession());
		leaveApplyImpl.setLeaveDays(getLeaveDays());
		leaveApplyImpl.setReason(getReason());
		leaveApplyImpl.setAttachedFile(getAttachedFile());
		leaveApplyImpl.setCancelReason(getCancelReason());
		leaveApplyImpl.setHrComments(getHrComments());
		leaveApplyImpl.setIsApprove(getIsApprove());
		leaveApplyImpl.setAddedDate(getAddedDate());
		leaveApplyImpl.setUserId(getUserId());
		leaveApplyImpl.setFileEntryId(getFileEntryId());
		leaveApplyImpl.setGroupId(getGroupId());
		leaveApplyImpl.setStatus(getStatus());
		leaveApplyImpl.setStatusByUserId(getStatusByUserId());
		leaveApplyImpl.setStatusByUserName(getStatusByUserName());
		leaveApplyImpl.setStatusDate(getStatusDate());
		leaveApplyImpl.setCreateDate(getCreateDate());
		leaveApplyImpl.setModifiedDate(getModifiedDate());

		leaveApplyImpl.resetOriginalValues();

		return leaveApplyImpl;
	}

	@Override
	public int compareTo(LeaveApply leaveApply) {
		long primaryKey = leaveApply.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveApply)) {
			return false;
		}

		LeaveApply leaveApply = (LeaveApply)obj;

		long primaryKey = leaveApply.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LeaveApplyModelImpl leaveApplyModelImpl = this;

		leaveApplyModelImpl._originalUserId = leaveApplyModelImpl._userId;

		leaveApplyModelImpl._setOriginalUserId = false;

		leaveApplyModelImpl._originalGroupId = leaveApplyModelImpl._groupId;

		leaveApplyModelImpl._setOriginalGroupId = false;

		leaveApplyModelImpl._originalStatus = leaveApplyModelImpl._status;

		leaveApplyModelImpl._setOriginalStatus = false;

		leaveApplyModelImpl._setModifiedDate = false;

		leaveApplyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveApply> toCacheModel() {
		LeaveApplyCacheModel leaveApplyCacheModel = new LeaveApplyCacheModel();

		leaveApplyCacheModel.leaveApplyId = getLeaveApplyId();

		leaveApplyCacheModel.companyId = getCompanyId();

		leaveApplyCacheModel.employeeId = getEmployeeId();

		leaveApplyCacheModel.leaveTypeId = getLeaveTypeId();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			leaveApplyCacheModel.fromDate = fromDate.getTime();
		}
		else {
			leaveApplyCacheModel.fromDate = Long.MIN_VALUE;
		}

		leaveApplyCacheModel.fromDateSession = getFromDateSession();

		String fromDateSession = leaveApplyCacheModel.fromDateSession;

		if ((fromDateSession != null) && (fromDateSession.length() == 0)) {
			leaveApplyCacheModel.fromDateSession = null;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			leaveApplyCacheModel.toDate = toDate.getTime();
		}
		else {
			leaveApplyCacheModel.toDate = Long.MIN_VALUE;
		}

		leaveApplyCacheModel.toDateSession = getToDateSession();

		String toDateSession = leaveApplyCacheModel.toDateSession;

		if ((toDateSession != null) && (toDateSession.length() == 0)) {
			leaveApplyCacheModel.toDateSession = null;
		}

		leaveApplyCacheModel.leaveDays = getLeaveDays();

		leaveApplyCacheModel.reason = getReason();

		String reason = leaveApplyCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			leaveApplyCacheModel.reason = null;
		}

		leaveApplyCacheModel.attachedFile = getAttachedFile();

		String attachedFile = leaveApplyCacheModel.attachedFile;

		if ((attachedFile != null) && (attachedFile.length() == 0)) {
			leaveApplyCacheModel.attachedFile = null;
		}

		leaveApplyCacheModel.cancelReason = getCancelReason();

		String cancelReason = leaveApplyCacheModel.cancelReason;

		if ((cancelReason != null) && (cancelReason.length() == 0)) {
			leaveApplyCacheModel.cancelReason = null;
		}

		leaveApplyCacheModel.hrComments = getHrComments();

		String hrComments = leaveApplyCacheModel.hrComments;

		if ((hrComments != null) && (hrComments.length() == 0)) {
			leaveApplyCacheModel.hrComments = null;
		}

		leaveApplyCacheModel.isApprove = getIsApprove();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			leaveApplyCacheModel.addedDate = addedDate.getTime();
		}
		else {
			leaveApplyCacheModel.addedDate = Long.MIN_VALUE;
		}

		leaveApplyCacheModel.userId = getUserId();

		leaveApplyCacheModel.fileEntryId = getFileEntryId();

		leaveApplyCacheModel.groupId = getGroupId();

		leaveApplyCacheModel.status = getStatus();

		leaveApplyCacheModel.statusByUserId = getStatusByUserId();

		leaveApplyCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = leaveApplyCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			leaveApplyCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			leaveApplyCacheModel.statusDate = statusDate.getTime();
		}
		else {
			leaveApplyCacheModel.statusDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveApplyCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveApplyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveApplyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveApplyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return leaveApplyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{leaveApplyId=");
		sb.append(getLeaveApplyId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", fromDateSession=");
		sb.append(getFromDateSession());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", toDateSession=");
		sb.append(getToDateSession());
		sb.append(", leaveDays=");
		sb.append(getLeaveDays());
		sb.append(", reason=");
		sb.append(getReason());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", cancelReason=");
		sb.append(getCancelReason());
		sb.append(", hrComments=");
		sb.append(getHrComments());
		sb.append(", isApprove=");
		sb.append(getIsApprove());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.LeaveApply");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveApplyId</column-name><column-value><![CDATA[");
		sb.append(getLeaveApplyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDateSession</column-name><column-value><![CDATA[");
		sb.append(getFromDateSession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDateSession</column-name><column-value><![CDATA[");
		sb.append(getToDateSession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDays</column-name><column-value><![CDATA[");
		sb.append(getLeaveDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason</column-name><column-value><![CDATA[");
		sb.append(getReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelReason</column-name><column-value><![CDATA[");
		sb.append(getCancelReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrComments</column-name><column-value><![CDATA[");
		sb.append(getHrComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApprove</column-name><column-value><![CDATA[");
		sb.append(getIsApprove());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LeaveApply.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveApply.class, ModelWrapper.class
		};
	private long _leaveApplyId;
	private long _companyId;
	private long _employeeId;
	private long _leaveTypeId;
	private Date _fromDate;
	private String _fromDateSession;
	private Date _toDate;
	private String _toDateSession;
	private double _leaveDays;
	private String _reason;
	private String _attachedFile;
	private String _cancelReason;
	private String _hrComments;
	private int _isApprove;
	private Date _addedDate;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _fileEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private LeaveApply _escapedModel;
}