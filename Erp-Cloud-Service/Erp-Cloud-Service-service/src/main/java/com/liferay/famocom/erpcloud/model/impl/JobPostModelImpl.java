/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.JobPost;
import com.liferay.famocom.erpcloud.model.JobPostModel;
import com.liferay.famocom.erpcloud.model.JobPostSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JobPost service. Represents a row in the &quot;JobPost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JobPostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobPostImpl}.
 * </p>
 *
 * @author Samaresh
 * @see JobPostImpl
 * @see JobPost
 * @see JobPostModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JobPostModelImpl extends BaseModelImpl<JobPost>
	implements JobPostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job post model instance should use the {@link JobPost} interface instead.
	 */
	public static final String TABLE_NAME = "JobPost";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobPostId", Types.BIGINT },
			{ "postName", Types.VARCHAR },
			{ "postDescription", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table JobPost (jobPostId LONG not null primary key,postName VARCHAR(75) null,postDescription VARCHAR(75) null,createdDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JobPost";
	public static final String ORDER_BY_JPQL = " ORDER BY jobPost.jobPostId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY JobPost.jobPostId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.JobPost"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.JobPost"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JobPost toModel(JobPostSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JobPost model = new JobPostImpl();

		model.setJobPostId(soapModel.getJobPostId());
		model.setPostName(soapModel.getPostName());
		model.setPostDescription(soapModel.getPostDescription());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JobPost> toModels(JobPostSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JobPost> models = new ArrayList<JobPost>(soapModels.length);

		for (JobPostSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.JobPost"));

	public JobPostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobPostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobPostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobPostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobPost.class;
	}

	@Override
	public String getModelClassName() {
		return JobPost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobPostId", getJobPostId());
		attributes.put("postName", getPostName());
		attributes.put("postDescription", getPostDescription());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobPostId = (Long)attributes.get("jobPostId");

		if (jobPostId != null) {
			setJobPostId(jobPostId);
		}

		String postName = (String)attributes.get("postName");

		if (postName != null) {
			setPostName(postName);
		}

		String postDescription = (String)attributes.get("postDescription");

		if (postDescription != null) {
			setPostDescription(postDescription);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getJobPostId() {
		return _jobPostId;
	}

	@Override
	public void setJobPostId(long jobPostId) {
		_jobPostId = jobPostId;
	}

	@JSON
	@Override
	public String getPostName() {
		if (_postName == null) {
			return "";
		}
		else {
			return _postName;
		}
	}

	@Override
	public void setPostName(String postName) {
		_postName = postName;
	}

	@JSON
	@Override
	public String getPostDescription() {
		if (_postDescription == null) {
			return "";
		}
		else {
			return _postDescription;
		}
	}

	@Override
	public void setPostDescription(String postDescription) {
		_postDescription = postDescription;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			JobPost.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobPost toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobPost)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobPostImpl jobPostImpl = new JobPostImpl();

		jobPostImpl.setJobPostId(getJobPostId());
		jobPostImpl.setPostName(getPostName());
		jobPostImpl.setPostDescription(getPostDescription());
		jobPostImpl.setCreatedDate(getCreatedDate());
		jobPostImpl.setModifiedDate(getModifiedDate());

		jobPostImpl.resetOriginalValues();

		return jobPostImpl;
	}

	@Override
	public int compareTo(JobPost jobPost) {
		long primaryKey = jobPost.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobPost)) {
			return false;
		}

		JobPost jobPost = (JobPost)obj;

		long primaryKey = jobPost.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobPost> toCacheModel() {
		JobPostCacheModel jobPostCacheModel = new JobPostCacheModel();

		jobPostCacheModel.jobPostId = getJobPostId();

		jobPostCacheModel.postName = getPostName();

		String postName = jobPostCacheModel.postName;

		if ((postName != null) && (postName.length() == 0)) {
			jobPostCacheModel.postName = null;
		}

		jobPostCacheModel.postDescription = getPostDescription();

		String postDescription = jobPostCacheModel.postDescription;

		if ((postDescription != null) && (postDescription.length() == 0)) {
			jobPostCacheModel.postDescription = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			jobPostCacheModel.createdDate = createdDate.getTime();
		}
		else {
			jobPostCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobPostCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobPostCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return jobPostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{jobPostId=");
		sb.append(getJobPostId());
		sb.append(", postName=");
		sb.append(getPostName());
		sb.append(", postDescription=");
		sb.append(getPostDescription());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.JobPost");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobPostId</column-name><column-value><![CDATA[");
		sb.append(getJobPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postName</column-name><column-value><![CDATA[");
		sb.append(getPostName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postDescription</column-name><column-value><![CDATA[");
		sb.append(getPostDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = JobPost.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			JobPost.class, ModelWrapper.class
		};
	private long _jobPostId;
	private String _postName;
	private String _postDescription;
	private Date _createdDate;
	private Date _modifiedDate;
	private JobPost _escapedModel;
}