/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.TravelDeskDetails;
import com.liferay.famocom.erpcloud.model.TravelDeskDetailsModel;
import com.liferay.famocom.erpcloud.model.TravelDeskDetailsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TravelDeskDetails service. Represents a row in the &quot;TravelDesk&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TravelDeskDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TravelDeskDetailsImpl}.
 * </p>
 *
 * @author Samaresh
 * @see TravelDeskDetailsImpl
 * @see TravelDeskDetails
 * @see TravelDeskDetailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TravelDeskDetailsModelImpl extends BaseModelImpl<TravelDeskDetails>
	implements TravelDeskDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a travel desk details model instance should use the {@link TravelDeskDetails} interface instead.
	 */
	public static final String TABLE_NAME = "TravelDesk";
	public static final Object[][] TABLE_COLUMNS = {
			{ "travelDetailsId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "projectTeamsId", Types.BIGINT },
			{ "ticketType", Types.VARCHAR },
			{ "hotel", Types.BOOLEAN },
			{ "fromDate", Types.TIMESTAMP },
			{ "toDate", Types.TIMESTAMP },
			{ "fromTime", Types.VARCHAR },
			{ "toTime", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "purpose", Types.VARCHAR },
			{ "specialInstraction", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "managerComment", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("travelDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectTeamsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hotel", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specialInstraction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("managerComment", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table TravelDesk (travelDetailsId LONG not null primary key,employeeId LONG,companyId LONG,userId LONG,projectId LONG,projectTeamsId LONG,ticketType VARCHAR(75) null,hotel BOOLEAN,fromDate DATE null,toDate DATE null,fromTime VARCHAR(75) null,toTime VARCHAR(75) null,location VARCHAR(75) null,purpose VARCHAR(75) null,specialInstraction VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,managerComment VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TravelDesk";
	public static final String ORDER_BY_JPQL = " ORDER BY travelDeskDetails.travelDetailsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TravelDesk.travelDetailsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.TravelDeskDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.TravelDeskDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.TravelDeskDetails"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long PROJECTID_COLUMN_BITMASK = 2L;
	public static final long TRAVELDETAILSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TravelDeskDetails toModel(TravelDeskDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TravelDeskDetails model = new TravelDeskDetailsImpl();

		model.setTravelDetailsId(soapModel.getTravelDetailsId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setProjectId(soapModel.getProjectId());
		model.setProjectTeamsId(soapModel.getProjectTeamsId());
		model.setTicketType(soapModel.getTicketType());
		model.setHotel(soapModel.isHotel());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setFromTime(soapModel.getFromTime());
		model.setToTime(soapModel.getToTime());
		model.setLocation(soapModel.getLocation());
		model.setPurpose(soapModel.getPurpose());
		model.setSpecialInstraction(soapModel.getSpecialInstraction());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setManagerComment(soapModel.getManagerComment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TravelDeskDetails> toModels(
		TravelDeskDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TravelDeskDetails> models = new ArrayList<TravelDeskDetails>(soapModels.length);

		for (TravelDeskDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.TravelDeskDetails"));

	public TravelDeskDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _travelDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTravelDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _travelDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TravelDeskDetails.class;
	}

	@Override
	public String getModelClassName() {
		return TravelDeskDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("travelDetailsId", getTravelDetailsId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("projectId", getProjectId());
		attributes.put("projectTeamsId", getProjectTeamsId());
		attributes.put("ticketType", getTicketType());
		attributes.put("hotel", isHotel());
		attributes.put("fromDate", getFromDate());
		attributes.put("toDate", getToDate());
		attributes.put("fromTime", getFromTime());
		attributes.put("toTime", getToTime());
		attributes.put("location", getLocation());
		attributes.put("purpose", getPurpose());
		attributes.put("specialInstraction", getSpecialInstraction());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("managerComment", getManagerComment());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long travelDetailsId = (Long)attributes.get("travelDetailsId");

		if (travelDetailsId != null) {
			setTravelDetailsId(travelDetailsId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long projectTeamsId = (Long)attributes.get("projectTeamsId");

		if (projectTeamsId != null) {
			setProjectTeamsId(projectTeamsId);
		}

		String ticketType = (String)attributes.get("ticketType");

		if (ticketType != null) {
			setTicketType(ticketType);
		}

		Boolean hotel = (Boolean)attributes.get("hotel");

		if (hotel != null) {
			setHotel(hotel);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		String fromTime = (String)attributes.get("fromTime");

		if (fromTime != null) {
			setFromTime(fromTime);
		}

		String toTime = (String)attributes.get("toTime");

		if (toTime != null) {
			setToTime(toTime);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String purpose = (String)attributes.get("purpose");

		if (purpose != null) {
			setPurpose(purpose);
		}

		String specialInstraction = (String)attributes.get("specialInstraction");

		if (specialInstraction != null) {
			setSpecialInstraction(specialInstraction);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String managerComment = (String)attributes.get("managerComment");

		if (managerComment != null) {
			setManagerComment(managerComment);
		}
	}

	@JSON
	@Override
	public long getTravelDetailsId() {
		return _travelDetailsId;
	}

	@Override
	public void setTravelDetailsId(long travelDetailsId) {
		_travelDetailsId = travelDetailsId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public long getProjectTeamsId() {
		return _projectTeamsId;
	}

	@Override
	public void setProjectTeamsId(long projectTeamsId) {
		_projectTeamsId = projectTeamsId;
	}

	@JSON
	@Override
	public String getTicketType() {
		if (_ticketType == null) {
			return "";
		}
		else {
			return _ticketType;
		}
	}

	@Override
	public void setTicketType(String ticketType) {
		_ticketType = ticketType;
	}

	@JSON
	@Override
	public boolean getHotel() {
		return _hotel;
	}

	@JSON
	@Override
	public boolean isHotel() {
		return _hotel;
	}

	@Override
	public void setHotel(boolean hotel) {
		_hotel = hotel;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@JSON
	@Override
	public String getFromTime() {
		if (_fromTime == null) {
			return "";
		}
		else {
			return _fromTime;
		}
	}

	@Override
	public void setFromTime(String fromTime) {
		_fromTime = fromTime;
	}

	@JSON
	@Override
	public String getToTime() {
		if (_toTime == null) {
			return "";
		}
		else {
			return _toTime;
		}
	}

	@Override
	public void setToTime(String toTime) {
		_toTime = toTime;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getPurpose() {
		if (_purpose == null) {
			return "";
		}
		else {
			return _purpose;
		}
	}

	@Override
	public void setPurpose(String purpose) {
		_purpose = purpose;
	}

	@JSON
	@Override
	public String getSpecialInstraction() {
		if (_specialInstraction == null) {
			return "";
		}
		else {
			return _specialInstraction;
		}
	}

	@Override
	public void setSpecialInstraction(String specialInstraction) {
		_specialInstraction = specialInstraction;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public String getManagerComment() {
		if (_managerComment == null) {
			return "";
		}
		else {
			return _managerComment;
		}
	}

	@Override
	public void setManagerComment(String managerComment) {
		_managerComment = managerComment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TravelDeskDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TravelDeskDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TravelDeskDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TravelDeskDetailsImpl travelDeskDetailsImpl = new TravelDeskDetailsImpl();

		travelDeskDetailsImpl.setTravelDetailsId(getTravelDetailsId());
		travelDeskDetailsImpl.setEmployeeId(getEmployeeId());
		travelDeskDetailsImpl.setCompanyId(getCompanyId());
		travelDeskDetailsImpl.setUserId(getUserId());
		travelDeskDetailsImpl.setProjectId(getProjectId());
		travelDeskDetailsImpl.setProjectTeamsId(getProjectTeamsId());
		travelDeskDetailsImpl.setTicketType(getTicketType());
		travelDeskDetailsImpl.setHotel(isHotel());
		travelDeskDetailsImpl.setFromDate(getFromDate());
		travelDeskDetailsImpl.setToDate(getToDate());
		travelDeskDetailsImpl.setFromTime(getFromTime());
		travelDeskDetailsImpl.setToTime(getToTime());
		travelDeskDetailsImpl.setLocation(getLocation());
		travelDeskDetailsImpl.setPurpose(getPurpose());
		travelDeskDetailsImpl.setSpecialInstraction(getSpecialInstraction());
		travelDeskDetailsImpl.setCreateDate(getCreateDate());
		travelDeskDetailsImpl.setModifiedDate(getModifiedDate());
		travelDeskDetailsImpl.setStatus(getStatus());
		travelDeskDetailsImpl.setManagerComment(getManagerComment());

		travelDeskDetailsImpl.resetOriginalValues();

		return travelDeskDetailsImpl;
	}

	@Override
	public int compareTo(TravelDeskDetails travelDeskDetails) {
		long primaryKey = travelDeskDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TravelDeskDetails)) {
			return false;
		}

		TravelDeskDetails travelDeskDetails = (TravelDeskDetails)obj;

		long primaryKey = travelDeskDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TravelDeskDetailsModelImpl travelDeskDetailsModelImpl = this;

		travelDeskDetailsModelImpl._originalEmployeeId = travelDeskDetailsModelImpl._employeeId;

		travelDeskDetailsModelImpl._setOriginalEmployeeId = false;

		travelDeskDetailsModelImpl._originalProjectId = travelDeskDetailsModelImpl._projectId;

		travelDeskDetailsModelImpl._setOriginalProjectId = false;

		travelDeskDetailsModelImpl._setModifiedDate = false;

		travelDeskDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TravelDeskDetails> toCacheModel() {
		TravelDeskDetailsCacheModel travelDeskDetailsCacheModel = new TravelDeskDetailsCacheModel();

		travelDeskDetailsCacheModel.travelDetailsId = getTravelDetailsId();

		travelDeskDetailsCacheModel.employeeId = getEmployeeId();

		travelDeskDetailsCacheModel.companyId = getCompanyId();

		travelDeskDetailsCacheModel.userId = getUserId();

		travelDeskDetailsCacheModel.projectId = getProjectId();

		travelDeskDetailsCacheModel.projectTeamsId = getProjectTeamsId();

		travelDeskDetailsCacheModel.ticketType = getTicketType();

		String ticketType = travelDeskDetailsCacheModel.ticketType;

		if ((ticketType != null) && (ticketType.length() == 0)) {
			travelDeskDetailsCacheModel.ticketType = null;
		}

		travelDeskDetailsCacheModel.hotel = isHotel();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			travelDeskDetailsCacheModel.fromDate = fromDate.getTime();
		}
		else {
			travelDeskDetailsCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			travelDeskDetailsCacheModel.toDate = toDate.getTime();
		}
		else {
			travelDeskDetailsCacheModel.toDate = Long.MIN_VALUE;
		}

		travelDeskDetailsCacheModel.fromTime = getFromTime();

		String fromTime = travelDeskDetailsCacheModel.fromTime;

		if ((fromTime != null) && (fromTime.length() == 0)) {
			travelDeskDetailsCacheModel.fromTime = null;
		}

		travelDeskDetailsCacheModel.toTime = getToTime();

		String toTime = travelDeskDetailsCacheModel.toTime;

		if ((toTime != null) && (toTime.length() == 0)) {
			travelDeskDetailsCacheModel.toTime = null;
		}

		travelDeskDetailsCacheModel.location = getLocation();

		String location = travelDeskDetailsCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			travelDeskDetailsCacheModel.location = null;
		}

		travelDeskDetailsCacheModel.purpose = getPurpose();

		String purpose = travelDeskDetailsCacheModel.purpose;

		if ((purpose != null) && (purpose.length() == 0)) {
			travelDeskDetailsCacheModel.purpose = null;
		}

		travelDeskDetailsCacheModel.specialInstraction = getSpecialInstraction();

		String specialInstraction = travelDeskDetailsCacheModel.specialInstraction;

		if ((specialInstraction != null) && (specialInstraction.length() == 0)) {
			travelDeskDetailsCacheModel.specialInstraction = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			travelDeskDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			travelDeskDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			travelDeskDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			travelDeskDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		travelDeskDetailsCacheModel.status = getStatus();

		travelDeskDetailsCacheModel.managerComment = getManagerComment();

		String managerComment = travelDeskDetailsCacheModel.managerComment;

		if ((managerComment != null) && (managerComment.length() == 0)) {
			travelDeskDetailsCacheModel.managerComment = null;
		}

		return travelDeskDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{travelDetailsId=");
		sb.append(getTravelDetailsId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", projectTeamsId=");
		sb.append(getProjectTeamsId());
		sb.append(", ticketType=");
		sb.append(getTicketType());
		sb.append(", hotel=");
		sb.append(isHotel());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", fromTime=");
		sb.append(getFromTime());
		sb.append(", toTime=");
		sb.append(getToTime());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", purpose=");
		sb.append(getPurpose());
		sb.append(", specialInstraction=");
		sb.append(getSpecialInstraction());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", managerComment=");
		sb.append(getManagerComment());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.TravelDeskDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>travelDetailsId</column-name><column-value><![CDATA[");
		sb.append(getTravelDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectTeamsId</column-name><column-value><![CDATA[");
		sb.append(getProjectTeamsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketType</column-name><column-value><![CDATA[");
		sb.append(getTicketType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotel</column-name><column-value><![CDATA[");
		sb.append(isHotel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromTime</column-name><column-value><![CDATA[");
		sb.append(getFromTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toTime</column-name><column-value><![CDATA[");
		sb.append(getToTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purpose</column-name><column-value><![CDATA[");
		sb.append(getPurpose());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specialInstraction</column-name><column-value><![CDATA[");
		sb.append(getSpecialInstraction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerComment</column-name><column-value><![CDATA[");
		sb.append(getManagerComment());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TravelDeskDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TravelDeskDetails.class, ModelWrapper.class
		};
	private long _travelDetailsId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _companyId;
	private long _userId;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _projectTeamsId;
	private String _ticketType;
	private boolean _hotel;
	private Date _fromDate;
	private Date _toDate;
	private String _fromTime;
	private String _toTime;
	private String _location;
	private String _purpose;
	private String _specialInstraction;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private String _managerComment;
	private long _columnBitmask;
	private TravelDeskDetails _escapedModel;
}