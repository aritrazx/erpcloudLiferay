/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.Employee;
import com.liferay.famocom.erpcloud.model.EmployeeEmployeePhotoBlobModel;
import com.liferay.famocom.erpcloud.model.EmployeeModel;
import com.liferay.famocom.erpcloud.model.EmployeeSoap;
import com.liferay.famocom.erpcloud.service.EmployeeLocalServiceUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Samaresh
 * @see EmployeeImpl
 * @see Employee
 * @see EmployeeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmployeeModelImpl extends BaseModelImpl<Employee>
	implements EmployeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link Employee} interface instead.
	 */
	public static final String TABLE_NAME = "employee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "employeeCode", Types.BIGINT },
			{ "dateOfJoing", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "designation", Types.VARCHAR },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "gender", Types.VARCHAR },
			{ "maritalStatus", Types.VARCHAR },
			{ "noOfChild", Types.BIGINT },
			{ "note", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "postCode", Types.VARCHAR },
			{ "homePhone", Types.INTEGER },
			{ "mobileNumber", Types.INTEGER },
			{ "emaiAddress", Types.VARCHAR },
			{ "anniversary", Types.TIMESTAMP },
			{ "employeePhoto", Types.BLOB },
			{ "employeeStatus", Types.INTEGER },
			{ "totalPay", Types.DOUBLE },
			{ "basicPay", Types.DOUBLE },
			{ "da", Types.DOUBLE },
			{ "hra", Types.DOUBLE },
			{ "medical", Types.DOUBLE },
			{ "ta", Types.DOUBLE },
			{ "conveyance", Types.DOUBLE },
			{ "internet", Types.DOUBLE },
			{ "mobile", Types.DOUBLE },
			{ "fare", Types.DOUBLE },
			{ "areas", Types.DOUBLE },
			{ "bouns", Types.DOUBLE },
			{ "insurance", Types.DOUBLE },
			{ "otherAllowance", Types.DOUBLE },
			{ "providentFund", Types.DOUBLE },
			{ "professionTax", Types.DOUBLE },
			{ "incomeTax", Types.DOUBLE },
			{ "loan", Types.DOUBLE },
			{ "otherDeduction", Types.DOUBLE },
			{ "bankId", Types.BIGINT },
			{ "branchAddress", Types.VARCHAR },
			{ "accountNo", Types.VARCHAR },
			{ "pfNo", Types.VARCHAR },
			{ "aadhaarNo", Types.VARCHAR },
			{ "employeetypeId", Types.INTEGER },
			{ "ispfdeduct", Types.INTEGER },
			{ "roleId", Types.INTEGER },
			{ "addedDate", Types.TIMESTAMP },
			{ "photoId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "branchId", Types.BIGINT },
			{ "panNo", Types.VARCHAR },
			{ "pesonalEmaiAddress", Types.VARCHAR },
			{ "payPerMonth", Types.DOUBLE },
			{ "groupId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateOfJoing", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noOfChild", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homePhone", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("emaiAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("anniversary", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeePhoto", Types.BLOB);
		TABLE_COLUMNS_MAP.put("employeeStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPay", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("basicPay", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("da", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("hra", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medical", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ta", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("conveyance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("internet", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("mobile", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("fare", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("areas", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("bouns", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("insurance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("otherAllowance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("providentFund", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("professionTax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("incomeTax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("loan", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("otherDeduction", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("bankId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branchAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pfNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("aadhaarNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeetypeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ispfdeduct", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("roleId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("photoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("panNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pesonalEmaiAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payPerMonth", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table employee (employeeId LONG not null primary key,companyId LONG,employeeCode LONG,dateOfJoing DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,designation VARCHAR(75) null,dateOfBirth DATE null,gender VARCHAR(75) null,maritalStatus VARCHAR(75) null,noOfChild LONG,note VARCHAR(75) null,address VARCHAR(75) null,state_ VARCHAR(75) null,postCode VARCHAR(75) null,homePhone INTEGER,mobileNumber INTEGER,emaiAddress VARCHAR(75) null,anniversary DATE null,employeePhoto BLOB,employeeStatus INTEGER,totalPay DOUBLE,basicPay DOUBLE,da DOUBLE,hra DOUBLE,medical DOUBLE,ta DOUBLE,conveyance DOUBLE,internet DOUBLE,mobile DOUBLE,fare DOUBLE,areas DOUBLE,bouns DOUBLE,insurance DOUBLE,otherAllowance DOUBLE,providentFund DOUBLE,professionTax DOUBLE,incomeTax DOUBLE,loan DOUBLE,otherDeduction DOUBLE,bankId LONG,branchAddress VARCHAR(75) null,accountNo VARCHAR(75) null,pfNo VARCHAR(75) null,aadhaarNo VARCHAR(75) null,employeetypeId INTEGER,ispfdeduct INTEGER,roleId INTEGER,addedDate DATE null,photoId LONG,userId LONG,branchId LONG,panNo VARCHAR(75) null,pesonalEmaiAddress VARCHAR(75) null,payPerMonth DOUBLE,groupId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table employee";
	public static final String ORDER_BY_JPQL = " ORDER BY employee.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY employee.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.Employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.Employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.Employee"),
			true);
	public static final long EMPLOYEECODE_COLUMN_BITMASK = 1L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long EMPLOYEESTATUS_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long STATUS_COLUMN_BITMASK = 16L;
	public static final long USERID_COLUMN_BITMASK = 32L;
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Employee toModel(EmployeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Employee model = new EmployeeImpl();

		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setEmployeeCode(soapModel.getEmployeeCode());
		model.setDateOfJoing(soapModel.getDateOfJoing());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setDesignation(soapModel.getDesignation());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setGender(soapModel.getGender());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setNoOfChild(soapModel.getNoOfChild());
		model.setNote(soapModel.getNote());
		model.setAddress(soapModel.getAddress());
		model.setState(soapModel.getState());
		model.setPostCode(soapModel.getPostCode());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobileNumber(soapModel.getMobileNumber());
		model.setEmaiAddress(soapModel.getEmaiAddress());
		model.setAnniversary(soapModel.getAnniversary());
		model.setEmployeePhoto(soapModel.getEmployeePhoto());
		model.setEmployeeStatus(soapModel.getEmployeeStatus());
		model.setTotalPay(soapModel.getTotalPay());
		model.setBasicPay(soapModel.getBasicPay());
		model.setDa(soapModel.getDa());
		model.setHra(soapModel.getHra());
		model.setMedical(soapModel.getMedical());
		model.setTa(soapModel.getTa());
		model.setConveyance(soapModel.getConveyance());
		model.setInternet(soapModel.getInternet());
		model.setMobile(soapModel.getMobile());
		model.setFare(soapModel.getFare());
		model.setAreas(soapModel.getAreas());
		model.setBouns(soapModel.getBouns());
		model.setInsurance(soapModel.getInsurance());
		model.setOtherAllowance(soapModel.getOtherAllowance());
		model.setProvidentFund(soapModel.getProvidentFund());
		model.setProfessionTax(soapModel.getProfessionTax());
		model.setIncomeTax(soapModel.getIncomeTax());
		model.setLoan(soapModel.getLoan());
		model.setOtherDeduction(soapModel.getOtherDeduction());
		model.setBankId(soapModel.getBankId());
		model.setBranchAddress(soapModel.getBranchAddress());
		model.setAccountNo(soapModel.getAccountNo());
		model.setPfNo(soapModel.getPfNo());
		model.setAadhaarNo(soapModel.getAadhaarNo());
		model.setEmployeetypeId(soapModel.getEmployeetypeId());
		model.setIspfdeduct(soapModel.getIspfdeduct());
		model.setRoleId(soapModel.getRoleId());
		model.setAddedDate(soapModel.getAddedDate());
		model.setPhotoId(soapModel.getPhotoId());
		model.setUserId(soapModel.getUserId());
		model.setBranchId(soapModel.getBranchId());
		model.setPanNo(soapModel.getPanNo());
		model.setPesonalEmaiAddress(soapModel.getPesonalEmaiAddress());
		model.setPayPerMonth(soapModel.getPayPerMonth());
		model.setGroupId(soapModel.getGroupId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Employee> toModels(EmployeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Employee> models = new ArrayList<Employee>(soapModels.length);

		for (EmployeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.Employee"));

	public EmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("employeeCode", getEmployeeCode());
		attributes.put("dateOfJoing", getDateOfJoing());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("designation", getDesignation());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("gender", getGender());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("noOfChild", getNoOfChild());
		attributes.put("note", getNote());
		attributes.put("address", getAddress());
		attributes.put("state", getState());
		attributes.put("postCode", getPostCode());
		attributes.put("homePhone", getHomePhone());
		attributes.put("mobileNumber", getMobileNumber());
		attributes.put("emaiAddress", getEmaiAddress());
		attributes.put("anniversary", getAnniversary());
		attributes.put("employeePhoto", getEmployeePhoto());
		attributes.put("employeeStatus", getEmployeeStatus());
		attributes.put("totalPay", getTotalPay());
		attributes.put("basicPay", getBasicPay());
		attributes.put("da", getDa());
		attributes.put("hra", getHra());
		attributes.put("medical", getMedical());
		attributes.put("ta", getTa());
		attributes.put("conveyance", getConveyance());
		attributes.put("internet", getInternet());
		attributes.put("mobile", getMobile());
		attributes.put("fare", getFare());
		attributes.put("areas", getAreas());
		attributes.put("bouns", getBouns());
		attributes.put("insurance", getInsurance());
		attributes.put("otherAllowance", getOtherAllowance());
		attributes.put("providentFund", getProvidentFund());
		attributes.put("professionTax", getProfessionTax());
		attributes.put("incomeTax", getIncomeTax());
		attributes.put("loan", getLoan());
		attributes.put("otherDeduction", getOtherDeduction());
		attributes.put("bankId", getBankId());
		attributes.put("branchAddress", getBranchAddress());
		attributes.put("accountNo", getAccountNo());
		attributes.put("pfNo", getPfNo());
		attributes.put("aadhaarNo", getAadhaarNo());
		attributes.put("employeetypeId", getEmployeetypeId());
		attributes.put("ispfdeduct", getIspfdeduct());
		attributes.put("roleId", getRoleId());
		attributes.put("addedDate", getAddedDate());
		attributes.put("photoId", getPhotoId());
		attributes.put("userId", getUserId());
		attributes.put("branchId", getBranchId());
		attributes.put("panNo", getPanNo());
		attributes.put("pesonalEmaiAddress", getPesonalEmaiAddress());
		attributes.put("payPerMonth", getPayPerMonth());
		attributes.put("groupId", getGroupId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long employeeCode = (Long)attributes.get("employeeCode");

		if (employeeCode != null) {
			setEmployeeCode(employeeCode);
		}

		Date dateOfJoing = (Date)attributes.get("dateOfJoing");

		if (dateOfJoing != null) {
			setDateOfJoing(dateOfJoing);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String designation = (String)attributes.get("designation");

		if (designation != null) {
			setDesignation(designation);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String maritalStatus = (String)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		Long noOfChild = (Long)attributes.get("noOfChild");

		if (noOfChild != null) {
			setNoOfChild(noOfChild);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String postCode = (String)attributes.get("postCode");

		if (postCode != null) {
			setPostCode(postCode);
		}

		Integer homePhone = (Integer)attributes.get("homePhone");

		if (homePhone != null) {
			setHomePhone(homePhone);
		}

		Integer mobileNumber = (Integer)attributes.get("mobileNumber");

		if (mobileNumber != null) {
			setMobileNumber(mobileNumber);
		}

		String emaiAddress = (String)attributes.get("emaiAddress");

		if (emaiAddress != null) {
			setEmaiAddress(emaiAddress);
		}

		Date anniversary = (Date)attributes.get("anniversary");

		if (anniversary != null) {
			setAnniversary(anniversary);
		}

		Blob employeePhoto = (Blob)attributes.get("employeePhoto");

		if (employeePhoto != null) {
			setEmployeePhoto(employeePhoto);
		}

		Integer employeeStatus = (Integer)attributes.get("employeeStatus");

		if (employeeStatus != null) {
			setEmployeeStatus(employeeStatus);
		}

		Double totalPay = (Double)attributes.get("totalPay");

		if (totalPay != null) {
			setTotalPay(totalPay);
		}

		Double basicPay = (Double)attributes.get("basicPay");

		if (basicPay != null) {
			setBasicPay(basicPay);
		}

		Double da = (Double)attributes.get("da");

		if (da != null) {
			setDa(da);
		}

		Double hra = (Double)attributes.get("hra");

		if (hra != null) {
			setHra(hra);
		}

		Double medical = (Double)attributes.get("medical");

		if (medical != null) {
			setMedical(medical);
		}

		Double ta = (Double)attributes.get("ta");

		if (ta != null) {
			setTa(ta);
		}

		Double conveyance = (Double)attributes.get("conveyance");

		if (conveyance != null) {
			setConveyance(conveyance);
		}

		Double internet = (Double)attributes.get("internet");

		if (internet != null) {
			setInternet(internet);
		}

		Double mobile = (Double)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}

		Double fare = (Double)attributes.get("fare");

		if (fare != null) {
			setFare(fare);
		}

		Double areas = (Double)attributes.get("areas");

		if (areas != null) {
			setAreas(areas);
		}

		Double bouns = (Double)attributes.get("bouns");

		if (bouns != null) {
			setBouns(bouns);
		}

		Double insurance = (Double)attributes.get("insurance");

		if (insurance != null) {
			setInsurance(insurance);
		}

		Double otherAllowance = (Double)attributes.get("otherAllowance");

		if (otherAllowance != null) {
			setOtherAllowance(otherAllowance);
		}

		Double providentFund = (Double)attributes.get("providentFund");

		if (providentFund != null) {
			setProvidentFund(providentFund);
		}

		Double professionTax = (Double)attributes.get("professionTax");

		if (professionTax != null) {
			setProfessionTax(professionTax);
		}

		Double incomeTax = (Double)attributes.get("incomeTax");

		if (incomeTax != null) {
			setIncomeTax(incomeTax);
		}

		Double loan = (Double)attributes.get("loan");

		if (loan != null) {
			setLoan(loan);
		}

		Double otherDeduction = (Double)attributes.get("otherDeduction");

		if (otherDeduction != null) {
			setOtherDeduction(otherDeduction);
		}

		Long bankId = (Long)attributes.get("bankId");

		if (bankId != null) {
			setBankId(bankId);
		}

		String branchAddress = (String)attributes.get("branchAddress");

		if (branchAddress != null) {
			setBranchAddress(branchAddress);
		}

		String accountNo = (String)attributes.get("accountNo");

		if (accountNo != null) {
			setAccountNo(accountNo);
		}

		String pfNo = (String)attributes.get("pfNo");

		if (pfNo != null) {
			setPfNo(pfNo);
		}

		String aadhaarNo = (String)attributes.get("aadhaarNo");

		if (aadhaarNo != null) {
			setAadhaarNo(aadhaarNo);
		}

		Integer employeetypeId = (Integer)attributes.get("employeetypeId");

		if (employeetypeId != null) {
			setEmployeetypeId(employeetypeId);
		}

		Integer ispfdeduct = (Integer)attributes.get("ispfdeduct");

		if (ispfdeduct != null) {
			setIspfdeduct(ispfdeduct);
		}

		Integer roleId = (Integer)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long photoId = (Long)attributes.get("photoId");

		if (photoId != null) {
			setPhotoId(photoId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long branchId = (Long)attributes.get("branchId");

		if (branchId != null) {
			setBranchId(branchId);
		}

		String panNo = (String)attributes.get("panNo");

		if (panNo != null) {
			setPanNo(panNo);
		}

		String pesonalEmaiAddress = (String)attributes.get("pesonalEmaiAddress");

		if (pesonalEmaiAddress != null) {
			setPesonalEmaiAddress(pesonalEmaiAddress);
		}

		Double payPerMonth = (Double)attributes.get("payPerMonth");

		if (payPerMonth != null) {
			setPayPerMonth(payPerMonth);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getEmployeeCode() {
		return _employeeCode;
	}

	@Override
	public void setEmployeeCode(long employeeCode) {
		_columnBitmask |= EMPLOYEECODE_COLUMN_BITMASK;

		if (!_setOriginalEmployeeCode) {
			_setOriginalEmployeeCode = true;

			_originalEmployeeCode = _employeeCode;
		}

		_employeeCode = employeeCode;
	}

	public long getOriginalEmployeeCode() {
		return _originalEmployeeCode;
	}

	@JSON
	@Override
	public Date getDateOfJoing() {
		return _dateOfJoing;
	}

	@Override
	public void setDateOfJoing(Date dateOfJoing) {
		_dateOfJoing = dateOfJoing;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		_designation = designation;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public long getNoOfChild() {
		return _noOfChild;
	}

	@Override
	public void setNoOfChild(long noOfChild) {
		_noOfChild = noOfChild;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getPostCode() {
		if (_postCode == null) {
			return "";
		}
		else {
			return _postCode;
		}
	}

	@Override
	public void setPostCode(String postCode) {
		_postCode = postCode;
	}

	@JSON
	@Override
	public int getHomePhone() {
		return _homePhone;
	}

	@Override
	public void setHomePhone(int homePhone) {
		_homePhone = homePhone;
	}

	@JSON
	@Override
	public int getMobileNumber() {
		return _mobileNumber;
	}

	@Override
	public void setMobileNumber(int mobileNumber) {
		_mobileNumber = mobileNumber;
	}

	@JSON
	@Override
	public String getEmaiAddress() {
		if (_emaiAddress == null) {
			return "";
		}
		else {
			return _emaiAddress;
		}
	}

	@Override
	public void setEmaiAddress(String emaiAddress) {
		_emaiAddress = emaiAddress;
	}

	@JSON
	@Override
	public Date getAnniversary() {
		return _anniversary;
	}

	@Override
	public void setAnniversary(Date anniversary) {
		_anniversary = anniversary;
	}

	@JSON
	@Override
	public Blob getEmployeePhoto() {
		if (_employeePhotoBlobModel == null) {
			try {
				_employeePhotoBlobModel = EmployeeLocalServiceUtil.getEmployeePhotoBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_employeePhotoBlobModel != null) {
			blob = _employeePhotoBlobModel.getEmployeePhotoBlob();
		}

		return blob;
	}

	@Override
	public void setEmployeePhoto(Blob employeePhoto) {
		if (_employeePhotoBlobModel == null) {
			_employeePhotoBlobModel = new EmployeeEmployeePhotoBlobModel(getPrimaryKey(),
					employeePhoto);
		}
		else {
			_employeePhotoBlobModel.setEmployeePhotoBlob(employeePhoto);
		}
	}

	@JSON
	@Override
	public int getEmployeeStatus() {
		return _employeeStatus;
	}

	@Override
	public void setEmployeeStatus(int employeeStatus) {
		_columnBitmask |= EMPLOYEESTATUS_COLUMN_BITMASK;

		if (!_setOriginalEmployeeStatus) {
			_setOriginalEmployeeStatus = true;

			_originalEmployeeStatus = _employeeStatus;
		}

		_employeeStatus = employeeStatus;
	}

	public int getOriginalEmployeeStatus() {
		return _originalEmployeeStatus;
	}

	@JSON
	@Override
	public double getTotalPay() {
		return _totalPay;
	}

	@Override
	public void setTotalPay(double totalPay) {
		_totalPay = totalPay;
	}

	@JSON
	@Override
	public double getBasicPay() {
		return _basicPay;
	}

	@Override
	public void setBasicPay(double basicPay) {
		_basicPay = basicPay;
	}

	@JSON
	@Override
	public double getDa() {
		return _da;
	}

	@Override
	public void setDa(double da) {
		_da = da;
	}

	@JSON
	@Override
	public double getHra() {
		return _hra;
	}

	@Override
	public void setHra(double hra) {
		_hra = hra;
	}

	@JSON
	@Override
	public double getMedical() {
		return _medical;
	}

	@Override
	public void setMedical(double medical) {
		_medical = medical;
	}

	@JSON
	@Override
	public double getTa() {
		return _ta;
	}

	@Override
	public void setTa(double ta) {
		_ta = ta;
	}

	@JSON
	@Override
	public double getConveyance() {
		return _conveyance;
	}

	@Override
	public void setConveyance(double conveyance) {
		_conveyance = conveyance;
	}

	@JSON
	@Override
	public double getInternet() {
		return _internet;
	}

	@Override
	public void setInternet(double internet) {
		_internet = internet;
	}

	@JSON
	@Override
	public double getMobile() {
		return _mobile;
	}

	@Override
	public void setMobile(double mobile) {
		_mobile = mobile;
	}

	@JSON
	@Override
	public double getFare() {
		return _fare;
	}

	@Override
	public void setFare(double fare) {
		_fare = fare;
	}

	@JSON
	@Override
	public double getAreas() {
		return _areas;
	}

	@Override
	public void setAreas(double areas) {
		_areas = areas;
	}

	@JSON
	@Override
	public double getBouns() {
		return _bouns;
	}

	@Override
	public void setBouns(double bouns) {
		_bouns = bouns;
	}

	@JSON
	@Override
	public double getInsurance() {
		return _insurance;
	}

	@Override
	public void setInsurance(double insurance) {
		_insurance = insurance;
	}

	@JSON
	@Override
	public double getOtherAllowance() {
		return _otherAllowance;
	}

	@Override
	public void setOtherAllowance(double otherAllowance) {
		_otherAllowance = otherAllowance;
	}

	@JSON
	@Override
	public double getProvidentFund() {
		return _providentFund;
	}

	@Override
	public void setProvidentFund(double providentFund) {
		_providentFund = providentFund;
	}

	@JSON
	@Override
	public double getProfessionTax() {
		return _professionTax;
	}

	@Override
	public void setProfessionTax(double professionTax) {
		_professionTax = professionTax;
	}

	@JSON
	@Override
	public double getIncomeTax() {
		return _incomeTax;
	}

	@Override
	public void setIncomeTax(double incomeTax) {
		_incomeTax = incomeTax;
	}

	@JSON
	@Override
	public double getLoan() {
		return _loan;
	}

	@Override
	public void setLoan(double loan) {
		_loan = loan;
	}

	@JSON
	@Override
	public double getOtherDeduction() {
		return _otherDeduction;
	}

	@Override
	public void setOtherDeduction(double otherDeduction) {
		_otherDeduction = otherDeduction;
	}

	@JSON
	@Override
	public long getBankId() {
		return _bankId;
	}

	@Override
	public void setBankId(long bankId) {
		_bankId = bankId;
	}

	@JSON
	@Override
	public String getBranchAddress() {
		if (_branchAddress == null) {
			return "";
		}
		else {
			return _branchAddress;
		}
	}

	@Override
	public void setBranchAddress(String branchAddress) {
		_branchAddress = branchAddress;
	}

	@JSON
	@Override
	public String getAccountNo() {
		if (_accountNo == null) {
			return "";
		}
		else {
			return _accountNo;
		}
	}

	@Override
	public void setAccountNo(String accountNo) {
		_accountNo = accountNo;
	}

	@JSON
	@Override
	public String getPfNo() {
		if (_pfNo == null) {
			return "";
		}
		else {
			return _pfNo;
		}
	}

	@Override
	public void setPfNo(String pfNo) {
		_pfNo = pfNo;
	}

	@JSON
	@Override
	public String getAadhaarNo() {
		if (_aadhaarNo == null) {
			return "";
		}
		else {
			return _aadhaarNo;
		}
	}

	@Override
	public void setAadhaarNo(String aadhaarNo) {
		_aadhaarNo = aadhaarNo;
	}

	@JSON
	@Override
	public int getEmployeetypeId() {
		return _employeetypeId;
	}

	@Override
	public void setEmployeetypeId(int employeetypeId) {
		_employeetypeId = employeetypeId;
	}

	@JSON
	@Override
	public int getIspfdeduct() {
		return _ispfdeduct;
	}

	@Override
	public void setIspfdeduct(int ispfdeduct) {
		_ispfdeduct = ispfdeduct;
	}

	@JSON
	@Override
	public int getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(int roleId) {
		_roleId = roleId;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getPhotoId() {
		return _photoId;
	}

	@Override
	public void setPhotoId(long photoId) {
		_photoId = photoId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getBranchId() {
		return _branchId;
	}

	@Override
	public void setBranchId(long branchId) {
		_branchId = branchId;
	}

	@JSON
	@Override
	public String getPanNo() {
		if (_panNo == null) {
			return "";
		}
		else {
			return _panNo;
		}
	}

	@Override
	public void setPanNo(String panNo) {
		_panNo = panNo;
	}

	@JSON
	@Override
	public String getPesonalEmaiAddress() {
		if (_pesonalEmaiAddress == null) {
			return "";
		}
		else {
			return _pesonalEmaiAddress;
		}
	}

	@Override
	public void setPesonalEmaiAddress(String pesonalEmaiAddress) {
		_pesonalEmaiAddress = pesonalEmaiAddress;
	}

	@JSON
	@Override
	public double getPayPerMonth() {
		return _payPerMonth;
	}

	@Override
	public void setPayPerMonth(double payPerMonth) {
		_payPerMonth = payPerMonth;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setEmployeeId(getEmployeeId());
		employeeImpl.setCompanyId(getCompanyId());
		employeeImpl.setEmployeeCode(getEmployeeCode());
		employeeImpl.setDateOfJoing(getDateOfJoing());
		employeeImpl.setFirstName(getFirstName());
		employeeImpl.setLastName(getLastName());
		employeeImpl.setDesignation(getDesignation());
		employeeImpl.setDateOfBirth(getDateOfBirth());
		employeeImpl.setGender(getGender());
		employeeImpl.setMaritalStatus(getMaritalStatus());
		employeeImpl.setNoOfChild(getNoOfChild());
		employeeImpl.setNote(getNote());
		employeeImpl.setAddress(getAddress());
		employeeImpl.setState(getState());
		employeeImpl.setPostCode(getPostCode());
		employeeImpl.setHomePhone(getHomePhone());
		employeeImpl.setMobileNumber(getMobileNumber());
		employeeImpl.setEmaiAddress(getEmaiAddress());
		employeeImpl.setAnniversary(getAnniversary());
		employeeImpl.setEmployeeStatus(getEmployeeStatus());
		employeeImpl.setTotalPay(getTotalPay());
		employeeImpl.setBasicPay(getBasicPay());
		employeeImpl.setDa(getDa());
		employeeImpl.setHra(getHra());
		employeeImpl.setMedical(getMedical());
		employeeImpl.setTa(getTa());
		employeeImpl.setConveyance(getConveyance());
		employeeImpl.setInternet(getInternet());
		employeeImpl.setMobile(getMobile());
		employeeImpl.setFare(getFare());
		employeeImpl.setAreas(getAreas());
		employeeImpl.setBouns(getBouns());
		employeeImpl.setInsurance(getInsurance());
		employeeImpl.setOtherAllowance(getOtherAllowance());
		employeeImpl.setProvidentFund(getProvidentFund());
		employeeImpl.setProfessionTax(getProfessionTax());
		employeeImpl.setIncomeTax(getIncomeTax());
		employeeImpl.setLoan(getLoan());
		employeeImpl.setOtherDeduction(getOtherDeduction());
		employeeImpl.setBankId(getBankId());
		employeeImpl.setBranchAddress(getBranchAddress());
		employeeImpl.setAccountNo(getAccountNo());
		employeeImpl.setPfNo(getPfNo());
		employeeImpl.setAadhaarNo(getAadhaarNo());
		employeeImpl.setEmployeetypeId(getEmployeetypeId());
		employeeImpl.setIspfdeduct(getIspfdeduct());
		employeeImpl.setRoleId(getRoleId());
		employeeImpl.setAddedDate(getAddedDate());
		employeeImpl.setPhotoId(getPhotoId());
		employeeImpl.setUserId(getUserId());
		employeeImpl.setBranchId(getBranchId());
		employeeImpl.setPanNo(getPanNo());
		employeeImpl.setPesonalEmaiAddress(getPesonalEmaiAddress());
		employeeImpl.setPayPerMonth(getPayPerMonth());
		employeeImpl.setGroupId(getGroupId());
		employeeImpl.setStatus(getStatus());
		employeeImpl.setStatusByUserId(getStatusByUserId());
		employeeImpl.setStatusByUserName(getStatusByUserName());
		employeeImpl.setStatusDate(getStatusDate());
		employeeImpl.setCreateDate(getCreateDate());
		employeeImpl.setModifiedDate(getModifiedDate());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), employee.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)obj;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmployeeModelImpl employeeModelImpl = this;

		employeeModelImpl._originalEmployeeId = employeeModelImpl._employeeId;

		employeeModelImpl._setOriginalEmployeeId = false;

		employeeModelImpl._originalEmployeeCode = employeeModelImpl._employeeCode;

		employeeModelImpl._setOriginalEmployeeCode = false;

		employeeModelImpl._employeePhotoBlobModel = null;

		employeeModelImpl._originalEmployeeStatus = employeeModelImpl._employeeStatus;

		employeeModelImpl._setOriginalEmployeeStatus = false;

		employeeModelImpl._originalUserId = employeeModelImpl._userId;

		employeeModelImpl._setOriginalUserId = false;

		employeeModelImpl._originalGroupId = employeeModelImpl._groupId;

		employeeModelImpl._setOriginalGroupId = false;

		employeeModelImpl._originalStatus = employeeModelImpl._status;

		employeeModelImpl._setOriginalStatus = false;

		employeeModelImpl._setModifiedDate = false;

		employeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.employeeId = getEmployeeId();

		employeeCacheModel.companyId = getCompanyId();

		employeeCacheModel.employeeCode = getEmployeeCode();

		Date dateOfJoing = getDateOfJoing();

		if (dateOfJoing != null) {
			employeeCacheModel.dateOfJoing = dateOfJoing.getTime();
		}
		else {
			employeeCacheModel.dateOfJoing = Long.MIN_VALUE;
		}

		employeeCacheModel.firstName = getFirstName();

		String firstName = employeeCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			employeeCacheModel.firstName = null;
		}

		employeeCacheModel.lastName = getLastName();

		String lastName = employeeCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			employeeCacheModel.lastName = null;
		}

		employeeCacheModel.designation = getDesignation();

		String designation = employeeCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			employeeCacheModel.designation = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			employeeCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			employeeCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		employeeCacheModel.gender = getGender();

		String gender = employeeCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			employeeCacheModel.gender = null;
		}

		employeeCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = employeeCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			employeeCacheModel.maritalStatus = null;
		}

		employeeCacheModel.noOfChild = getNoOfChild();

		employeeCacheModel.note = getNote();

		String note = employeeCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			employeeCacheModel.note = null;
		}

		employeeCacheModel.address = getAddress();

		String address = employeeCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			employeeCacheModel.address = null;
		}

		employeeCacheModel.state = getState();

		String state = employeeCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			employeeCacheModel.state = null;
		}

		employeeCacheModel.postCode = getPostCode();

		String postCode = employeeCacheModel.postCode;

		if ((postCode != null) && (postCode.length() == 0)) {
			employeeCacheModel.postCode = null;
		}

		employeeCacheModel.homePhone = getHomePhone();

		employeeCacheModel.mobileNumber = getMobileNumber();

		employeeCacheModel.emaiAddress = getEmaiAddress();

		String emaiAddress = employeeCacheModel.emaiAddress;

		if ((emaiAddress != null) && (emaiAddress.length() == 0)) {
			employeeCacheModel.emaiAddress = null;
		}

		Date anniversary = getAnniversary();

		if (anniversary != null) {
			employeeCacheModel.anniversary = anniversary.getTime();
		}
		else {
			employeeCacheModel.anniversary = Long.MIN_VALUE;
		}

		employeeCacheModel.employeeStatus = getEmployeeStatus();

		employeeCacheModel.totalPay = getTotalPay();

		employeeCacheModel.basicPay = getBasicPay();

		employeeCacheModel.da = getDa();

		employeeCacheModel.hra = getHra();

		employeeCacheModel.medical = getMedical();

		employeeCacheModel.ta = getTa();

		employeeCacheModel.conveyance = getConveyance();

		employeeCacheModel.internet = getInternet();

		employeeCacheModel.mobile = getMobile();

		employeeCacheModel.fare = getFare();

		employeeCacheModel.areas = getAreas();

		employeeCacheModel.bouns = getBouns();

		employeeCacheModel.insurance = getInsurance();

		employeeCacheModel.otherAllowance = getOtherAllowance();

		employeeCacheModel.providentFund = getProvidentFund();

		employeeCacheModel.professionTax = getProfessionTax();

		employeeCacheModel.incomeTax = getIncomeTax();

		employeeCacheModel.loan = getLoan();

		employeeCacheModel.otherDeduction = getOtherDeduction();

		employeeCacheModel.bankId = getBankId();

		employeeCacheModel.branchAddress = getBranchAddress();

		String branchAddress = employeeCacheModel.branchAddress;

		if ((branchAddress != null) && (branchAddress.length() == 0)) {
			employeeCacheModel.branchAddress = null;
		}

		employeeCacheModel.accountNo = getAccountNo();

		String accountNo = employeeCacheModel.accountNo;

		if ((accountNo != null) && (accountNo.length() == 0)) {
			employeeCacheModel.accountNo = null;
		}

		employeeCacheModel.pfNo = getPfNo();

		String pfNo = employeeCacheModel.pfNo;

		if ((pfNo != null) && (pfNo.length() == 0)) {
			employeeCacheModel.pfNo = null;
		}

		employeeCacheModel.aadhaarNo = getAadhaarNo();

		String aadhaarNo = employeeCacheModel.aadhaarNo;

		if ((aadhaarNo != null) && (aadhaarNo.length() == 0)) {
			employeeCacheModel.aadhaarNo = null;
		}

		employeeCacheModel.employeetypeId = getEmployeetypeId();

		employeeCacheModel.ispfdeduct = getIspfdeduct();

		employeeCacheModel.roleId = getRoleId();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			employeeCacheModel.addedDate = addedDate.getTime();
		}
		else {
			employeeCacheModel.addedDate = Long.MIN_VALUE;
		}

		employeeCacheModel.photoId = getPhotoId();

		employeeCacheModel.userId = getUserId();

		employeeCacheModel.branchId = getBranchId();

		employeeCacheModel.panNo = getPanNo();

		String panNo = employeeCacheModel.panNo;

		if ((panNo != null) && (panNo.length() == 0)) {
			employeeCacheModel.panNo = null;
		}

		employeeCacheModel.pesonalEmaiAddress = getPesonalEmaiAddress();

		String pesonalEmaiAddress = employeeCacheModel.pesonalEmaiAddress;

		if ((pesonalEmaiAddress != null) && (pesonalEmaiAddress.length() == 0)) {
			employeeCacheModel.pesonalEmaiAddress = null;
		}

		employeeCacheModel.payPerMonth = getPayPerMonth();

		employeeCacheModel.groupId = getGroupId();

		employeeCacheModel.status = getStatus();

		employeeCacheModel.statusByUserId = getStatusByUserId();

		employeeCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = employeeCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			employeeCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			employeeCacheModel.statusDate = statusDate.getTime();
		}
		else {
			employeeCacheModel.statusDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(125);

		sb.append("{employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", employeeCode=");
		sb.append(getEmployeeCode());
		sb.append(", dateOfJoing=");
		sb.append(getDateOfJoing());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", designation=");
		sb.append(getDesignation());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", noOfChild=");
		sb.append(getNoOfChild());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", postCode=");
		sb.append(getPostCode());
		sb.append(", homePhone=");
		sb.append(getHomePhone());
		sb.append(", mobileNumber=");
		sb.append(getMobileNumber());
		sb.append(", emaiAddress=");
		sb.append(getEmaiAddress());
		sb.append(", anniversary=");
		sb.append(getAnniversary());
		sb.append(", employeeStatus=");
		sb.append(getEmployeeStatus());
		sb.append(", totalPay=");
		sb.append(getTotalPay());
		sb.append(", basicPay=");
		sb.append(getBasicPay());
		sb.append(", da=");
		sb.append(getDa());
		sb.append(", hra=");
		sb.append(getHra());
		sb.append(", medical=");
		sb.append(getMedical());
		sb.append(", ta=");
		sb.append(getTa());
		sb.append(", conveyance=");
		sb.append(getConveyance());
		sb.append(", internet=");
		sb.append(getInternet());
		sb.append(", mobile=");
		sb.append(getMobile());
		sb.append(", fare=");
		sb.append(getFare());
		sb.append(", areas=");
		sb.append(getAreas());
		sb.append(", bouns=");
		sb.append(getBouns());
		sb.append(", insurance=");
		sb.append(getInsurance());
		sb.append(", otherAllowance=");
		sb.append(getOtherAllowance());
		sb.append(", providentFund=");
		sb.append(getProvidentFund());
		sb.append(", professionTax=");
		sb.append(getProfessionTax());
		sb.append(", incomeTax=");
		sb.append(getIncomeTax());
		sb.append(", loan=");
		sb.append(getLoan());
		sb.append(", otherDeduction=");
		sb.append(getOtherDeduction());
		sb.append(", bankId=");
		sb.append(getBankId());
		sb.append(", branchAddress=");
		sb.append(getBranchAddress());
		sb.append(", accountNo=");
		sb.append(getAccountNo());
		sb.append(", pfNo=");
		sb.append(getPfNo());
		sb.append(", aadhaarNo=");
		sb.append(getAadhaarNo());
		sb.append(", employeetypeId=");
		sb.append(getEmployeetypeId());
		sb.append(", ispfdeduct=");
		sb.append(getIspfdeduct());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", photoId=");
		sb.append(getPhotoId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", branchId=");
		sb.append(getBranchId());
		sb.append(", panNo=");
		sb.append(getPanNo());
		sb.append(", pesonalEmaiAddress=");
		sb.append(getPesonalEmaiAddress());
		sb.append(", payPerMonth=");
		sb.append(getPayPerMonth());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(190);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.Employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeCode</column-name><column-value><![CDATA[");
		sb.append(getEmployeeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfJoing</column-name><column-value><![CDATA[");
		sb.append(getDateOfJoing());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designation</column-name><column-value><![CDATA[");
		sb.append(getDesignation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noOfChild</column-name><column-value><![CDATA[");
		sb.append(getNoOfChild());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postCode</column-name><column-value><![CDATA[");
		sb.append(getPostCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homePhone</column-name><column-value><![CDATA[");
		sb.append(getHomePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobileNumber</column-name><column-value><![CDATA[");
		sb.append(getMobileNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emaiAddress</column-name><column-value><![CDATA[");
		sb.append(getEmaiAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anniversary</column-name><column-value><![CDATA[");
		sb.append(getAnniversary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeStatus</column-name><column-value><![CDATA[");
		sb.append(getEmployeeStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPay</column-name><column-value><![CDATA[");
		sb.append(getTotalPay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicPay</column-name><column-value><![CDATA[");
		sb.append(getBasicPay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>da</column-name><column-value><![CDATA[");
		sb.append(getDa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hra</column-name><column-value><![CDATA[");
		sb.append(getHra());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medical</column-name><column-value><![CDATA[");
		sb.append(getMedical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ta</column-name><column-value><![CDATA[");
		sb.append(getTa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conveyance</column-name><column-value><![CDATA[");
		sb.append(getConveyance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internet</column-name><column-value><![CDATA[");
		sb.append(getInternet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(getMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fare</column-name><column-value><![CDATA[");
		sb.append(getFare());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>areas</column-name><column-value><![CDATA[");
		sb.append(getAreas());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bouns</column-name><column-value><![CDATA[");
		sb.append(getBouns());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insurance</column-name><column-value><![CDATA[");
		sb.append(getInsurance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherAllowance</column-name><column-value><![CDATA[");
		sb.append(getOtherAllowance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>providentFund</column-name><column-value><![CDATA[");
		sb.append(getProvidentFund());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>professionTax</column-name><column-value><![CDATA[");
		sb.append(getProfessionTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>incomeTax</column-name><column-value><![CDATA[");
		sb.append(getIncomeTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loan</column-name><column-value><![CDATA[");
		sb.append(getLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherDeduction</column-name><column-value><![CDATA[");
		sb.append(getOtherDeduction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankId</column-name><column-value><![CDATA[");
		sb.append(getBankId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branchAddress</column-name><column-value><![CDATA[");
		sb.append(getBranchAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountNo</column-name><column-value><![CDATA[");
		sb.append(getAccountNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pfNo</column-name><column-value><![CDATA[");
		sb.append(getPfNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aadhaarNo</column-name><column-value><![CDATA[");
		sb.append(getAadhaarNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeetypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeetypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ispfdeduct</column-name><column-value><![CDATA[");
		sb.append(getIspfdeduct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photoId</column-name><column-value><![CDATA[");
		sb.append(getPhotoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branchId</column-name><column-value><![CDATA[");
		sb.append(getBranchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>panNo</column-name><column-value><![CDATA[");
		sb.append(getPanNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pesonalEmaiAddress</column-name><column-value><![CDATA[");
		sb.append(getPesonalEmaiAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payPerMonth</column-name><column-value><![CDATA[");
		sb.append(getPayPerMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Employee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Employee.class, ModelWrapper.class
		};
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _companyId;
	private long _employeeCode;
	private long _originalEmployeeCode;
	private boolean _setOriginalEmployeeCode;
	private Date _dateOfJoing;
	private String _firstName;
	private String _lastName;
	private String _designation;
	private Date _dateOfBirth;
	private String _gender;
	private String _maritalStatus;
	private long _noOfChild;
	private String _note;
	private String _address;
	private String _state;
	private String _postCode;
	private int _homePhone;
	private int _mobileNumber;
	private String _emaiAddress;
	private Date _anniversary;
	private EmployeeEmployeePhotoBlobModel _employeePhotoBlobModel;
	private int _employeeStatus;
	private int _originalEmployeeStatus;
	private boolean _setOriginalEmployeeStatus;
	private double _totalPay;
	private double _basicPay;
	private double _da;
	private double _hra;
	private double _medical;
	private double _ta;
	private double _conveyance;
	private double _internet;
	private double _mobile;
	private double _fare;
	private double _areas;
	private double _bouns;
	private double _insurance;
	private double _otherAllowance;
	private double _providentFund;
	private double _professionTax;
	private double _incomeTax;
	private double _loan;
	private double _otherDeduction;
	private long _bankId;
	private String _branchAddress;
	private String _accountNo;
	private String _pfNo;
	private String _aadhaarNo;
	private int _employeetypeId;
	private int _ispfdeduct;
	private int _roleId;
	private Date _addedDate;
	private long _photoId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _branchId;
	private String _panNo;
	private String _pesonalEmaiAddress;
	private double _payPerMonth;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Employee _escapedModel;
}