/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.YearSetting;
import com.liferay.famocom.erpcloud.model.YearSettingModel;
import com.liferay.famocom.erpcloud.model.YearSettingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the YearSetting service. Represents a row in the &quot;YearSetting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link YearSettingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link YearSettingImpl}.
 * </p>
 *
 * @author Samaresh
 * @see YearSettingImpl
 * @see YearSetting
 * @see YearSettingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class YearSettingModelImpl extends BaseModelImpl<YearSetting>
	implements YearSettingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a year setting model instance should use the {@link YearSetting} interface instead.
	 */
	public static final String TABLE_NAME = "YearSetting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "yearSettingId", Types.BIGINT },
			{ "financialYearStartDate", Types.TIMESTAMP },
			{ "financialYearEndDate", Types.TIMESTAMP },
			{ "calendarStartDate", Types.TIMESTAMP },
			{ "calendarEndDate", Types.TIMESTAMP },
			{ "isActive", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("yearSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("financialYearStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("financialYearEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("calendarStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("calendarEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isActive", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table YearSetting (yearSettingId LONG not null primary key,financialYearStartDate DATE null,financialYearEndDate DATE null,calendarStartDate DATE null,calendarEndDate DATE null,isActive INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table YearSetting";
	public static final String ORDER_BY_JPQL = " ORDER BY yearSetting.yearSettingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY YearSetting.yearSettingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.YearSetting"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.YearSetting"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.YearSetting"),
			true);
	public static final long ISACTIVE_COLUMN_BITMASK = 1L;
	public static final long YEARSETTINGID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static YearSetting toModel(YearSettingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		YearSetting model = new YearSettingImpl();

		model.setYearSettingId(soapModel.getYearSettingId());
		model.setFinancialYearStartDate(soapModel.getFinancialYearStartDate());
		model.setFinancialYearEndDate(soapModel.getFinancialYearEndDate());
		model.setCalendarStartDate(soapModel.getCalendarStartDate());
		model.setCalendarEndDate(soapModel.getCalendarEndDate());
		model.setIsActive(soapModel.getIsActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<YearSetting> toModels(YearSettingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<YearSetting> models = new ArrayList<YearSetting>(soapModels.length);

		for (YearSettingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.YearSetting"));

	public YearSettingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _yearSettingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setYearSettingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _yearSettingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return YearSetting.class;
	}

	@Override
	public String getModelClassName() {
		return YearSetting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("yearSettingId", getYearSettingId());
		attributes.put("financialYearStartDate", getFinancialYearStartDate());
		attributes.put("financialYearEndDate", getFinancialYearEndDate());
		attributes.put("calendarStartDate", getCalendarStartDate());
		attributes.put("calendarEndDate", getCalendarEndDate());
		attributes.put("isActive", getIsActive());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long yearSettingId = (Long)attributes.get("yearSettingId");

		if (yearSettingId != null) {
			setYearSettingId(yearSettingId);
		}

		Date financialYearStartDate = (Date)attributes.get(
				"financialYearStartDate");

		if (financialYearStartDate != null) {
			setFinancialYearStartDate(financialYearStartDate);
		}

		Date financialYearEndDate = (Date)attributes.get("financialYearEndDate");

		if (financialYearEndDate != null) {
			setFinancialYearEndDate(financialYearEndDate);
		}

		Date calendarStartDate = (Date)attributes.get("calendarStartDate");

		if (calendarStartDate != null) {
			setCalendarStartDate(calendarStartDate);
		}

		Date calendarEndDate = (Date)attributes.get("calendarEndDate");

		if (calendarEndDate != null) {
			setCalendarEndDate(calendarEndDate);
		}

		Integer isActive = (Integer)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}
	}

	@JSON
	@Override
	public long getYearSettingId() {
		return _yearSettingId;
	}

	@Override
	public void setYearSettingId(long yearSettingId) {
		_yearSettingId = yearSettingId;
	}

	@JSON
	@Override
	public Date getFinancialYearStartDate() {
		return _financialYearStartDate;
	}

	@Override
	public void setFinancialYearStartDate(Date financialYearStartDate) {
		_financialYearStartDate = financialYearStartDate;
	}

	@JSON
	@Override
	public Date getFinancialYearEndDate() {
		return _financialYearEndDate;
	}

	@Override
	public void setFinancialYearEndDate(Date financialYearEndDate) {
		_financialYearEndDate = financialYearEndDate;
	}

	@JSON
	@Override
	public Date getCalendarStartDate() {
		return _calendarStartDate;
	}

	@Override
	public void setCalendarStartDate(Date calendarStartDate) {
		_calendarStartDate = calendarStartDate;
	}

	@JSON
	@Override
	public Date getCalendarEndDate() {
		return _calendarEndDate;
	}

	@Override
	public void setCalendarEndDate(Date calendarEndDate) {
		_calendarEndDate = calendarEndDate;
	}

	@JSON
	@Override
	public int getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(int isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public int getOriginalIsActive() {
		return _originalIsActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			YearSetting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public YearSetting toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (YearSetting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		YearSettingImpl yearSettingImpl = new YearSettingImpl();

		yearSettingImpl.setYearSettingId(getYearSettingId());
		yearSettingImpl.setFinancialYearStartDate(getFinancialYearStartDate());
		yearSettingImpl.setFinancialYearEndDate(getFinancialYearEndDate());
		yearSettingImpl.setCalendarStartDate(getCalendarStartDate());
		yearSettingImpl.setCalendarEndDate(getCalendarEndDate());
		yearSettingImpl.setIsActive(getIsActive());

		yearSettingImpl.resetOriginalValues();

		return yearSettingImpl;
	}

	@Override
	public int compareTo(YearSetting yearSetting) {
		long primaryKey = yearSetting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof YearSetting)) {
			return false;
		}

		YearSetting yearSetting = (YearSetting)obj;

		long primaryKey = yearSetting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		YearSettingModelImpl yearSettingModelImpl = this;

		yearSettingModelImpl._originalIsActive = yearSettingModelImpl._isActive;

		yearSettingModelImpl._setOriginalIsActive = false;

		yearSettingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<YearSetting> toCacheModel() {
		YearSettingCacheModel yearSettingCacheModel = new YearSettingCacheModel();

		yearSettingCacheModel.yearSettingId = getYearSettingId();

		Date financialYearStartDate = getFinancialYearStartDate();

		if (financialYearStartDate != null) {
			yearSettingCacheModel.financialYearStartDate = financialYearStartDate.getTime();
		}
		else {
			yearSettingCacheModel.financialYearStartDate = Long.MIN_VALUE;
		}

		Date financialYearEndDate = getFinancialYearEndDate();

		if (financialYearEndDate != null) {
			yearSettingCacheModel.financialYearEndDate = financialYearEndDate.getTime();
		}
		else {
			yearSettingCacheModel.financialYearEndDate = Long.MIN_VALUE;
		}

		Date calendarStartDate = getCalendarStartDate();

		if (calendarStartDate != null) {
			yearSettingCacheModel.calendarStartDate = calendarStartDate.getTime();
		}
		else {
			yearSettingCacheModel.calendarStartDate = Long.MIN_VALUE;
		}

		Date calendarEndDate = getCalendarEndDate();

		if (calendarEndDate != null) {
			yearSettingCacheModel.calendarEndDate = calendarEndDate.getTime();
		}
		else {
			yearSettingCacheModel.calendarEndDate = Long.MIN_VALUE;
		}

		yearSettingCacheModel.isActive = getIsActive();

		return yearSettingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{yearSettingId=");
		sb.append(getYearSettingId());
		sb.append(", financialYearStartDate=");
		sb.append(getFinancialYearStartDate());
		sb.append(", financialYearEndDate=");
		sb.append(getFinancialYearEndDate());
		sb.append(", calendarStartDate=");
		sb.append(getCalendarStartDate());
		sb.append(", calendarEndDate=");
		sb.append(getCalendarEndDate());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.YearSetting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>yearSettingId</column-name><column-value><![CDATA[");
		sb.append(getYearSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialYearStartDate</column-name><column-value><![CDATA[");
		sb.append(getFinancialYearStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialYearEndDate</column-name><column-value><![CDATA[");
		sb.append(getFinancialYearEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarStartDate</column-name><column-value><![CDATA[");
		sb.append(getCalendarStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarEndDate</column-name><column-value><![CDATA[");
		sb.append(getCalendarEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = YearSetting.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			YearSetting.class, ModelWrapper.class
		};
	private long _yearSettingId;
	private Date _financialYearStartDate;
	private Date _financialYearEndDate;
	private Date _calendarStartDate;
	private Date _calendarEndDate;
	private int _isActive;
	private int _originalIsActive;
	private boolean _setOriginalIsActive;
	private long _columnBitmask;
	private YearSetting _escapedModel;
}