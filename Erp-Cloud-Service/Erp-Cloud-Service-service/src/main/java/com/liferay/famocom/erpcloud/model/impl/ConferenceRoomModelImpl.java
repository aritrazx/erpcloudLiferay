/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ConferenceRoom;
import com.liferay.famocom.erpcloud.model.ConferenceRoomModel;
import com.liferay.famocom.erpcloud.model.ConferenceRoomSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConferenceRoom service. Represents a row in the &quot;ConferenceRoom&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ConferenceRoomModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConferenceRoomImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ConferenceRoomImpl
 * @see ConferenceRoom
 * @see ConferenceRoomModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ConferenceRoomModelImpl extends BaseModelImpl<ConferenceRoom>
	implements ConferenceRoomModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a conference room model instance should use the {@link ConferenceRoom} interface instead.
	 */
	public static final String TABLE_NAME = "ConferenceRoom";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roomId", Types.BIGINT },
			{ "roomNo", Types.BIGINT },
			{ "floorNo", Types.BIGINT },
			{ "capacity", Types.BIGINT },
			{ "openTime", Types.VARCHAR },
			{ "closeTime", Types.VARCHAR },
			{ "building", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("roomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roomNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("floorNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("capacity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("openTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("closeTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("building", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ConferenceRoom (roomId LONG not null primary key,roomNo LONG,floorNo LONG,capacity LONG,openTime VARCHAR(75) null,closeTime VARCHAR(75) null,building VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ConferenceRoom";
	public static final String ORDER_BY_JPQL = " ORDER BY conferenceRoom.roomId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ConferenceRoom.roomId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ConferenceRoom"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ConferenceRoom"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConferenceRoom toModel(ConferenceRoomSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConferenceRoom model = new ConferenceRoomImpl();

		model.setRoomId(soapModel.getRoomId());
		model.setRoomNo(soapModel.getRoomNo());
		model.setFloorNo(soapModel.getFloorNo());
		model.setCapacity(soapModel.getCapacity());
		model.setOpenTime(soapModel.getOpenTime());
		model.setCloseTime(soapModel.getCloseTime());
		model.setBuilding(soapModel.getBuilding());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConferenceRoom> toModels(ConferenceRoomSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConferenceRoom> models = new ArrayList<ConferenceRoom>(soapModels.length);

		for (ConferenceRoomSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ConferenceRoom"));

	public ConferenceRoomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roomId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoomId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roomId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConferenceRoom.class;
	}

	@Override
	public String getModelClassName() {
		return ConferenceRoom.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roomId", getRoomId());
		attributes.put("roomNo", getRoomNo());
		attributes.put("floorNo", getFloorNo());
		attributes.put("capacity", getCapacity());
		attributes.put("openTime", getOpenTime());
		attributes.put("closeTime", getCloseTime());
		attributes.put("building", getBuilding());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roomId = (Long)attributes.get("roomId");

		if (roomId != null) {
			setRoomId(roomId);
		}

		Long roomNo = (Long)attributes.get("roomNo");

		if (roomNo != null) {
			setRoomNo(roomNo);
		}

		Long floorNo = (Long)attributes.get("floorNo");

		if (floorNo != null) {
			setFloorNo(floorNo);
		}

		Long capacity = (Long)attributes.get("capacity");

		if (capacity != null) {
			setCapacity(capacity);
		}

		String openTime = (String)attributes.get("openTime");

		if (openTime != null) {
			setOpenTime(openTime);
		}

		String closeTime = (String)attributes.get("closeTime");

		if (closeTime != null) {
			setCloseTime(closeTime);
		}

		String building = (String)attributes.get("building");

		if (building != null) {
			setBuilding(building);
		}
	}

	@JSON
	@Override
	public long getRoomId() {
		return _roomId;
	}

	@Override
	public void setRoomId(long roomId) {
		_roomId = roomId;
	}

	@JSON
	@Override
	public long getRoomNo() {
		return _roomNo;
	}

	@Override
	public void setRoomNo(long roomNo) {
		_roomNo = roomNo;
	}

	@JSON
	@Override
	public long getFloorNo() {
		return _floorNo;
	}

	@Override
	public void setFloorNo(long floorNo) {
		_floorNo = floorNo;
	}

	@JSON
	@Override
	public long getCapacity() {
		return _capacity;
	}

	@Override
	public void setCapacity(long capacity) {
		_capacity = capacity;
	}

	@JSON
	@Override
	public String getOpenTime() {
		if (_openTime == null) {
			return "";
		}
		else {
			return _openTime;
		}
	}

	@Override
	public void setOpenTime(String openTime) {
		_openTime = openTime;
	}

	@JSON
	@Override
	public String getCloseTime() {
		if (_closeTime == null) {
			return "";
		}
		else {
			return _closeTime;
		}
	}

	@Override
	public void setCloseTime(String closeTime) {
		_closeTime = closeTime;
	}

	@JSON
	@Override
	public String getBuilding() {
		if (_building == null) {
			return "";
		}
		else {
			return _building;
		}
	}

	@Override
	public void setBuilding(String building) {
		_building = building;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConferenceRoom.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConferenceRoom toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConferenceRoom)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConferenceRoomImpl conferenceRoomImpl = new ConferenceRoomImpl();

		conferenceRoomImpl.setRoomId(getRoomId());
		conferenceRoomImpl.setRoomNo(getRoomNo());
		conferenceRoomImpl.setFloorNo(getFloorNo());
		conferenceRoomImpl.setCapacity(getCapacity());
		conferenceRoomImpl.setOpenTime(getOpenTime());
		conferenceRoomImpl.setCloseTime(getCloseTime());
		conferenceRoomImpl.setBuilding(getBuilding());

		conferenceRoomImpl.resetOriginalValues();

		return conferenceRoomImpl;
	}

	@Override
	public int compareTo(ConferenceRoom conferenceRoom) {
		long primaryKey = conferenceRoom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConferenceRoom)) {
			return false;
		}

		ConferenceRoom conferenceRoom = (ConferenceRoom)obj;

		long primaryKey = conferenceRoom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ConferenceRoom> toCacheModel() {
		ConferenceRoomCacheModel conferenceRoomCacheModel = new ConferenceRoomCacheModel();

		conferenceRoomCacheModel.roomId = getRoomId();

		conferenceRoomCacheModel.roomNo = getRoomNo();

		conferenceRoomCacheModel.floorNo = getFloorNo();

		conferenceRoomCacheModel.capacity = getCapacity();

		conferenceRoomCacheModel.openTime = getOpenTime();

		String openTime = conferenceRoomCacheModel.openTime;

		if ((openTime != null) && (openTime.length() == 0)) {
			conferenceRoomCacheModel.openTime = null;
		}

		conferenceRoomCacheModel.closeTime = getCloseTime();

		String closeTime = conferenceRoomCacheModel.closeTime;

		if ((closeTime != null) && (closeTime.length() == 0)) {
			conferenceRoomCacheModel.closeTime = null;
		}

		conferenceRoomCacheModel.building = getBuilding();

		String building = conferenceRoomCacheModel.building;

		if ((building != null) && (building.length() == 0)) {
			conferenceRoomCacheModel.building = null;
		}

		return conferenceRoomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{roomId=");
		sb.append(getRoomId());
		sb.append(", roomNo=");
		sb.append(getRoomNo());
		sb.append(", floorNo=");
		sb.append(getFloorNo());
		sb.append(", capacity=");
		sb.append(getCapacity());
		sb.append(", openTime=");
		sb.append(getOpenTime());
		sb.append(", closeTime=");
		sb.append(getCloseTime());
		sb.append(", building=");
		sb.append(getBuilding());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ConferenceRoom");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomNo</column-name><column-value><![CDATA[");
		sb.append(getRoomNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>floorNo</column-name><column-value><![CDATA[");
		sb.append(getFloorNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>capacity</column-name><column-value><![CDATA[");
		sb.append(getCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openTime</column-name><column-value><![CDATA[");
		sb.append(getOpenTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closeTime</column-name><column-value><![CDATA[");
		sb.append(getCloseTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>building</column-name><column-value><![CDATA[");
		sb.append(getBuilding());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ConferenceRoom.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ConferenceRoom.class, ModelWrapper.class
		};
	private long _roomId;
	private long _roomNo;
	private long _floorNo;
	private long _capacity;
	private String _openTime;
	private String _closeTime;
	private String _building;
	private ConferenceRoom _escapedModel;
}