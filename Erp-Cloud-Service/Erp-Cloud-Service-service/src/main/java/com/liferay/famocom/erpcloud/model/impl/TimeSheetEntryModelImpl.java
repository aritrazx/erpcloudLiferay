/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.TimeSheetEntry;
import com.liferay.famocom.erpcloud.model.TimeSheetEntryModel;
import com.liferay.famocom.erpcloud.model.TimeSheetEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimeSheetEntry service. Represents a row in the &quot;timeSheetEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TimeSheetEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimeSheetEntryImpl}.
 * </p>
 *
 * @author Samaresh
 * @see TimeSheetEntryImpl
 * @see TimeSheetEntry
 * @see TimeSheetEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TimeSheetEntryModelImpl extends BaseModelImpl<TimeSheetEntry>
	implements TimeSheetEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a time sheet entry model instance should use the {@link TimeSheetEntry} interface instead.
	 */
	public static final String TABLE_NAME = "timeSheetEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timesheetId", Types.BIGINT },
			{ "entryDate", Types.TIMESTAMP },
			{ "employeeId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "projectTaskId", Types.BIGINT },
			{ "hours", Types.DOUBLE },
			{ "workDescription", Types.VARCHAR },
			{ "timesheetParentId", Types.BIGINT },
			{ "addedDate", Types.TIMESTAMP },
			{ "groupId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("timesheetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hours", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("workDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timesheetParentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table timeSheetEntry (timesheetId LONG not null primary key,entryDate DATE null,employeeId LONG,projectId LONG,projectTaskId LONG,hours DOUBLE,workDescription VARCHAR(75) null,timesheetParentId LONG,addedDate DATE null,groupId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table timeSheetEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY timeSheetEntry.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY timeSheetEntry.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.TimeSheetEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.TimeSheetEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.TimeSheetEntry"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimeSheetEntry toModel(TimeSheetEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimeSheetEntry model = new TimeSheetEntryImpl();

		model.setTimesheetId(soapModel.getTimesheetId());
		model.setEntryDate(soapModel.getEntryDate());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setProjectId(soapModel.getProjectId());
		model.setProjectTaskId(soapModel.getProjectTaskId());
		model.setHours(soapModel.getHours());
		model.setWorkDescription(soapModel.getWorkDescription());
		model.setTimesheetParentId(soapModel.getTimesheetParentId());
		model.setAddedDate(soapModel.getAddedDate());
		model.setGroupId(soapModel.getGroupId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimeSheetEntry> toModels(TimeSheetEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimeSheetEntry> models = new ArrayList<TimeSheetEntry>(soapModels.length);

		for (TimeSheetEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.TimeSheetEntry"));

	public TimeSheetEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTimesheetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timesheetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimeSheetEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TimeSheetEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timesheetId", getTimesheetId());
		attributes.put("entryDate", getEntryDate());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("projectId", getProjectId());
		attributes.put("projectTaskId", getProjectTaskId());
		attributes.put("hours", getHours());
		attributes.put("workDescription", getWorkDescription());
		attributes.put("timesheetParentId", getTimesheetParentId());
		attributes.put("addedDate", getAddedDate());
		attributes.put("groupId", getGroupId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long timesheetId = (Long)attributes.get("timesheetId");

		if (timesheetId != null) {
			setTimesheetId(timesheetId);
		}

		Date entryDate = (Date)attributes.get("entryDate");

		if (entryDate != null) {
			setEntryDate(entryDate);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long projectTaskId = (Long)attributes.get("projectTaskId");

		if (projectTaskId != null) {
			setProjectTaskId(projectTaskId);
		}

		Double hours = (Double)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		String workDescription = (String)attributes.get("workDescription");

		if (workDescription != null) {
			setWorkDescription(workDescription);
		}

		Long timesheetParentId = (Long)attributes.get("timesheetParentId");

		if (timesheetParentId != null) {
			setTimesheetParentId(timesheetParentId);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getTimesheetId() {
		return _timesheetId;
	}

	@Override
	public void setTimesheetId(long timesheetId) {
		_timesheetId = timesheetId;
	}

	@JSON
	@Override
	public Date getEntryDate() {
		return _entryDate;
	}

	@Override
	public void setEntryDate(Date entryDate) {
		_entryDate = entryDate;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getProjectTaskId() {
		return _projectTaskId;
	}

	@Override
	public void setProjectTaskId(long projectTaskId) {
		_projectTaskId = projectTaskId;
	}

	@JSON
	@Override
	public double getHours() {
		return _hours;
	}

	@Override
	public void setHours(double hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public String getWorkDescription() {
		if (_workDescription == null) {
			return "";
		}
		else {
			return _workDescription;
		}
	}

	@Override
	public void setWorkDescription(String workDescription) {
		_workDescription = workDescription;
	}

	@JSON
	@Override
	public long getTimesheetParentId() {
		return _timesheetParentId;
	}

	@Override
	public void setTimesheetParentId(long timesheetParentId) {
		_timesheetParentId = timesheetParentId;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TimeSheetEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TimeSheetEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimeSheetEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimeSheetEntryImpl timeSheetEntryImpl = new TimeSheetEntryImpl();

		timeSheetEntryImpl.setTimesheetId(getTimesheetId());
		timeSheetEntryImpl.setEntryDate(getEntryDate());
		timeSheetEntryImpl.setEmployeeId(getEmployeeId());
		timeSheetEntryImpl.setProjectId(getProjectId());
		timeSheetEntryImpl.setProjectTaskId(getProjectTaskId());
		timeSheetEntryImpl.setHours(getHours());
		timeSheetEntryImpl.setWorkDescription(getWorkDescription());
		timeSheetEntryImpl.setTimesheetParentId(getTimesheetParentId());
		timeSheetEntryImpl.setAddedDate(getAddedDate());
		timeSheetEntryImpl.setGroupId(getGroupId());
		timeSheetEntryImpl.setStatus(getStatus());
		timeSheetEntryImpl.setStatusByUserId(getStatusByUserId());
		timeSheetEntryImpl.setStatusByUserName(getStatusByUserName());
		timeSheetEntryImpl.setStatusDate(getStatusDate());
		timeSheetEntryImpl.setCreateDate(getCreateDate());
		timeSheetEntryImpl.setModifiedDate(getModifiedDate());

		timeSheetEntryImpl.resetOriginalValues();

		return timeSheetEntryImpl;
	}

	@Override
	public int compareTo(TimeSheetEntry timeSheetEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				timeSheetEntry.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimeSheetEntry)) {
			return false;
		}

		TimeSheetEntry timeSheetEntry = (TimeSheetEntry)obj;

		long primaryKey = timeSheetEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TimeSheetEntryModelImpl timeSheetEntryModelImpl = this;

		timeSheetEntryModelImpl._originalGroupId = timeSheetEntryModelImpl._groupId;

		timeSheetEntryModelImpl._setOriginalGroupId = false;

		timeSheetEntryModelImpl._originalStatus = timeSheetEntryModelImpl._status;

		timeSheetEntryModelImpl._setOriginalStatus = false;

		timeSheetEntryModelImpl._setModifiedDate = false;

		timeSheetEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TimeSheetEntry> toCacheModel() {
		TimeSheetEntryCacheModel timeSheetEntryCacheModel = new TimeSheetEntryCacheModel();

		timeSheetEntryCacheModel.timesheetId = getTimesheetId();

		Date entryDate = getEntryDate();

		if (entryDate != null) {
			timeSheetEntryCacheModel.entryDate = entryDate.getTime();
		}
		else {
			timeSheetEntryCacheModel.entryDate = Long.MIN_VALUE;
		}

		timeSheetEntryCacheModel.employeeId = getEmployeeId();

		timeSheetEntryCacheModel.projectId = getProjectId();

		timeSheetEntryCacheModel.projectTaskId = getProjectTaskId();

		timeSheetEntryCacheModel.hours = getHours();

		timeSheetEntryCacheModel.workDescription = getWorkDescription();

		String workDescription = timeSheetEntryCacheModel.workDescription;

		if ((workDescription != null) && (workDescription.length() == 0)) {
			timeSheetEntryCacheModel.workDescription = null;
		}

		timeSheetEntryCacheModel.timesheetParentId = getTimesheetParentId();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			timeSheetEntryCacheModel.addedDate = addedDate.getTime();
		}
		else {
			timeSheetEntryCacheModel.addedDate = Long.MIN_VALUE;
		}

		timeSheetEntryCacheModel.groupId = getGroupId();

		timeSheetEntryCacheModel.status = getStatus();

		timeSheetEntryCacheModel.statusByUserId = getStatusByUserId();

		timeSheetEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = timeSheetEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			timeSheetEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			timeSheetEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			timeSheetEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			timeSheetEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			timeSheetEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			timeSheetEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			timeSheetEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return timeSheetEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{timesheetId=");
		sb.append(getTimesheetId());
		sb.append(", entryDate=");
		sb.append(getEntryDate());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", projectTaskId=");
		sb.append(getProjectTaskId());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", workDescription=");
		sb.append(getWorkDescription());
		sb.append(", timesheetParentId=");
		sb.append(getTimesheetParentId());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.TimeSheetEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timesheetId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryDate</column-name><column-value><![CDATA[");
		sb.append(getEntryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectTaskId</column-name><column-value><![CDATA[");
		sb.append(getProjectTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workDescription</column-name><column-value><![CDATA[");
		sb.append(getWorkDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timesheetParentId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TimeSheetEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TimeSheetEntry.class, ModelWrapper.class
		};
	private long _timesheetId;
	private Date _entryDate;
	private long _employeeId;
	private long _projectId;
	private long _projectTaskId;
	private double _hours;
	private String _workDescription;
	private long _timesheetParentId;
	private Date _addedDate;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private TimeSheetEntry _escapedModel;
}