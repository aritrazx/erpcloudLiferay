/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.Billing;
import com.liferay.famocom.erpcloud.model.BillingModel;
import com.liferay.famocom.erpcloud.model.BillingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Billing service. Represents a row in the &quot;billing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BillingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BillingImpl}.
 * </p>
 *
 * @author Samaresh
 * @see BillingImpl
 * @see Billing
 * @see BillingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BillingModelImpl extends BaseModelImpl<Billing>
	implements BillingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a billing model instance should use the {@link Billing} interface instead.
	 */
	public static final String TABLE_NAME = "billing";
	public static final Object[][] TABLE_COLUMNS = {
			{ "billingId", Types.BIGINT },
			{ "milestoneId", Types.BIGINT },
			{ "billingNumber", Types.VARCHAR },
			{ "billingDate", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("billingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("milestoneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("billingNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table billing (billingId LONG not null primary key,milestoneId LONG,billingNumber VARCHAR(75) null,billingDate VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table billing";
	public static final String ORDER_BY_JPQL = " ORDER BY billing.billingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY billing.billingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.Billing"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.Billing"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Billing toModel(BillingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Billing model = new BillingImpl();

		model.setBillingId(soapModel.getBillingId());
		model.setMilestoneId(soapModel.getMilestoneId());
		model.setBillingNumber(soapModel.getBillingNumber());
		model.setBillingDate(soapModel.getBillingDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Billing> toModels(BillingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Billing> models = new ArrayList<Billing>(soapModels.length);

		for (BillingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.Billing"));

	public BillingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _billingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBillingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _billingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Billing.class;
	}

	@Override
	public String getModelClassName() {
		return Billing.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("billingId", getBillingId());
		attributes.put("milestoneId", getMilestoneId());
		attributes.put("billingNumber", getBillingNumber());
		attributes.put("billingDate", getBillingDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long billingId = (Long)attributes.get("billingId");

		if (billingId != null) {
			setBillingId(billingId);
		}

		Long milestoneId = (Long)attributes.get("milestoneId");

		if (milestoneId != null) {
			setMilestoneId(milestoneId);
		}

		String billingNumber = (String)attributes.get("billingNumber");

		if (billingNumber != null) {
			setBillingNumber(billingNumber);
		}

		String billingDate = (String)attributes.get("billingDate");

		if (billingDate != null) {
			setBillingDate(billingDate);
		}
	}

	@JSON
	@Override
	public long getBillingId() {
		return _billingId;
	}

	@Override
	public void setBillingId(long billingId) {
		_billingId = billingId;
	}

	@JSON
	@Override
	public long getMilestoneId() {
		return _milestoneId;
	}

	@Override
	public void setMilestoneId(long milestoneId) {
		_milestoneId = milestoneId;
	}

	@JSON
	@Override
	public String getBillingNumber() {
		if (_billingNumber == null) {
			return "";
		}
		else {
			return _billingNumber;
		}
	}

	@Override
	public void setBillingNumber(String billingNumber) {
		_billingNumber = billingNumber;
	}

	@JSON
	@Override
	public String getBillingDate() {
		if (_billingDate == null) {
			return "";
		}
		else {
			return _billingDate;
		}
	}

	@Override
	public void setBillingDate(String billingDate) {
		_billingDate = billingDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Billing.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Billing toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Billing)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BillingImpl billingImpl = new BillingImpl();

		billingImpl.setBillingId(getBillingId());
		billingImpl.setMilestoneId(getMilestoneId());
		billingImpl.setBillingNumber(getBillingNumber());
		billingImpl.setBillingDate(getBillingDate());

		billingImpl.resetOriginalValues();

		return billingImpl;
	}

	@Override
	public int compareTo(Billing billing) {
		long primaryKey = billing.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Billing)) {
			return false;
		}

		Billing billing = (Billing)obj;

		long primaryKey = billing.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Billing> toCacheModel() {
		BillingCacheModel billingCacheModel = new BillingCacheModel();

		billingCacheModel.billingId = getBillingId();

		billingCacheModel.milestoneId = getMilestoneId();

		billingCacheModel.billingNumber = getBillingNumber();

		String billingNumber = billingCacheModel.billingNumber;

		if ((billingNumber != null) && (billingNumber.length() == 0)) {
			billingCacheModel.billingNumber = null;
		}

		billingCacheModel.billingDate = getBillingDate();

		String billingDate = billingCacheModel.billingDate;

		if ((billingDate != null) && (billingDate.length() == 0)) {
			billingCacheModel.billingDate = null;
		}

		return billingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{billingId=");
		sb.append(getBillingId());
		sb.append(", milestoneId=");
		sb.append(getMilestoneId());
		sb.append(", billingNumber=");
		sb.append(getBillingNumber());
		sb.append(", billingDate=");
		sb.append(getBillingDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.Billing");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>billingId</column-name><column-value><![CDATA[");
		sb.append(getBillingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>milestoneId</column-name><column-value><![CDATA[");
		sb.append(getMilestoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingNumber</column-name><column-value><![CDATA[");
		sb.append(getBillingNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingDate</column-name><column-value><![CDATA[");
		sb.append(getBillingDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Billing.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Billing.class, ModelWrapper.class
		};
	private long _billingId;
	private long _milestoneId;
	private String _billingNumber;
	private String _billingDate;
	private Billing _escapedModel;
}