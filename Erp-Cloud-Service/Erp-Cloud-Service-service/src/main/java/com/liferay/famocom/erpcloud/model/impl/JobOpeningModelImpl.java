/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.JobOpening;
import com.liferay.famocom.erpcloud.model.JobOpeningModel;
import com.liferay.famocom.erpcloud.model.JobOpeningSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the JobOpening service. Represents a row in the &quot;JobOpening&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JobOpeningModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobOpeningImpl}.
 * </p>
 *
 * @author Samaresh
 * @see JobOpeningImpl
 * @see JobOpening
 * @see JobOpeningModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JobOpeningModelImpl extends BaseModelImpl<JobOpening>
	implements JobOpeningModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job opening model instance should use the {@link JobOpening} interface instead.
	 */
	public static final String TABLE_NAME = "JobOpening";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobOpeningId", Types.BIGINT },
			{ "jobPostId", Types.BIGINT },
			{ "openingFor", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jobOpeningId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("openingFor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table JobOpening (jobOpeningId LONG not null primary key,jobPostId LONG,openingFor VARCHAR(75) null,description VARCHAR(75) null,createdDate DATE null,modifiedDate DATE null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table JobOpening";
	public static final String ORDER_BY_JPQL = " ORDER BY jobOpening.jobOpeningId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY JobOpening.jobOpeningId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.JobOpening"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.JobOpening"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static JobOpening toModel(JobOpeningSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		JobOpening model = new JobOpeningImpl();

		model.setJobOpeningId(soapModel.getJobOpeningId());
		model.setJobPostId(soapModel.getJobPostId());
		model.setOpeningFor(soapModel.getOpeningFor());
		model.setDescription(soapModel.getDescription());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<JobOpening> toModels(JobOpeningSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<JobOpening> models = new ArrayList<JobOpening>(soapModels.length);

		for (JobOpeningSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.JobOpening"));

	public JobOpeningModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobOpeningId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobOpeningId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobOpeningId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobOpening.class;
	}

	@Override
	public String getModelClassName() {
		return JobOpening.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobOpeningId", getJobOpeningId());
		attributes.put("jobPostId", getJobPostId());
		attributes.put("openingFor", getOpeningFor());
		attributes.put("description", getDescription());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobOpeningId = (Long)attributes.get("jobOpeningId");

		if (jobOpeningId != null) {
			setJobOpeningId(jobOpeningId);
		}

		Long jobPostId = (Long)attributes.get("jobPostId");

		if (jobPostId != null) {
			setJobPostId(jobPostId);
		}

		String openingFor = (String)attributes.get("openingFor");

		if (openingFor != null) {
			setOpeningFor(openingFor);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getJobOpeningId() {
		return _jobOpeningId;
	}

	@Override
	public void setJobOpeningId(long jobOpeningId) {
		_jobOpeningId = jobOpeningId;
	}

	@JSON
	@Override
	public long getJobPostId() {
		return _jobPostId;
	}

	@Override
	public void setJobPostId(long jobPostId) {
		_jobPostId = jobPostId;
	}

	@JSON
	@Override
	public String getOpeningFor() {
		if (_openingFor == null) {
			return "";
		}
		else {
			return _openingFor;
		}
	}

	@Override
	public void setOpeningFor(String openingFor) {
		_openingFor = openingFor;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			JobOpening.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobOpening toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (JobOpening)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobOpeningImpl jobOpeningImpl = new JobOpeningImpl();

		jobOpeningImpl.setJobOpeningId(getJobOpeningId());
		jobOpeningImpl.setJobPostId(getJobPostId());
		jobOpeningImpl.setOpeningFor(getOpeningFor());
		jobOpeningImpl.setDescription(getDescription());
		jobOpeningImpl.setCreatedDate(getCreatedDate());
		jobOpeningImpl.setModifiedDate(getModifiedDate());
		jobOpeningImpl.setStatus(getStatus());

		jobOpeningImpl.resetOriginalValues();

		return jobOpeningImpl;
	}

	@Override
	public int compareTo(JobOpening jobOpening) {
		long primaryKey = jobOpening.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof JobOpening)) {
			return false;
		}

		JobOpening jobOpening = (JobOpening)obj;

		long primaryKey = jobOpening.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<JobOpening> toCacheModel() {
		JobOpeningCacheModel jobOpeningCacheModel = new JobOpeningCacheModel();

		jobOpeningCacheModel.jobOpeningId = getJobOpeningId();

		jobOpeningCacheModel.jobPostId = getJobPostId();

		jobOpeningCacheModel.openingFor = getOpeningFor();

		String openingFor = jobOpeningCacheModel.openingFor;

		if ((openingFor != null) && (openingFor.length() == 0)) {
			jobOpeningCacheModel.openingFor = null;
		}

		jobOpeningCacheModel.description = getDescription();

		String description = jobOpeningCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			jobOpeningCacheModel.description = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			jobOpeningCacheModel.createdDate = createdDate.getTime();
		}
		else {
			jobOpeningCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobOpeningCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobOpeningCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jobOpeningCacheModel.status = getStatus();

		return jobOpeningCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{jobOpeningId=");
		sb.append(getJobOpeningId());
		sb.append(", jobPostId=");
		sb.append(getJobPostId());
		sb.append(", openingFor=");
		sb.append(getOpeningFor());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.JobOpening");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobOpeningId</column-name><column-value><![CDATA[");
		sb.append(getJobOpeningId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobPostId</column-name><column-value><![CDATA[");
		sb.append(getJobPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openingFor</column-name><column-value><![CDATA[");
		sb.append(getOpeningFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = JobOpening.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			JobOpening.class, ModelWrapper.class
		};
	private long _jobOpeningId;
	private long _jobPostId;
	private String _openingFor;
	private String _description;
	private Date _createdDate;
	private Date _modifiedDate;
	private int _status;
	private JobOpening _escapedModel;
}