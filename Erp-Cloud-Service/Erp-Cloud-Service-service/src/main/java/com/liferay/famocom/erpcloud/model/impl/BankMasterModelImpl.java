/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.BankMaster;
import com.liferay.famocom.erpcloud.model.BankMasterModel;
import com.liferay.famocom.erpcloud.model.BankMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BankMaster service. Represents a row in the &quot;bankMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BankMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BankMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see BankMasterImpl
 * @see BankMaster
 * @see BankMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BankMasterModelImpl extends BaseModelImpl<BankMaster>
	implements BankMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bank master model instance should use the {@link BankMaster} interface instead.
	 */
	public static final String TABLE_NAME = "bankMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bankId", Types.BIGINT },
			{ "bankName", Types.VARCHAR },
			{ "branchName", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "ifscCode", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "bankType", Types.INTEGER },
			{ "createdBy", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bankId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bankName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ifscCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bankType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table bankMaster (bankId LONG not null primary key,bankName VARCHAR(75) null,branchName VARCHAR(75) null,address VARCHAR(75) null,ifscCode VARCHAR(75) null,status INTEGER,bankType INTEGER,createdBy LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table bankMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY bankMaster.bankId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bankMaster.bankId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.BankMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.BankMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BankMaster toModel(BankMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BankMaster model = new BankMasterImpl();

		model.setBankId(soapModel.getBankId());
		model.setBankName(soapModel.getBankName());
		model.setBranchName(soapModel.getBranchName());
		model.setAddress(soapModel.getAddress());
		model.setIfscCode(soapModel.getIfscCode());
		model.setStatus(soapModel.getStatus());
		model.setBankType(soapModel.getBankType());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BankMaster> toModels(BankMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BankMaster> models = new ArrayList<BankMaster>(soapModels.length);

		for (BankMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.BankMaster"));

	public BankMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bankId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBankId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bankId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BankMaster.class;
	}

	@Override
	public String getModelClassName() {
		return BankMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bankId", getBankId());
		attributes.put("bankName", getBankName());
		attributes.put("branchName", getBranchName());
		attributes.put("address", getAddress());
		attributes.put("ifscCode", getIfscCode());
		attributes.put("status", getStatus());
		attributes.put("bankType", getBankType());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bankId = (Long)attributes.get("bankId");

		if (bankId != null) {
			setBankId(bankId);
		}

		String bankName = (String)attributes.get("bankName");

		if (bankName != null) {
			setBankName(bankName);
		}

		String branchName = (String)attributes.get("branchName");

		if (branchName != null) {
			setBranchName(branchName);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String ifscCode = (String)attributes.get("ifscCode");

		if (ifscCode != null) {
			setIfscCode(ifscCode);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer bankType = (Integer)attributes.get("bankType");

		if (bankType != null) {
			setBankType(bankType);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getBankId() {
		return _bankId;
	}

	@Override
	public void setBankId(long bankId) {
		_bankId = bankId;
	}

	@JSON
	@Override
	public String getBankName() {
		if (_bankName == null) {
			return "";
		}
		else {
			return _bankName;
		}
	}

	@Override
	public void setBankName(String bankName) {
		_bankName = bankName;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		_branchName = branchName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getIfscCode() {
		if (_ifscCode == null) {
			return "";
		}
		else {
			return _ifscCode;
		}
	}

	@Override
	public void setIfscCode(String ifscCode) {
		_ifscCode = ifscCode;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public int getBankType() {
		return _bankType;
	}

	@Override
	public void setBankType(int bankType) {
		_bankType = bankType;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BankMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BankMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BankMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BankMasterImpl bankMasterImpl = new BankMasterImpl();

		bankMasterImpl.setBankId(getBankId());
		bankMasterImpl.setBankName(getBankName());
		bankMasterImpl.setBranchName(getBranchName());
		bankMasterImpl.setAddress(getAddress());
		bankMasterImpl.setIfscCode(getIfscCode());
		bankMasterImpl.setStatus(getStatus());
		bankMasterImpl.setBankType(getBankType());
		bankMasterImpl.setCreatedBy(getCreatedBy());
		bankMasterImpl.setCreateDate(getCreateDate());
		bankMasterImpl.setModifiedDate(getModifiedDate());

		bankMasterImpl.resetOriginalValues();

		return bankMasterImpl;
	}

	@Override
	public int compareTo(BankMaster bankMaster) {
		long primaryKey = bankMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BankMaster)) {
			return false;
		}

		BankMaster bankMaster = (BankMaster)obj;

		long primaryKey = bankMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BankMasterModelImpl bankMasterModelImpl = this;

		bankMasterModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<BankMaster> toCacheModel() {
		BankMasterCacheModel bankMasterCacheModel = new BankMasterCacheModel();

		bankMasterCacheModel.bankId = getBankId();

		bankMasterCacheModel.bankName = getBankName();

		String bankName = bankMasterCacheModel.bankName;

		if ((bankName != null) && (bankName.length() == 0)) {
			bankMasterCacheModel.bankName = null;
		}

		bankMasterCacheModel.branchName = getBranchName();

		String branchName = bankMasterCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			bankMasterCacheModel.branchName = null;
		}

		bankMasterCacheModel.address = getAddress();

		String address = bankMasterCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			bankMasterCacheModel.address = null;
		}

		bankMasterCacheModel.ifscCode = getIfscCode();

		String ifscCode = bankMasterCacheModel.ifscCode;

		if ((ifscCode != null) && (ifscCode.length() == 0)) {
			bankMasterCacheModel.ifscCode = null;
		}

		bankMasterCacheModel.status = getStatus();

		bankMasterCacheModel.bankType = getBankType();

		bankMasterCacheModel.createdBy = getCreatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bankMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			bankMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bankMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bankMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return bankMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{bankId=");
		sb.append(getBankId());
		sb.append(", bankName=");
		sb.append(getBankName());
		sb.append(", branchName=");
		sb.append(getBranchName());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", ifscCode=");
		sb.append(getIfscCode());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", bankType=");
		sb.append(getBankType());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.BankMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bankId</column-name><column-value><![CDATA[");
		sb.append(getBankId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankName</column-name><column-value><![CDATA[");
		sb.append(getBankName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branchName</column-name><column-value><![CDATA[");
		sb.append(getBranchName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifscCode</column-name><column-value><![CDATA[");
		sb.append(getIfscCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankType</column-name><column-value><![CDATA[");
		sb.append(getBankType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BankMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BankMaster.class, ModelWrapper.class
		};
	private long _bankId;
	private String _bankName;
	private String _branchName;
	private String _address;
	private String _ifscCode;
	private int _status;
	private int _bankType;
	private long _createdBy;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private BankMaster _escapedModel;
}