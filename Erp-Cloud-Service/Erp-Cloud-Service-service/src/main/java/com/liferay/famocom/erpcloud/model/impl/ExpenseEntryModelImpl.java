/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ExpenseEntry;
import com.liferay.famocom.erpcloud.model.ExpenseEntryModel;
import com.liferay.famocom.erpcloud.model.ExpenseEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExpenseEntry service. Represents a row in the &quot;expenseEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExpenseEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpenseEntryImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ExpenseEntryImpl
 * @see ExpenseEntry
 * @see ExpenseEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ExpenseEntryModelImpl extends BaseModelImpl<ExpenseEntry>
	implements ExpenseEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expense entry model instance should use the {@link ExpenseEntry} interface instead.
	 */
	public static final String TABLE_NAME = "expenseEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "expenseId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "catId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "expDate", Types.TIMESTAMP },
			{ "amount", Types.DOUBLE },
			{ "status", Types.INTEGER },
			{ "manEmployeeId", Types.BIGINT },
			{ "manCommnets", Types.VARCHAR },
			{ "manApprovedDate", Types.TIMESTAMP },
			{ "accComments", Types.VARCHAR },
			{ "accApprovedDate", Types.TIMESTAMP },
			{ "monthYear", Types.BIGINT },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("expenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("catId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("manEmployeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("manCommnets", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manApprovedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accApprovedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("monthYear", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table expenseEntry (expenseId LONG not null primary key,employeeId LONG,companyId LONG,projectId LONG,catId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,expDate DATE null,amount DOUBLE,status INTEGER,manEmployeeId LONG,manCommnets VARCHAR(75) null,manApprovedDate DATE null,accComments VARCHAR(75) null,accApprovedDate DATE null,monthYear LONG,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table expenseEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY expenseEntry.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY expenseEntry.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntry"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExpenseEntry toModel(ExpenseEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExpenseEntry model = new ExpenseEntryImpl();

		model.setExpenseId(soapModel.getExpenseId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setProjectId(soapModel.getProjectId());
		model.setCatId(soapModel.getCatId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setExpDate(soapModel.getExpDate());
		model.setAmount(soapModel.getAmount());
		model.setStatus(soapModel.getStatus());
		model.setManEmployeeId(soapModel.getManEmployeeId());
		model.setManCommnets(soapModel.getManCommnets());
		model.setManApprovedDate(soapModel.getManApprovedDate());
		model.setAccComments(soapModel.getAccComments());
		model.setAccApprovedDate(soapModel.getAccApprovedDate());
		model.setMonthYear(soapModel.getMonthYear());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExpenseEntry> toModels(ExpenseEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExpenseEntry> models = new ArrayList<ExpenseEntry>(soapModels.length);

		for (ExpenseEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ExpenseEntry"));

	public ExpenseEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExpenseEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ExpenseEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("expenseId", getExpenseId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("projectId", getProjectId());
		attributes.put("catId", getCatId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("expDate", getExpDate());
		attributes.put("amount", getAmount());
		attributes.put("status", getStatus());
		attributes.put("manEmployeeId", getManEmployeeId());
		attributes.put("manCommnets", getManCommnets());
		attributes.put("manApprovedDate", getManApprovedDate());
		attributes.put("accComments", getAccComments());
		attributes.put("accApprovedDate", getAccApprovedDate());
		attributes.put("monthYear", getMonthYear());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long expenseId = (Long)attributes.get("expenseId");

		if (expenseId != null) {
			setExpenseId(expenseId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long catId = (Long)attributes.get("catId");

		if (catId != null) {
			setCatId(catId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date expDate = (Date)attributes.get("expDate");

		if (expDate != null) {
			setExpDate(expDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long manEmployeeId = (Long)attributes.get("manEmployeeId");

		if (manEmployeeId != null) {
			setManEmployeeId(manEmployeeId);
		}

		String manCommnets = (String)attributes.get("manCommnets");

		if (manCommnets != null) {
			setManCommnets(manCommnets);
		}

		Date manApprovedDate = (Date)attributes.get("manApprovedDate");

		if (manApprovedDate != null) {
			setManApprovedDate(manApprovedDate);
		}

		String accComments = (String)attributes.get("accComments");

		if (accComments != null) {
			setAccComments(accComments);
		}

		Date accApprovedDate = (Date)attributes.get("accApprovedDate");

		if (accApprovedDate != null) {
			setAccApprovedDate(accApprovedDate);
		}

		Long monthYear = (Long)attributes.get("monthYear");

		if (monthYear != null) {
			setMonthYear(monthYear);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public long getExpenseId() {
		return _expenseId;
	}

	@Override
	public void setExpenseId(long expenseId) {
		_expenseId = expenseId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getCatId() {
		return _catId;
	}

	@Override
	public void setCatId(long catId) {
		_catId = catId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getExpDate() {
		return _expDate;
	}

	@Override
	public void setExpDate(Date expDate) {
		_expDate = expDate;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getManEmployeeId() {
		return _manEmployeeId;
	}

	@Override
	public void setManEmployeeId(long manEmployeeId) {
		_manEmployeeId = manEmployeeId;
	}

	@JSON
	@Override
	public String getManCommnets() {
		if (_manCommnets == null) {
			return "";
		}
		else {
			return _manCommnets;
		}
	}

	@Override
	public void setManCommnets(String manCommnets) {
		_manCommnets = manCommnets;
	}

	@JSON
	@Override
	public Date getManApprovedDate() {
		return _manApprovedDate;
	}

	@Override
	public void setManApprovedDate(Date manApprovedDate) {
		_manApprovedDate = manApprovedDate;
	}

	@JSON
	@Override
	public String getAccComments() {
		if (_accComments == null) {
			return "";
		}
		else {
			return _accComments;
		}
	}

	@Override
	public void setAccComments(String accComments) {
		_accComments = accComments;
	}

	@JSON
	@Override
	public Date getAccApprovedDate() {
		return _accApprovedDate;
	}

	@Override
	public void setAccApprovedDate(Date accApprovedDate) {
		_accApprovedDate = accApprovedDate;
	}

	@JSON
	@Override
	public long getMonthYear() {
		return _monthYear;
	}

	@Override
	public void setMonthYear(long monthYear) {
		_monthYear = monthYear;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExpenseEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExpenseEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExpenseEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpenseEntryImpl expenseEntryImpl = new ExpenseEntryImpl();

		expenseEntryImpl.setExpenseId(getExpenseId());
		expenseEntryImpl.setEmployeeId(getEmployeeId());
		expenseEntryImpl.setCompanyId(getCompanyId());
		expenseEntryImpl.setProjectId(getProjectId());
		expenseEntryImpl.setCatId(getCatId());
		expenseEntryImpl.setGroupId(getGroupId());
		expenseEntryImpl.setUserId(getUserId());
		expenseEntryImpl.setUserName(getUserName());
		expenseEntryImpl.setCreateDate(getCreateDate());
		expenseEntryImpl.setModifiedDate(getModifiedDate());
		expenseEntryImpl.setTitle(getTitle());
		expenseEntryImpl.setDescription(getDescription());
		expenseEntryImpl.setExpDate(getExpDate());
		expenseEntryImpl.setAmount(getAmount());
		expenseEntryImpl.setStatus(getStatus());
		expenseEntryImpl.setManEmployeeId(getManEmployeeId());
		expenseEntryImpl.setManCommnets(getManCommnets());
		expenseEntryImpl.setManApprovedDate(getManApprovedDate());
		expenseEntryImpl.setAccComments(getAccComments());
		expenseEntryImpl.setAccApprovedDate(getAccApprovedDate());
		expenseEntryImpl.setMonthYear(getMonthYear());
		expenseEntryImpl.setStatusByUserId(getStatusByUserId());
		expenseEntryImpl.setStatusByUserName(getStatusByUserName());
		expenseEntryImpl.setStatusDate(getStatusDate());

		expenseEntryImpl.resetOriginalValues();

		return expenseEntryImpl;
	}

	@Override
	public int compareTo(ExpenseEntry expenseEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), expenseEntry.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExpenseEntry)) {
			return false;
		}

		ExpenseEntry expenseEntry = (ExpenseEntry)obj;

		long primaryKey = expenseEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExpenseEntryModelImpl expenseEntryModelImpl = this;

		expenseEntryModelImpl._originalGroupId = expenseEntryModelImpl._groupId;

		expenseEntryModelImpl._setOriginalGroupId = false;

		expenseEntryModelImpl._originalUserId = expenseEntryModelImpl._userId;

		expenseEntryModelImpl._setOriginalUserId = false;

		expenseEntryModelImpl._setModifiedDate = false;

		expenseEntryModelImpl._originalStatus = expenseEntryModelImpl._status;

		expenseEntryModelImpl._setOriginalStatus = false;

		expenseEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExpenseEntry> toCacheModel() {
		ExpenseEntryCacheModel expenseEntryCacheModel = new ExpenseEntryCacheModel();

		expenseEntryCacheModel.expenseId = getExpenseId();

		expenseEntryCacheModel.employeeId = getEmployeeId();

		expenseEntryCacheModel.companyId = getCompanyId();

		expenseEntryCacheModel.projectId = getProjectId();

		expenseEntryCacheModel.catId = getCatId();

		expenseEntryCacheModel.groupId = getGroupId();

		expenseEntryCacheModel.userId = getUserId();

		expenseEntryCacheModel.userName = getUserName();

		String userName = expenseEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			expenseEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			expenseEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			expenseEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			expenseEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			expenseEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		expenseEntryCacheModel.title = getTitle();

		String title = expenseEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			expenseEntryCacheModel.title = null;
		}

		expenseEntryCacheModel.description = getDescription();

		String description = expenseEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			expenseEntryCacheModel.description = null;
		}

		Date expDate = getExpDate();

		if (expDate != null) {
			expenseEntryCacheModel.expDate = expDate.getTime();
		}
		else {
			expenseEntryCacheModel.expDate = Long.MIN_VALUE;
		}

		expenseEntryCacheModel.amount = getAmount();

		expenseEntryCacheModel.status = getStatus();

		expenseEntryCacheModel.manEmployeeId = getManEmployeeId();

		expenseEntryCacheModel.manCommnets = getManCommnets();

		String manCommnets = expenseEntryCacheModel.manCommnets;

		if ((manCommnets != null) && (manCommnets.length() == 0)) {
			expenseEntryCacheModel.manCommnets = null;
		}

		Date manApprovedDate = getManApprovedDate();

		if (manApprovedDate != null) {
			expenseEntryCacheModel.manApprovedDate = manApprovedDate.getTime();
		}
		else {
			expenseEntryCacheModel.manApprovedDate = Long.MIN_VALUE;
		}

		expenseEntryCacheModel.accComments = getAccComments();

		String accComments = expenseEntryCacheModel.accComments;

		if ((accComments != null) && (accComments.length() == 0)) {
			expenseEntryCacheModel.accComments = null;
		}

		Date accApprovedDate = getAccApprovedDate();

		if (accApprovedDate != null) {
			expenseEntryCacheModel.accApprovedDate = accApprovedDate.getTime();
		}
		else {
			expenseEntryCacheModel.accApprovedDate = Long.MIN_VALUE;
		}

		expenseEntryCacheModel.monthYear = getMonthYear();

		expenseEntryCacheModel.statusByUserId = getStatusByUserId();

		expenseEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = expenseEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			expenseEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			expenseEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			expenseEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return expenseEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{expenseId=");
		sb.append(getExpenseId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", catId=");
		sb.append(getCatId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", expDate=");
		sb.append(getExpDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", manEmployeeId=");
		sb.append(getManEmployeeId());
		sb.append(", manCommnets=");
		sb.append(getManCommnets());
		sb.append(", manApprovedDate=");
		sb.append(getManApprovedDate());
		sb.append(", accComments=");
		sb.append(getAccComments());
		sb.append(", accApprovedDate=");
		sb.append(getAccApprovedDate());
		sb.append(", monthYear=");
		sb.append(getMonthYear());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ExpenseEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>expenseId</column-name><column-value><![CDATA[");
		sb.append(getExpenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catId</column-name><column-value><![CDATA[");
		sb.append(getCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expDate</column-name><column-value><![CDATA[");
		sb.append(getExpDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getManEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manCommnets</column-name><column-value><![CDATA[");
		sb.append(getManCommnets());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getManApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accComments</column-name><column-value><![CDATA[");
		sb.append(getAccComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getAccApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthYear</column-name><column-value><![CDATA[");
		sb.append(getMonthYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExpenseEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExpenseEntry.class, ModelWrapper.class
		};
	private long _expenseId;
	private long _employeeId;
	private long _companyId;
	private long _projectId;
	private long _catId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private Date _expDate;
	private double _amount;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _manEmployeeId;
	private String _manCommnets;
	private Date _manApprovedDate;
	private String _accComments;
	private Date _accApprovedDate;
	private long _monthYear;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private ExpenseEntry _escapedModel;
}