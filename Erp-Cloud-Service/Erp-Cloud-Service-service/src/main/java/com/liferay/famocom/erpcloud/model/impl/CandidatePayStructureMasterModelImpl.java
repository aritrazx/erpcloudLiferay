/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster;
import com.liferay.famocom.erpcloud.model.CandidatePayStructureMasterModel;
import com.liferay.famocom.erpcloud.model.CandidatePayStructureMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CandidatePayStructureMaster service. Represents a row in the &quot;candidatePayStructureMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidatePayStructureMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidatePayStructureMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see CandidatePayStructureMasterImpl
 * @see CandidatePayStructureMaster
 * @see CandidatePayStructureMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidatePayStructureMasterModelImpl extends BaseModelImpl<CandidatePayStructureMaster>
	implements CandidatePayStructureMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate pay structure master model instance should use the {@link CandidatePayStructureMaster} interface instead.
	 */
	public static final String TABLE_NAME = "candidatePayStructureMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "candidatePayStructureMasterId", Types.BIGINT },
			{ "recruitmentProcessId", Types.BIGINT },
			{ "totalAmount", Types.DOUBLE },
			{ "totalBonus", Types.DOUBLE },
			{ "payMasterStatus", Types.INTEGER },
			{ "joiningDate", Types.TIMESTAMP },
			{ "candidateBond", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("candidatePayStructureMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("recruitmentProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalBonus", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("payMasterStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("joiningDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("candidateBond", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table candidatePayStructureMaster (candidatePayStructureMasterId LONG not null primary key,recruitmentProcessId LONG,totalAmount DOUBLE,totalBonus DOUBLE,payMasterStatus INTEGER,joiningDate DATE null,candidateBond VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table candidatePayStructureMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY candidatePayStructureMaster.candidatePayStructureMasterId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY candidatePayStructureMaster.candidatePayStructureMasterId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster"),
			true);
	public static final long PAYMASTERSTATUS_COLUMN_BITMASK = 1L;
	public static final long RECRUITMENTPROCESSID_COLUMN_BITMASK = 2L;
	public static final long CANDIDATEPAYSTRUCTUREMASTERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CandidatePayStructureMaster toModel(
		CandidatePayStructureMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CandidatePayStructureMaster model = new CandidatePayStructureMasterImpl();

		model.setCandidatePayStructureMasterId(soapModel.getCandidatePayStructureMasterId());
		model.setRecruitmentProcessId(soapModel.getRecruitmentProcessId());
		model.setTotalAmount(soapModel.getTotalAmount());
		model.setTotalBonus(soapModel.getTotalBonus());
		model.setPayMasterStatus(soapModel.getPayMasterStatus());
		model.setJoiningDate(soapModel.getJoiningDate());
		model.setCandidateBond(soapModel.getCandidateBond());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CandidatePayStructureMaster> toModels(
		CandidatePayStructureMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CandidatePayStructureMaster> models = new ArrayList<CandidatePayStructureMaster>(soapModels.length);

		for (CandidatePayStructureMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster"));

	public CandidatePayStructureMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidatePayStructureMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidatePayStructureMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidatePayStructureMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CandidatePayStructureMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CandidatePayStructureMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("candidatePayStructureMasterId",
			getCandidatePayStructureMasterId());
		attributes.put("recruitmentProcessId", getRecruitmentProcessId());
		attributes.put("totalAmount", getTotalAmount());
		attributes.put("totalBonus", getTotalBonus());
		attributes.put("payMasterStatus", getPayMasterStatus());
		attributes.put("joiningDate", getJoiningDate());
		attributes.put("candidateBond", getCandidateBond());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long candidatePayStructureMasterId = (Long)attributes.get(
				"candidatePayStructureMasterId");

		if (candidatePayStructureMasterId != null) {
			setCandidatePayStructureMasterId(candidatePayStructureMasterId);
		}

		Long recruitmentProcessId = (Long)attributes.get("recruitmentProcessId");

		if (recruitmentProcessId != null) {
			setRecruitmentProcessId(recruitmentProcessId);
		}

		Double totalAmount = (Double)attributes.get("totalAmount");

		if (totalAmount != null) {
			setTotalAmount(totalAmount);
		}

		Double totalBonus = (Double)attributes.get("totalBonus");

		if (totalBonus != null) {
			setTotalBonus(totalBonus);
		}

		Integer payMasterStatus = (Integer)attributes.get("payMasterStatus");

		if (payMasterStatus != null) {
			setPayMasterStatus(payMasterStatus);
		}

		Date joiningDate = (Date)attributes.get("joiningDate");

		if (joiningDate != null) {
			setJoiningDate(joiningDate);
		}

		String candidateBond = (String)attributes.get("candidateBond");

		if (candidateBond != null) {
			setCandidateBond(candidateBond);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getCandidatePayStructureMasterId() {
		return _candidatePayStructureMasterId;
	}

	@Override
	public void setCandidatePayStructureMasterId(
		long candidatePayStructureMasterId) {
		_candidatePayStructureMasterId = candidatePayStructureMasterId;
	}

	@JSON
	@Override
	public long getRecruitmentProcessId() {
		return _recruitmentProcessId;
	}

	@Override
	public void setRecruitmentProcessId(long recruitmentProcessId) {
		_columnBitmask |= RECRUITMENTPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalRecruitmentProcessId) {
			_setOriginalRecruitmentProcessId = true;

			_originalRecruitmentProcessId = _recruitmentProcessId;
		}

		_recruitmentProcessId = recruitmentProcessId;
	}

	public long getOriginalRecruitmentProcessId() {
		return _originalRecruitmentProcessId;
	}

	@JSON
	@Override
	public double getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(double totalAmount) {
		_totalAmount = totalAmount;
	}

	@JSON
	@Override
	public double getTotalBonus() {
		return _totalBonus;
	}

	@Override
	public void setTotalBonus(double totalBonus) {
		_totalBonus = totalBonus;
	}

	@JSON
	@Override
	public int getPayMasterStatus() {
		return _payMasterStatus;
	}

	@Override
	public void setPayMasterStatus(int payMasterStatus) {
		_columnBitmask |= PAYMASTERSTATUS_COLUMN_BITMASK;

		if (!_setOriginalPayMasterStatus) {
			_setOriginalPayMasterStatus = true;

			_originalPayMasterStatus = _payMasterStatus;
		}

		_payMasterStatus = payMasterStatus;
	}

	public int getOriginalPayMasterStatus() {
		return _originalPayMasterStatus;
	}

	@JSON
	@Override
	public Date getJoiningDate() {
		return _joiningDate;
	}

	@Override
	public void setJoiningDate(Date joiningDate) {
		_joiningDate = joiningDate;
	}

	@JSON
	@Override
	public String getCandidateBond() {
		if (_candidateBond == null) {
			return "";
		}
		else {
			return _candidateBond;
		}
	}

	@Override
	public void setCandidateBond(String candidateBond) {
		_candidateBond = candidateBond;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CandidatePayStructureMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CandidatePayStructureMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CandidatePayStructureMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidatePayStructureMasterImpl candidatePayStructureMasterImpl = new CandidatePayStructureMasterImpl();

		candidatePayStructureMasterImpl.setCandidatePayStructureMasterId(getCandidatePayStructureMasterId());
		candidatePayStructureMasterImpl.setRecruitmentProcessId(getRecruitmentProcessId());
		candidatePayStructureMasterImpl.setTotalAmount(getTotalAmount());
		candidatePayStructureMasterImpl.setTotalBonus(getTotalBonus());
		candidatePayStructureMasterImpl.setPayMasterStatus(getPayMasterStatus());
		candidatePayStructureMasterImpl.setJoiningDate(getJoiningDate());
		candidatePayStructureMasterImpl.setCandidateBond(getCandidateBond());
		candidatePayStructureMasterImpl.setCreateDate(getCreateDate());
		candidatePayStructureMasterImpl.setModifiedDate(getModifiedDate());

		candidatePayStructureMasterImpl.resetOriginalValues();

		return candidatePayStructureMasterImpl;
	}

	@Override
	public int compareTo(
		CandidatePayStructureMaster candidatePayStructureMaster) {
		long primaryKey = candidatePayStructureMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CandidatePayStructureMaster)) {
			return false;
		}

		CandidatePayStructureMaster candidatePayStructureMaster = (CandidatePayStructureMaster)obj;

		long primaryKey = candidatePayStructureMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CandidatePayStructureMasterModelImpl candidatePayStructureMasterModelImpl =
			this;

		candidatePayStructureMasterModelImpl._originalRecruitmentProcessId = candidatePayStructureMasterModelImpl._recruitmentProcessId;

		candidatePayStructureMasterModelImpl._setOriginalRecruitmentProcessId = false;

		candidatePayStructureMasterModelImpl._originalPayMasterStatus = candidatePayStructureMasterModelImpl._payMasterStatus;

		candidatePayStructureMasterModelImpl._setOriginalPayMasterStatus = false;

		candidatePayStructureMasterModelImpl._setModifiedDate = false;

		candidatePayStructureMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CandidatePayStructureMaster> toCacheModel() {
		CandidatePayStructureMasterCacheModel candidatePayStructureMasterCacheModel =
			new CandidatePayStructureMasterCacheModel();

		candidatePayStructureMasterCacheModel.candidatePayStructureMasterId = getCandidatePayStructureMasterId();

		candidatePayStructureMasterCacheModel.recruitmentProcessId = getRecruitmentProcessId();

		candidatePayStructureMasterCacheModel.totalAmount = getTotalAmount();

		candidatePayStructureMasterCacheModel.totalBonus = getTotalBonus();

		candidatePayStructureMasterCacheModel.payMasterStatus = getPayMasterStatus();

		Date joiningDate = getJoiningDate();

		if (joiningDate != null) {
			candidatePayStructureMasterCacheModel.joiningDate = joiningDate.getTime();
		}
		else {
			candidatePayStructureMasterCacheModel.joiningDate = Long.MIN_VALUE;
		}

		candidatePayStructureMasterCacheModel.candidateBond = getCandidateBond();

		String candidateBond = candidatePayStructureMasterCacheModel.candidateBond;

		if ((candidateBond != null) && (candidateBond.length() == 0)) {
			candidatePayStructureMasterCacheModel.candidateBond = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			candidatePayStructureMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			candidatePayStructureMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			candidatePayStructureMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			candidatePayStructureMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return candidatePayStructureMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{candidatePayStructureMasterId=");
		sb.append(getCandidatePayStructureMasterId());
		sb.append(", recruitmentProcessId=");
		sb.append(getRecruitmentProcessId());
		sb.append(", totalAmount=");
		sb.append(getTotalAmount());
		sb.append(", totalBonus=");
		sb.append(getTotalBonus());
		sb.append(", payMasterStatus=");
		sb.append(getPayMasterStatus());
		sb.append(", joiningDate=");
		sb.append(getJoiningDate());
		sb.append(", candidateBond=");
		sb.append(getCandidateBond());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.famocom.erpcloud.model.CandidatePayStructureMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>candidatePayStructureMasterId</column-name><column-value><![CDATA[");
		sb.append(getCandidatePayStructureMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitmentProcessId</column-name><column-value><![CDATA[");
		sb.append(getRecruitmentProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAmount</column-name><column-value><![CDATA[");
		sb.append(getTotalAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalBonus</column-name><column-value><![CDATA[");
		sb.append(getTotalBonus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payMasterStatus</column-name><column-value><![CDATA[");
		sb.append(getPayMasterStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joiningDate</column-name><column-value><![CDATA[");
		sb.append(getJoiningDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidateBond</column-name><column-value><![CDATA[");
		sb.append(getCandidateBond());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CandidatePayStructureMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CandidatePayStructureMaster.class, ModelWrapper.class
		};
	private long _candidatePayStructureMasterId;
	private long _recruitmentProcessId;
	private long _originalRecruitmentProcessId;
	private boolean _setOriginalRecruitmentProcessId;
	private double _totalAmount;
	private double _totalBonus;
	private int _payMasterStatus;
	private int _originalPayMasterStatus;
	private boolean _setOriginalPayMasterStatus;
	private Date _joiningDate;
	private String _candidateBond;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private CandidatePayStructureMaster _escapedModel;
}