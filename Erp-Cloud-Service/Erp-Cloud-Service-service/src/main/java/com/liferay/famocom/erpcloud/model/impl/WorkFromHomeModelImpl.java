/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.WorkFromHome;
import com.liferay.famocom.erpcloud.model.WorkFromHomeModel;
import com.liferay.famocom.erpcloud.model.WorkFromHomeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WorkFromHome service. Represents a row in the &quot;workFromHome&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WorkFromHomeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkFromHomeImpl}.
 * </p>
 *
 * @author Samaresh
 * @see WorkFromHomeImpl
 * @see WorkFromHome
 * @see WorkFromHomeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WorkFromHomeModelImpl extends BaseModelImpl<WorkFromHome>
	implements WorkFromHomeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a work from home model instance should use the {@link WorkFromHome} interface instead.
	 */
	public static final String TABLE_NAME = "workFromHome";
	public static final Object[][] TABLE_COLUMNS = {
			{ "workFromHomeId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "appliedDate", Types.TIMESTAMP },
			{ "description", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "workStatus", Types.INTEGER },
			{ "hrComments", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("workFromHomeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appliedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("workStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hrComments", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table workFromHome (workFromHomeId LONG not null primary key,employeeId LONG,companyId LONG,projectId LONG,appliedDate DATE null,description VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,workStatus INTEGER,hrComments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table workFromHome";
	public static final String ORDER_BY_JPQL = " ORDER BY workFromHome.workFromHomeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY workFromHome.workFromHomeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.WorkFromHome"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.WorkFromHome"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WorkFromHome toModel(WorkFromHomeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WorkFromHome model = new WorkFromHomeImpl();

		model.setWorkFromHomeId(soapModel.getWorkFromHomeId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setProjectId(soapModel.getProjectId());
		model.setAppliedDate(soapModel.getAppliedDate());
		model.setDescription(soapModel.getDescription());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setWorkStatus(soapModel.getWorkStatus());
		model.setHrComments(soapModel.getHrComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WorkFromHome> toModels(WorkFromHomeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WorkFromHome> models = new ArrayList<WorkFromHome>(soapModels.length);

		for (WorkFromHomeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.WorkFromHome"));

	public WorkFromHomeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _workFromHomeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWorkFromHomeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workFromHomeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WorkFromHome.class;
	}

	@Override
	public String getModelClassName() {
		return WorkFromHome.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("workFromHomeId", getWorkFromHomeId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("projectId", getProjectId());
		attributes.put("appliedDate", getAppliedDate());
		attributes.put("description", getDescription());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("workStatus", getWorkStatus());
		attributes.put("hrComments", getHrComments());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long workFromHomeId = (Long)attributes.get("workFromHomeId");

		if (workFromHomeId != null) {
			setWorkFromHomeId(workFromHomeId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Date appliedDate = (Date)attributes.get("appliedDate");

		if (appliedDate != null) {
			setAppliedDate(appliedDate);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer workStatus = (Integer)attributes.get("workStatus");

		if (workStatus != null) {
			setWorkStatus(workStatus);
		}

		String hrComments = (String)attributes.get("hrComments");

		if (hrComments != null) {
			setHrComments(hrComments);
		}
	}

	@JSON
	@Override
	public long getWorkFromHomeId() {
		return _workFromHomeId;
	}

	@Override
	public void setWorkFromHomeId(long workFromHomeId) {
		_workFromHomeId = workFromHomeId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public Date getAppliedDate() {
		return _appliedDate;
	}

	@Override
	public void setAppliedDate(Date appliedDate) {
		_appliedDate = appliedDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getWorkStatus() {
		return _workStatus;
	}

	@Override
	public void setWorkStatus(int workStatus) {
		_workStatus = workStatus;
	}

	@JSON
	@Override
	public String getHrComments() {
		if (_hrComments == null) {
			return "";
		}
		else {
			return _hrComments;
		}
	}

	@Override
	public void setHrComments(String hrComments) {
		_hrComments = hrComments;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WorkFromHome.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WorkFromHome toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WorkFromHome)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkFromHomeImpl workFromHomeImpl = new WorkFromHomeImpl();

		workFromHomeImpl.setWorkFromHomeId(getWorkFromHomeId());
		workFromHomeImpl.setEmployeeId(getEmployeeId());
		workFromHomeImpl.setCompanyId(getCompanyId());
		workFromHomeImpl.setProjectId(getProjectId());
		workFromHomeImpl.setAppliedDate(getAppliedDate());
		workFromHomeImpl.setDescription(getDescription());
		workFromHomeImpl.setCreateDate(getCreateDate());
		workFromHomeImpl.setModifiedDate(getModifiedDate());
		workFromHomeImpl.setWorkStatus(getWorkStatus());
		workFromHomeImpl.setHrComments(getHrComments());

		workFromHomeImpl.resetOriginalValues();

		return workFromHomeImpl;
	}

	@Override
	public int compareTo(WorkFromHome workFromHome) {
		long primaryKey = workFromHome.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WorkFromHome)) {
			return false;
		}

		WorkFromHome workFromHome = (WorkFromHome)obj;

		long primaryKey = workFromHome.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WorkFromHomeModelImpl workFromHomeModelImpl = this;

		workFromHomeModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<WorkFromHome> toCacheModel() {
		WorkFromHomeCacheModel workFromHomeCacheModel = new WorkFromHomeCacheModel();

		workFromHomeCacheModel.workFromHomeId = getWorkFromHomeId();

		workFromHomeCacheModel.employeeId = getEmployeeId();

		workFromHomeCacheModel.companyId = getCompanyId();

		workFromHomeCacheModel.projectId = getProjectId();

		Date appliedDate = getAppliedDate();

		if (appliedDate != null) {
			workFromHomeCacheModel.appliedDate = appliedDate.getTime();
		}
		else {
			workFromHomeCacheModel.appliedDate = Long.MIN_VALUE;
		}

		workFromHomeCacheModel.description = getDescription();

		String description = workFromHomeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			workFromHomeCacheModel.description = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			workFromHomeCacheModel.createDate = createDate.getTime();
		}
		else {
			workFromHomeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			workFromHomeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			workFromHomeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		workFromHomeCacheModel.workStatus = getWorkStatus();

		workFromHomeCacheModel.hrComments = getHrComments();

		String hrComments = workFromHomeCacheModel.hrComments;

		if ((hrComments != null) && (hrComments.length() == 0)) {
			workFromHomeCacheModel.hrComments = null;
		}

		return workFromHomeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{workFromHomeId=");
		sb.append(getWorkFromHomeId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", appliedDate=");
		sb.append(getAppliedDate());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", workStatus=");
		sb.append(getWorkStatus());
		sb.append(", hrComments=");
		sb.append(getHrComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.WorkFromHome");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>workFromHomeId</column-name><column-value><![CDATA[");
		sb.append(getWorkFromHomeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appliedDate</column-name><column-value><![CDATA[");
		sb.append(getAppliedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workStatus</column-name><column-value><![CDATA[");
		sb.append(getWorkStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrComments</column-name><column-value><![CDATA[");
		sb.append(getHrComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WorkFromHome.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WorkFromHome.class, ModelWrapper.class
		};
	private long _workFromHomeId;
	private long _employeeId;
	private long _companyId;
	private long _projectId;
	private Date _appliedDate;
	private String _description;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _workStatus;
	private String _hrComments;
	private WorkFromHome _escapedModel;
}