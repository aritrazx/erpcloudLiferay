/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.CandidateReview;
import com.liferay.famocom.erpcloud.model.CandidateReviewModel;
import com.liferay.famocom.erpcloud.model.CandidateReviewSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CandidateReview service. Represents a row in the &quot;CandidateReview&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidateReviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateReviewImpl}.
 * </p>
 *
 * @author Samaresh
 * @see CandidateReviewImpl
 * @see CandidateReview
 * @see CandidateReviewModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidateReviewModelImpl extends BaseModelImpl<CandidateReview>
	implements CandidateReviewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate review model instance should use the {@link CandidateReview} interface instead.
	 */
	public static final String TABLE_NAME = "CandidateReview";
	public static final Object[][] TABLE_COLUMNS = {
			{ "candidateReviewId", Types.BIGINT },
			{ "recruitProcessId", Types.BIGINT },
			{ "evaluationId", Types.BIGINT },
			{ "scroring", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("candidateReviewId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("recruitProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("evaluationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scroring", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CandidateReview (candidateReviewId LONG not null primary key,recruitProcessId LONG,evaluationId LONG,scroring VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CandidateReview";
	public static final String ORDER_BY_JPQL = " ORDER BY candidateReview.candidateReviewId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CandidateReview.candidateReviewId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.CandidateReview"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.CandidateReview"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.CandidateReview"),
			true);
	public static final long RECRUITPROCESSID_COLUMN_BITMASK = 1L;
	public static final long CANDIDATEREVIEWID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CandidateReview toModel(CandidateReviewSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CandidateReview model = new CandidateReviewImpl();

		model.setCandidateReviewId(soapModel.getCandidateReviewId());
		model.setRecruitProcessId(soapModel.getRecruitProcessId());
		model.setEvaluationId(soapModel.getEvaluationId());
		model.setScroring(soapModel.getScroring());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CandidateReview> toModels(
		CandidateReviewSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CandidateReview> models = new ArrayList<CandidateReview>(soapModels.length);

		for (CandidateReviewSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.CandidateReview"));

	public CandidateReviewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateReviewId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateReviewId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateReviewId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CandidateReview.class;
	}

	@Override
	public String getModelClassName() {
		return CandidateReview.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("candidateReviewId", getCandidateReviewId());
		attributes.put("recruitProcessId", getRecruitProcessId());
		attributes.put("evaluationId", getEvaluationId());
		attributes.put("scroring", getScroring());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long candidateReviewId = (Long)attributes.get("candidateReviewId");

		if (candidateReviewId != null) {
			setCandidateReviewId(candidateReviewId);
		}

		Long recruitProcessId = (Long)attributes.get("recruitProcessId");

		if (recruitProcessId != null) {
			setRecruitProcessId(recruitProcessId);
		}

		Long evaluationId = (Long)attributes.get("evaluationId");

		if (evaluationId != null) {
			setEvaluationId(evaluationId);
		}

		String scroring = (String)attributes.get("scroring");

		if (scroring != null) {
			setScroring(scroring);
		}
	}

	@JSON
	@Override
	public long getCandidateReviewId() {
		return _candidateReviewId;
	}

	@Override
	public void setCandidateReviewId(long candidateReviewId) {
		_candidateReviewId = candidateReviewId;
	}

	@JSON
	@Override
	public long getRecruitProcessId() {
		return _recruitProcessId;
	}

	@Override
	public void setRecruitProcessId(long recruitProcessId) {
		_columnBitmask |= RECRUITPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalRecruitProcessId) {
			_setOriginalRecruitProcessId = true;

			_originalRecruitProcessId = _recruitProcessId;
		}

		_recruitProcessId = recruitProcessId;
	}

	public long getOriginalRecruitProcessId() {
		return _originalRecruitProcessId;
	}

	@JSON
	@Override
	public long getEvaluationId() {
		return _evaluationId;
	}

	@Override
	public void setEvaluationId(long evaluationId) {
		_evaluationId = evaluationId;
	}

	@JSON
	@Override
	public String getScroring() {
		if (_scroring == null) {
			return "";
		}
		else {
			return _scroring;
		}
	}

	@Override
	public void setScroring(String scroring) {
		_scroring = scroring;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CandidateReview.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CandidateReview toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CandidateReview)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateReviewImpl candidateReviewImpl = new CandidateReviewImpl();

		candidateReviewImpl.setCandidateReviewId(getCandidateReviewId());
		candidateReviewImpl.setRecruitProcessId(getRecruitProcessId());
		candidateReviewImpl.setEvaluationId(getEvaluationId());
		candidateReviewImpl.setScroring(getScroring());

		candidateReviewImpl.resetOriginalValues();

		return candidateReviewImpl;
	}

	@Override
	public int compareTo(CandidateReview candidateReview) {
		long primaryKey = candidateReview.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CandidateReview)) {
			return false;
		}

		CandidateReview candidateReview = (CandidateReview)obj;

		long primaryKey = candidateReview.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CandidateReviewModelImpl candidateReviewModelImpl = this;

		candidateReviewModelImpl._originalRecruitProcessId = candidateReviewModelImpl._recruitProcessId;

		candidateReviewModelImpl._setOriginalRecruitProcessId = false;

		candidateReviewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CandidateReview> toCacheModel() {
		CandidateReviewCacheModel candidateReviewCacheModel = new CandidateReviewCacheModel();

		candidateReviewCacheModel.candidateReviewId = getCandidateReviewId();

		candidateReviewCacheModel.recruitProcessId = getRecruitProcessId();

		candidateReviewCacheModel.evaluationId = getEvaluationId();

		candidateReviewCacheModel.scroring = getScroring();

		String scroring = candidateReviewCacheModel.scroring;

		if ((scroring != null) && (scroring.length() == 0)) {
			candidateReviewCacheModel.scroring = null;
		}

		return candidateReviewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{candidateReviewId=");
		sb.append(getCandidateReviewId());
		sb.append(", recruitProcessId=");
		sb.append(getRecruitProcessId());
		sb.append(", evaluationId=");
		sb.append(getEvaluationId());
		sb.append(", scroring=");
		sb.append(getScroring());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.CandidateReview");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>candidateReviewId</column-name><column-value><![CDATA[");
		sb.append(getCandidateReviewId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitProcessId</column-name><column-value><![CDATA[");
		sb.append(getRecruitProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationId</column-name><column-value><![CDATA[");
		sb.append(getEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scroring</column-name><column-value><![CDATA[");
		sb.append(getScroring());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CandidateReview.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CandidateReview.class, ModelWrapper.class
		};
	private long _candidateReviewId;
	private long _recruitProcessId;
	private long _originalRecruitProcessId;
	private boolean _setOriginalRecruitProcessId;
	private long _evaluationId;
	private String _scroring;
	private long _columnBitmask;
	private CandidateReview _escapedModel;
}