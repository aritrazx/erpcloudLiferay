/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.PushNotification;
import com.liferay.famocom.erpcloud.model.PushNotificationModel;
import com.liferay.famocom.erpcloud.model.PushNotificationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PushNotification service. Represents a row in the &quot;pushNotification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PushNotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PushNotificationImpl}.
 * </p>
 *
 * @author Samaresh
 * @see PushNotificationImpl
 * @see PushNotification
 * @see PushNotificationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PushNotificationModelImpl extends BaseModelImpl<PushNotification>
	implements PushNotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a push notification model instance should use the {@link PushNotification} interface instead.
	 */
	public static final String TABLE_NAME = "pushNotification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "pushNotificationId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "fileId", Types.BIGINT },
			{ "fileUrl", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pushNotificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table pushNotification (pushNotificationId LONG not null primary key,subject VARCHAR(75) null,message VARCHAR(75) null,fileId LONG,fileUrl VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table pushNotification";
	public static final String ORDER_BY_JPQL = " ORDER BY pushNotification.pushNotificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY pushNotification.pushNotificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.PushNotification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.PushNotification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PushNotification toModel(PushNotificationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PushNotification model = new PushNotificationImpl();

		model.setPushNotificationId(soapModel.getPushNotificationId());
		model.setSubject(soapModel.getSubject());
		model.setMessage(soapModel.getMessage());
		model.setFileId(soapModel.getFileId());
		model.setFileUrl(soapModel.getFileUrl());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PushNotification> toModels(
		PushNotificationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PushNotification> models = new ArrayList<PushNotification>(soapModels.length);

		for (PushNotificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.PushNotification"));

	public PushNotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pushNotificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPushNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pushNotificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PushNotification.class;
	}

	@Override
	public String getModelClassName() {
		return PushNotification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("pushNotificationId", getPushNotificationId());
		attributes.put("subject", getSubject());
		attributes.put("message", getMessage());
		attributes.put("fileId", getFileId());
		attributes.put("fileUrl", getFileUrl());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long pushNotificationId = (Long)attributes.get("pushNotificationId");

		if (pushNotificationId != null) {
			setPushNotificationId(pushNotificationId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		String fileUrl = (String)attributes.get("fileUrl");

		if (fileUrl != null) {
			setFileUrl(fileUrl);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getPushNotificationId() {
		return _pushNotificationId;
	}

	@Override
	public void setPushNotificationId(long pushNotificationId) {
		_pushNotificationId = pushNotificationId;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		_fileId = fileId;
	}

	@JSON
	@Override
	public String getFileUrl() {
		if (_fileUrl == null) {
			return "";
		}
		else {
			return _fileUrl;
		}
	}

	@Override
	public void setFileUrl(String fileUrl) {
		_fileUrl = fileUrl;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PushNotification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PushNotification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PushNotification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PushNotificationImpl pushNotificationImpl = new PushNotificationImpl();

		pushNotificationImpl.setPushNotificationId(getPushNotificationId());
		pushNotificationImpl.setSubject(getSubject());
		pushNotificationImpl.setMessage(getMessage());
		pushNotificationImpl.setFileId(getFileId());
		pushNotificationImpl.setFileUrl(getFileUrl());
		pushNotificationImpl.setCreateDate(getCreateDate());
		pushNotificationImpl.setModifiedDate(getModifiedDate());

		pushNotificationImpl.resetOriginalValues();

		return pushNotificationImpl;
	}

	@Override
	public int compareTo(PushNotification pushNotification) {
		long primaryKey = pushNotification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PushNotification)) {
			return false;
		}

		PushNotification pushNotification = (PushNotification)obj;

		long primaryKey = pushNotification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PushNotificationModelImpl pushNotificationModelImpl = this;

		pushNotificationModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<PushNotification> toCacheModel() {
		PushNotificationCacheModel pushNotificationCacheModel = new PushNotificationCacheModel();

		pushNotificationCacheModel.pushNotificationId = getPushNotificationId();

		pushNotificationCacheModel.subject = getSubject();

		String subject = pushNotificationCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			pushNotificationCacheModel.subject = null;
		}

		pushNotificationCacheModel.message = getMessage();

		String message = pushNotificationCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			pushNotificationCacheModel.message = null;
		}

		pushNotificationCacheModel.fileId = getFileId();

		pushNotificationCacheModel.fileUrl = getFileUrl();

		String fileUrl = pushNotificationCacheModel.fileUrl;

		if ((fileUrl != null) && (fileUrl.length() == 0)) {
			pushNotificationCacheModel.fileUrl = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pushNotificationCacheModel.createDate = createDate.getTime();
		}
		else {
			pushNotificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pushNotificationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pushNotificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return pushNotificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{pushNotificationId=");
		sb.append(getPushNotificationId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", fileId=");
		sb.append(getFileId());
		sb.append(", fileUrl=");
		sb.append(getFileUrl());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.PushNotification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>pushNotificationId</column-name><column-value><![CDATA[");
		sb.append(getPushNotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileUrl</column-name><column-value><![CDATA[");
		sb.append(getFileUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PushNotification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PushNotification.class, ModelWrapper.class
		};
	private long _pushNotificationId;
	private String _subject;
	private String _message;
	private long _fileId;
	private String _fileUrl;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private PushNotification _escapedModel;
}