/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.Branch;
import com.liferay.famocom.erpcloud.model.BranchModel;
import com.liferay.famocom.erpcloud.model.BranchSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Branch service. Represents a row in the &quot;branch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BranchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BranchImpl}.
 * </p>
 *
 * @author Samaresh
 * @see BranchImpl
 * @see Branch
 * @see BranchModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BranchModelImpl extends BaseModelImpl<Branch>
	implements BranchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a branch model instance should use the {@link Branch} interface instead.
	 */
	public static final String TABLE_NAME = "branch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "branchId", Types.BIGINT },
			{ "branchName", Types.VARCHAR },
			{ "branchAddress", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "createdById", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("branchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("branchAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdById", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table branch (branchId LONG not null primary key,branchName VARCHAR(75) null,branchAddress VARCHAR(75) null,status INTEGER,modifiedDate DATE null,createDate DATE null,createdById LONG)";
	public static final String TABLE_SQL_DROP = "drop table branch";
	public static final String ORDER_BY_JPQL = " ORDER BY branch.branchId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch.branchId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.Branch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.Branch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Branch toModel(BranchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Branch model = new BranchImpl();

		model.setBranchId(soapModel.getBranchId());
		model.setBranchName(soapModel.getBranchName());
		model.setBranchAddress(soapModel.getBranchAddress());
		model.setStatus(soapModel.getStatus());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedById(soapModel.getCreatedById());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Branch> toModels(BranchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Branch> models = new ArrayList<Branch>(soapModels.length);

		for (BranchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.Branch"));

	public BranchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _branchId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBranchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _branchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Branch.class;
	}

	@Override
	public String getModelClassName() {
		return Branch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("branchId", getBranchId());
		attributes.put("branchName", getBranchName());
		attributes.put("branchAddress", getBranchAddress());
		attributes.put("status", getStatus());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdById", getCreatedById());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long branchId = (Long)attributes.get("branchId");

		if (branchId != null) {
			setBranchId(branchId);
		}

		String branchName = (String)attributes.get("branchName");

		if (branchName != null) {
			setBranchName(branchName);
		}

		String branchAddress = (String)attributes.get("branchAddress");

		if (branchAddress != null) {
			setBranchAddress(branchAddress);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdById = (Long)attributes.get("createdById");

		if (createdById != null) {
			setCreatedById(createdById);
		}
	}

	@JSON
	@Override
	public long getBranchId() {
		return _branchId;
	}

	@Override
	public void setBranchId(long branchId) {
		_branchId = branchId;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		_branchName = branchName;
	}

	@JSON
	@Override
	public String getBranchAddress() {
		if (_branchAddress == null) {
			return "";
		}
		else {
			return _branchAddress;
		}
	}

	@Override
	public void setBranchAddress(String branchAddress) {
		_branchAddress = branchAddress;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Branch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Branch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Branch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BranchImpl branchImpl = new BranchImpl();

		branchImpl.setBranchId(getBranchId());
		branchImpl.setBranchName(getBranchName());
		branchImpl.setBranchAddress(getBranchAddress());
		branchImpl.setStatus(getStatus());
		branchImpl.setModifiedDate(getModifiedDate());
		branchImpl.setCreateDate(getCreateDate());
		branchImpl.setCreatedById(getCreatedById());

		branchImpl.resetOriginalValues();

		return branchImpl;
	}

	@Override
	public int compareTo(Branch branch) {
		long primaryKey = branch.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Branch)) {
			return false;
		}

		Branch branch = (Branch)obj;

		long primaryKey = branch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BranchModelImpl branchModelImpl = this;

		branchModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Branch> toCacheModel() {
		BranchCacheModel branchCacheModel = new BranchCacheModel();

		branchCacheModel.branchId = getBranchId();

		branchCacheModel.branchName = getBranchName();

		String branchName = branchCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			branchCacheModel.branchName = null;
		}

		branchCacheModel.branchAddress = getBranchAddress();

		String branchAddress = branchCacheModel.branchAddress;

		if ((branchAddress != null) && (branchAddress.length() == 0)) {
			branchCacheModel.branchAddress = null;
		}

		branchCacheModel.status = getStatus();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			branchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			branchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			branchCacheModel.createDate = createDate.getTime();
		}
		else {
			branchCacheModel.createDate = Long.MIN_VALUE;
		}

		branchCacheModel.createdById = getCreatedById();

		return branchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{branchId=");
		sb.append(getBranchId());
		sb.append(", branchName=");
		sb.append(getBranchName());
		sb.append(", branchAddress=");
		sb.append(getBranchAddress());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdById=");
		sb.append(getCreatedById());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.Branch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>branchId</column-name><column-value><![CDATA[");
		sb.append(getBranchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branchName</column-name><column-value><![CDATA[");
		sb.append(getBranchName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branchAddress</column-name><column-value><![CDATA[");
		sb.append(getBranchAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdById</column-name><column-value><![CDATA[");
		sb.append(getCreatedById());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Branch.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Branch.class, ModelWrapper.class
		};
	private long _branchId;
	private String _branchName;
	private String _branchAddress;
	private int _status;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _createDate;
	private long _createdById;
	private Branch _escapedModel;
}