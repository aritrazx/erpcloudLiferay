/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ExpenseEntryHistory;
import com.liferay.famocom.erpcloud.model.ExpenseEntryHistoryModel;
import com.liferay.famocom.erpcloud.model.ExpenseEntryHistorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExpenseEntryHistory service. Represents a row in the &quot;expenseEntryHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExpenseEntryHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpenseEntryHistoryImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ExpenseEntryHistoryImpl
 * @see ExpenseEntryHistory
 * @see ExpenseEntryHistoryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ExpenseEntryHistoryModelImpl extends BaseModelImpl<ExpenseEntryHistory>
	implements ExpenseEntryHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expense entry history model instance should use the {@link ExpenseEntryHistory} interface instead.
	 */
	public static final String TABLE_NAME = "expenseEntryHistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "expenseHistoryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "expenseId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "manEmployeeId", Types.BIGINT },
			{ "manComments", Types.VARCHAR },
			{ "addeddate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("expenseHistoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("expenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("manEmployeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("manComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addeddate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table expenseEntryHistory (expenseHistoryId LONG not null primary key,companyId LONG,expenseId LONG,status INTEGER,manEmployeeId LONG,manComments VARCHAR(75) null,addeddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table expenseEntryHistory";
	public static final String ORDER_BY_JPQL = " ORDER BY expenseEntryHistory.expenseHistoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY expenseEntryHistory.expenseHistoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntryHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntryHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.ExpenseEntryHistory"),
			true);
	public static final long EXPENSEID_COLUMN_BITMASK = 1L;
	public static final long EXPENSEHISTORYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExpenseEntryHistory toModel(ExpenseEntryHistorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExpenseEntryHistory model = new ExpenseEntryHistoryImpl();

		model.setExpenseHistoryId(soapModel.getExpenseHistoryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setExpenseId(soapModel.getExpenseId());
		model.setStatus(soapModel.getStatus());
		model.setManEmployeeId(soapModel.getManEmployeeId());
		model.setManComments(soapModel.getManComments());
		model.setAddeddate(soapModel.getAddeddate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExpenseEntryHistory> toModels(
		ExpenseEntryHistorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExpenseEntryHistory> models = new ArrayList<ExpenseEntryHistory>(soapModels.length);

		for (ExpenseEntryHistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ExpenseEntryHistory"));

	public ExpenseEntryHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expenseHistoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpenseHistoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expenseHistoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExpenseEntryHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ExpenseEntryHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("expenseHistoryId", getExpenseHistoryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("expenseId", getExpenseId());
		attributes.put("status", getStatus());
		attributes.put("manEmployeeId", getManEmployeeId());
		attributes.put("manComments", getManComments());
		attributes.put("addeddate", getAddeddate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long expenseHistoryId = (Long)attributes.get("expenseHistoryId");

		if (expenseHistoryId != null) {
			setExpenseHistoryId(expenseHistoryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long expenseId = (Long)attributes.get("expenseId");

		if (expenseId != null) {
			setExpenseId(expenseId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long manEmployeeId = (Long)attributes.get("manEmployeeId");

		if (manEmployeeId != null) {
			setManEmployeeId(manEmployeeId);
		}

		String manComments = (String)attributes.get("manComments");

		if (manComments != null) {
			setManComments(manComments);
		}

		Date addeddate = (Date)attributes.get("addeddate");

		if (addeddate != null) {
			setAddeddate(addeddate);
		}
	}

	@JSON
	@Override
	public long getExpenseHistoryId() {
		return _expenseHistoryId;
	}

	@Override
	public void setExpenseHistoryId(long expenseHistoryId) {
		_expenseHistoryId = expenseHistoryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getExpenseId() {
		return _expenseId;
	}

	@Override
	public void setExpenseId(long expenseId) {
		_columnBitmask |= EXPENSEID_COLUMN_BITMASK;

		if (!_setOriginalExpenseId) {
			_setOriginalExpenseId = true;

			_originalExpenseId = _expenseId;
		}

		_expenseId = expenseId;
	}

	public long getOriginalExpenseId() {
		return _originalExpenseId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getManEmployeeId() {
		return _manEmployeeId;
	}

	@Override
	public void setManEmployeeId(long manEmployeeId) {
		_manEmployeeId = manEmployeeId;
	}

	@JSON
	@Override
	public String getManComments() {
		if (_manComments == null) {
			return "";
		}
		else {
			return _manComments;
		}
	}

	@Override
	public void setManComments(String manComments) {
		_manComments = manComments;
	}

	@JSON
	@Override
	public Date getAddeddate() {
		return _addeddate;
	}

	@Override
	public void setAddeddate(Date addeddate) {
		_addeddate = addeddate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExpenseEntryHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExpenseEntryHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExpenseEntryHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpenseEntryHistoryImpl expenseEntryHistoryImpl = new ExpenseEntryHistoryImpl();

		expenseEntryHistoryImpl.setExpenseHistoryId(getExpenseHistoryId());
		expenseEntryHistoryImpl.setCompanyId(getCompanyId());
		expenseEntryHistoryImpl.setExpenseId(getExpenseId());
		expenseEntryHistoryImpl.setStatus(getStatus());
		expenseEntryHistoryImpl.setManEmployeeId(getManEmployeeId());
		expenseEntryHistoryImpl.setManComments(getManComments());
		expenseEntryHistoryImpl.setAddeddate(getAddeddate());

		expenseEntryHistoryImpl.resetOriginalValues();

		return expenseEntryHistoryImpl;
	}

	@Override
	public int compareTo(ExpenseEntryHistory expenseEntryHistory) {
		long primaryKey = expenseEntryHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExpenseEntryHistory)) {
			return false;
		}

		ExpenseEntryHistory expenseEntryHistory = (ExpenseEntryHistory)obj;

		long primaryKey = expenseEntryHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExpenseEntryHistoryModelImpl expenseEntryHistoryModelImpl = this;

		expenseEntryHistoryModelImpl._originalExpenseId = expenseEntryHistoryModelImpl._expenseId;

		expenseEntryHistoryModelImpl._setOriginalExpenseId = false;

		expenseEntryHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExpenseEntryHistory> toCacheModel() {
		ExpenseEntryHistoryCacheModel expenseEntryHistoryCacheModel = new ExpenseEntryHistoryCacheModel();

		expenseEntryHistoryCacheModel.expenseHistoryId = getExpenseHistoryId();

		expenseEntryHistoryCacheModel.companyId = getCompanyId();

		expenseEntryHistoryCacheModel.expenseId = getExpenseId();

		expenseEntryHistoryCacheModel.status = getStatus();

		expenseEntryHistoryCacheModel.manEmployeeId = getManEmployeeId();

		expenseEntryHistoryCacheModel.manComments = getManComments();

		String manComments = expenseEntryHistoryCacheModel.manComments;

		if ((manComments != null) && (manComments.length() == 0)) {
			expenseEntryHistoryCacheModel.manComments = null;
		}

		Date addeddate = getAddeddate();

		if (addeddate != null) {
			expenseEntryHistoryCacheModel.addeddate = addeddate.getTime();
		}
		else {
			expenseEntryHistoryCacheModel.addeddate = Long.MIN_VALUE;
		}

		return expenseEntryHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{expenseHistoryId=");
		sb.append(getExpenseHistoryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", expenseId=");
		sb.append(getExpenseId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", manEmployeeId=");
		sb.append(getManEmployeeId());
		sb.append(", manComments=");
		sb.append(getManComments());
		sb.append(", addeddate=");
		sb.append(getAddeddate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ExpenseEntryHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>expenseHistoryId</column-name><column-value><![CDATA[");
		sb.append(getExpenseHistoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expenseId</column-name><column-value><![CDATA[");
		sb.append(getExpenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manEmployeeId</column-name><column-value><![CDATA[");
		sb.append(getManEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manComments</column-name><column-value><![CDATA[");
		sb.append(getManComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addeddate</column-name><column-value><![CDATA[");
		sb.append(getAddeddate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExpenseEntryHistory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExpenseEntryHistory.class, ModelWrapper.class
		};
	private long _expenseHistoryId;
	private long _companyId;
	private long _expenseId;
	private long _originalExpenseId;
	private boolean _setOriginalExpenseId;
	private int _status;
	private long _manEmployeeId;
	private String _manComments;
	private Date _addeddate;
	private long _columnBitmask;
	private ExpenseEntryHistory _escapedModel;
}