/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.PayComponent;
import com.liferay.famocom.erpcloud.model.PayComponentModel;
import com.liferay.famocom.erpcloud.model.PayComponentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PayComponent service. Represents a row in the &quot;PayComponent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PayComponentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PayComponentImpl}.
 * </p>
 *
 * @author Samaresh
 * @see PayComponentImpl
 * @see PayComponent
 * @see PayComponentModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PayComponentModelImpl extends BaseModelImpl<PayComponent>
	implements PayComponentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pay component model instance should use the {@link PayComponent} interface instead.
	 */
	public static final String TABLE_NAME = "PayComponent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "componentId", Types.BIGINT },
			{ "employeeTypeId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "abbreviation", Types.VARCHAR },
			{ "taxStatus", Types.INTEGER },
			{ "payType", Types.VARCHAR },
			{ "componentType", Types.INTEGER },
			{ "componentValueFormula", Types.VARCHAR },
			{ "partOfCtc", Types.INTEGER },
			{ "effectiveDate", Types.TIMESTAMP },
			{ "islock", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "amount", Types.DOUBLE },
			{ "payComponentOrder", Types.BIGINT },
			{ "autoAddPayStructure", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("componentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("abbreviation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("payType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("componentType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("componentValueFormula", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partOfCtc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("effectiveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("islock", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("payComponentOrder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("autoAddPayStructure", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table PayComponent (componentId LONG not null primary key,employeeTypeId LONG,name VARCHAR(75) null,abbreviation VARCHAR(75) null,taxStatus INTEGER,payType VARCHAR(75) null,componentType INTEGER,componentValueFormula VARCHAR(75) null,partOfCtc INTEGER,effectiveDate DATE null,islock LONG,createDate DATE null,modifiedDate DATE null,amount DOUBLE,payComponentOrder LONG,autoAddPayStructure INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PayComponent";
	public static final String ORDER_BY_JPQL = " ORDER BY payComponent.componentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PayComponent.componentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.PayComponent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.PayComponent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.PayComponent"),
			true);
	public static final long ABBREVIATION_COLUMN_BITMASK = 1L;
	public static final long COMPONENTID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long PAYCOMPONENTORDER_COLUMN_BITMASK = 8L;
	public static final long PAYTYPE_COLUMN_BITMASK = 16L;
	public static final long TAXSTATUS_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PayComponent toModel(PayComponentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PayComponent model = new PayComponentImpl();

		model.setComponentId(soapModel.getComponentId());
		model.setEmployeeTypeId(soapModel.getEmployeeTypeId());
		model.setName(soapModel.getName());
		model.setAbbreviation(soapModel.getAbbreviation());
		model.setTaxStatus(soapModel.getTaxStatus());
		model.setPayType(soapModel.getPayType());
		model.setComponentType(soapModel.getComponentType());
		model.setComponentValueFormula(soapModel.getComponentValueFormula());
		model.setPartOfCtc(soapModel.getPartOfCtc());
		model.setEffectiveDate(soapModel.getEffectiveDate());
		model.setIslock(soapModel.getIslock());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAmount(soapModel.getAmount());
		model.setPayComponentOrder(soapModel.getPayComponentOrder());
		model.setAutoAddPayStructure(soapModel.getAutoAddPayStructure());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PayComponent> toModels(PayComponentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PayComponent> models = new ArrayList<PayComponent>(soapModels.length);

		for (PayComponentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.PayComponent"));

	public PayComponentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _componentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setComponentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _componentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PayComponent.class;
	}

	@Override
	public String getModelClassName() {
		return PayComponent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("componentId", getComponentId());
		attributes.put("employeeTypeId", getEmployeeTypeId());
		attributes.put("name", getName());
		attributes.put("abbreviation", getAbbreviation());
		attributes.put("taxStatus", getTaxStatus());
		attributes.put("payType", getPayType());
		attributes.put("componentType", getComponentType());
		attributes.put("componentValueFormula", getComponentValueFormula());
		attributes.put("partOfCtc", getPartOfCtc());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("islock", getIslock());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("amount", getAmount());
		attributes.put("payComponentOrder", getPayComponentOrder());
		attributes.put("autoAddPayStructure", getAutoAddPayStructure());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long componentId = (Long)attributes.get("componentId");

		if (componentId != null) {
			setComponentId(componentId);
		}

		Long employeeTypeId = (Long)attributes.get("employeeTypeId");

		if (employeeTypeId != null) {
			setEmployeeTypeId(employeeTypeId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String abbreviation = (String)attributes.get("abbreviation");

		if (abbreviation != null) {
			setAbbreviation(abbreviation);
		}

		Integer taxStatus = (Integer)attributes.get("taxStatus");

		if (taxStatus != null) {
			setTaxStatus(taxStatus);
		}

		String payType = (String)attributes.get("payType");

		if (payType != null) {
			setPayType(payType);
		}

		Integer componentType = (Integer)attributes.get("componentType");

		if (componentType != null) {
			setComponentType(componentType);
		}

		String componentValueFormula = (String)attributes.get(
				"componentValueFormula");

		if (componentValueFormula != null) {
			setComponentValueFormula(componentValueFormula);
		}

		Integer partOfCtc = (Integer)attributes.get("partOfCtc");

		if (partOfCtc != null) {
			setPartOfCtc(partOfCtc);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Long islock = (Long)attributes.get("islock");

		if (islock != null) {
			setIslock(islock);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long payComponentOrder = (Long)attributes.get("payComponentOrder");

		if (payComponentOrder != null) {
			setPayComponentOrder(payComponentOrder);
		}

		Integer autoAddPayStructure = (Integer)attributes.get(
				"autoAddPayStructure");

		if (autoAddPayStructure != null) {
			setAutoAddPayStructure(autoAddPayStructure);
		}
	}

	@JSON
	@Override
	public long getComponentId() {
		return _componentId;
	}

	@Override
	public void setComponentId(long componentId) {
		_columnBitmask |= COMPONENTID_COLUMN_BITMASK;

		if (!_setOriginalComponentId) {
			_setOriginalComponentId = true;

			_originalComponentId = _componentId;
		}

		_componentId = componentId;
	}

	public long getOriginalComponentId() {
		return _originalComponentId;
	}

	@JSON
	@Override
	public long getEmployeeTypeId() {
		return _employeeTypeId;
	}

	@Override
	public void setEmployeeTypeId(long employeeTypeId) {
		_employeeTypeId = employeeTypeId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getAbbreviation() {
		if (_abbreviation == null) {
			return "";
		}
		else {
			return _abbreviation;
		}
	}

	@Override
	public void setAbbreviation(String abbreviation) {
		_columnBitmask |= ABBREVIATION_COLUMN_BITMASK;

		if (_originalAbbreviation == null) {
			_originalAbbreviation = _abbreviation;
		}

		_abbreviation = abbreviation;
	}

	public String getOriginalAbbreviation() {
		return GetterUtil.getString(_originalAbbreviation);
	}

	@JSON
	@Override
	public int getTaxStatus() {
		return _taxStatus;
	}

	@Override
	public void setTaxStatus(int taxStatus) {
		_columnBitmask |= TAXSTATUS_COLUMN_BITMASK;

		if (!_setOriginalTaxStatus) {
			_setOriginalTaxStatus = true;

			_originalTaxStatus = _taxStatus;
		}

		_taxStatus = taxStatus;
	}

	public int getOriginalTaxStatus() {
		return _originalTaxStatus;
	}

	@JSON
	@Override
	public String getPayType() {
		if (_payType == null) {
			return "";
		}
		else {
			return _payType;
		}
	}

	@Override
	public void setPayType(String payType) {
		_columnBitmask |= PAYTYPE_COLUMN_BITMASK;

		if (_originalPayType == null) {
			_originalPayType = _payType;
		}

		_payType = payType;
	}

	public String getOriginalPayType() {
		return GetterUtil.getString(_originalPayType);
	}

	@JSON
	@Override
	public int getComponentType() {
		return _componentType;
	}

	@Override
	public void setComponentType(int componentType) {
		_componentType = componentType;
	}

	@JSON
	@Override
	public String getComponentValueFormula() {
		if (_componentValueFormula == null) {
			return "";
		}
		else {
			return _componentValueFormula;
		}
	}

	@Override
	public void setComponentValueFormula(String componentValueFormula) {
		_componentValueFormula = componentValueFormula;
	}

	@JSON
	@Override
	public int getPartOfCtc() {
		return _partOfCtc;
	}

	@Override
	public void setPartOfCtc(int partOfCtc) {
		_partOfCtc = partOfCtc;
	}

	@JSON
	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@JSON
	@Override
	public long getIslock() {
		return _islock;
	}

	@Override
	public void setIslock(long islock) {
		_islock = islock;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public long getPayComponentOrder() {
		return _payComponentOrder;
	}

	@Override
	public void setPayComponentOrder(long payComponentOrder) {
		_columnBitmask |= PAYCOMPONENTORDER_COLUMN_BITMASK;

		if (!_setOriginalPayComponentOrder) {
			_setOriginalPayComponentOrder = true;

			_originalPayComponentOrder = _payComponentOrder;
		}

		_payComponentOrder = payComponentOrder;
	}

	public long getOriginalPayComponentOrder() {
		return _originalPayComponentOrder;
	}

	@JSON
	@Override
	public int getAutoAddPayStructure() {
		return _autoAddPayStructure;
	}

	@Override
	public void setAutoAddPayStructure(int autoAddPayStructure) {
		_autoAddPayStructure = autoAddPayStructure;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PayComponent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PayComponent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PayComponent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PayComponentImpl payComponentImpl = new PayComponentImpl();

		payComponentImpl.setComponentId(getComponentId());
		payComponentImpl.setEmployeeTypeId(getEmployeeTypeId());
		payComponentImpl.setName(getName());
		payComponentImpl.setAbbreviation(getAbbreviation());
		payComponentImpl.setTaxStatus(getTaxStatus());
		payComponentImpl.setPayType(getPayType());
		payComponentImpl.setComponentType(getComponentType());
		payComponentImpl.setComponentValueFormula(getComponentValueFormula());
		payComponentImpl.setPartOfCtc(getPartOfCtc());
		payComponentImpl.setEffectiveDate(getEffectiveDate());
		payComponentImpl.setIslock(getIslock());
		payComponentImpl.setCreateDate(getCreateDate());
		payComponentImpl.setModifiedDate(getModifiedDate());
		payComponentImpl.setAmount(getAmount());
		payComponentImpl.setPayComponentOrder(getPayComponentOrder());
		payComponentImpl.setAutoAddPayStructure(getAutoAddPayStructure());

		payComponentImpl.resetOriginalValues();

		return payComponentImpl;
	}

	@Override
	public int compareTo(PayComponent payComponent) {
		long primaryKey = payComponent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PayComponent)) {
			return false;
		}

		PayComponent payComponent = (PayComponent)obj;

		long primaryKey = payComponent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PayComponentModelImpl payComponentModelImpl = this;

		payComponentModelImpl._originalComponentId = payComponentModelImpl._componentId;

		payComponentModelImpl._setOriginalComponentId = false;

		payComponentModelImpl._originalName = payComponentModelImpl._name;

		payComponentModelImpl._originalAbbreviation = payComponentModelImpl._abbreviation;

		payComponentModelImpl._originalTaxStatus = payComponentModelImpl._taxStatus;

		payComponentModelImpl._setOriginalTaxStatus = false;

		payComponentModelImpl._originalPayType = payComponentModelImpl._payType;

		payComponentModelImpl._setModifiedDate = false;

		payComponentModelImpl._originalPayComponentOrder = payComponentModelImpl._payComponentOrder;

		payComponentModelImpl._setOriginalPayComponentOrder = false;

		payComponentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PayComponent> toCacheModel() {
		PayComponentCacheModel payComponentCacheModel = new PayComponentCacheModel();

		payComponentCacheModel.componentId = getComponentId();

		payComponentCacheModel.employeeTypeId = getEmployeeTypeId();

		payComponentCacheModel.name = getName();

		String name = payComponentCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			payComponentCacheModel.name = null;
		}

		payComponentCacheModel.abbreviation = getAbbreviation();

		String abbreviation = payComponentCacheModel.abbreviation;

		if ((abbreviation != null) && (abbreviation.length() == 0)) {
			payComponentCacheModel.abbreviation = null;
		}

		payComponentCacheModel.taxStatus = getTaxStatus();

		payComponentCacheModel.payType = getPayType();

		String payType = payComponentCacheModel.payType;

		if ((payType != null) && (payType.length() == 0)) {
			payComponentCacheModel.payType = null;
		}

		payComponentCacheModel.componentType = getComponentType();

		payComponentCacheModel.componentValueFormula = getComponentValueFormula();

		String componentValueFormula = payComponentCacheModel.componentValueFormula;

		if ((componentValueFormula != null) &&
				(componentValueFormula.length() == 0)) {
			payComponentCacheModel.componentValueFormula = null;
		}

		payComponentCacheModel.partOfCtc = getPartOfCtc();

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			payComponentCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			payComponentCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		payComponentCacheModel.islock = getIslock();

		Date createDate = getCreateDate();

		if (createDate != null) {
			payComponentCacheModel.createDate = createDate.getTime();
		}
		else {
			payComponentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			payComponentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			payComponentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		payComponentCacheModel.amount = getAmount();

		payComponentCacheModel.payComponentOrder = getPayComponentOrder();

		payComponentCacheModel.autoAddPayStructure = getAutoAddPayStructure();

		return payComponentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{componentId=");
		sb.append(getComponentId());
		sb.append(", employeeTypeId=");
		sb.append(getEmployeeTypeId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", abbreviation=");
		sb.append(getAbbreviation());
		sb.append(", taxStatus=");
		sb.append(getTaxStatus());
		sb.append(", payType=");
		sb.append(getPayType());
		sb.append(", componentType=");
		sb.append(getComponentType());
		sb.append(", componentValueFormula=");
		sb.append(getComponentValueFormula());
		sb.append(", partOfCtc=");
		sb.append(getPartOfCtc());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", islock=");
		sb.append(getIslock());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", payComponentOrder=");
		sb.append(getPayComponentOrder());
		sb.append(", autoAddPayStructure=");
		sb.append(getAutoAddPayStructure());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.PayComponent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>componentId</column-name><column-value><![CDATA[");
		sb.append(getComponentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeTypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abbreviation</column-name><column-value><![CDATA[");
		sb.append(getAbbreviation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxStatus</column-name><column-value><![CDATA[");
		sb.append(getTaxStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payType</column-name><column-value><![CDATA[");
		sb.append(getPayType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentType</column-name><column-value><![CDATA[");
		sb.append(getComponentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentValueFormula</column-name><column-value><![CDATA[");
		sb.append(getComponentValueFormula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partOfCtc</column-name><column-value><![CDATA[");
		sb.append(getPartOfCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>islock</column-name><column-value><![CDATA[");
		sb.append(getIslock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payComponentOrder</column-name><column-value><![CDATA[");
		sb.append(getPayComponentOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autoAddPayStructure</column-name><column-value><![CDATA[");
		sb.append(getAutoAddPayStructure());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PayComponent.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PayComponent.class, ModelWrapper.class
		};
	private long _componentId;
	private long _originalComponentId;
	private boolean _setOriginalComponentId;
	private long _employeeTypeId;
	private String _name;
	private String _originalName;
	private String _abbreviation;
	private String _originalAbbreviation;
	private int _taxStatus;
	private int _originalTaxStatus;
	private boolean _setOriginalTaxStatus;
	private String _payType;
	private String _originalPayType;
	private int _componentType;
	private String _componentValueFormula;
	private int _partOfCtc;
	private Date _effectiveDate;
	private long _islock;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private double _amount;
	private long _payComponentOrder;
	private long _originalPayComponentOrder;
	private boolean _setOriginalPayComponentOrder;
	private int _autoAddPayStructure;
	private long _columnBitmask;
	private PayComponent _escapedModel;
}