/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.TaxProofFiles;
import com.liferay.famocom.erpcloud.model.TaxProofFilesModel;
import com.liferay.famocom.erpcloud.model.TaxProofFilesSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TaxProofFiles service. Represents a row in the &quot;taxProofFiles&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TaxProofFilesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaxProofFilesImpl}.
 * </p>
 *
 * @author Samaresh
 * @see TaxProofFilesImpl
 * @see TaxProofFiles
 * @see TaxProofFilesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TaxProofFilesModelImpl extends BaseModelImpl<TaxProofFiles>
	implements TaxProofFilesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tax proof files model instance should use the {@link TaxProofFiles} interface instead.
	 */
	public static final String TABLE_NAME = "taxProofFiles";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fileId", Types.BIGINT },
			{ "financialYear", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "taxDeclarationId", Types.BIGINT },
			{ "fileName", Types.VARCHAR },
			{ "fileOrigName", Types.VARCHAR },
			{ "filePath", Types.VARCHAR },
			{ "proofName", Types.VARCHAR },
			{ "uploadDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("financialYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taxDeclarationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileOrigName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filePath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proofName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table taxProofFiles (fileId LONG not null primary key,financialYear VARCHAR(75) null,companyId LONG,employeeId LONG,taxDeclarationId LONG,fileName VARCHAR(75) null,fileOrigName VARCHAR(75) null,filePath VARCHAR(75) null,proofName VARCHAR(75) null,uploadDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table taxProofFiles";
	public static final String ORDER_BY_JPQL = " ORDER BY taxProofFiles.fileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY taxProofFiles.fileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.TaxProofFiles"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.TaxProofFiles"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TaxProofFiles toModel(TaxProofFilesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TaxProofFiles model = new TaxProofFilesImpl();

		model.setFileId(soapModel.getFileId());
		model.setFinancialYear(soapModel.getFinancialYear());
		model.setCompanyId(soapModel.getCompanyId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setTaxDeclarationId(soapModel.getTaxDeclarationId());
		model.setFileName(soapModel.getFileName());
		model.setFileOrigName(soapModel.getFileOrigName());
		model.setFilePath(soapModel.getFilePath());
		model.setProofName(soapModel.getProofName());
		model.setUploadDate(soapModel.getUploadDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TaxProofFiles> toModels(TaxProofFilesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TaxProofFiles> models = new ArrayList<TaxProofFiles>(soapModels.length);

		for (TaxProofFilesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.TaxProofFiles"));

	public TaxProofFilesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TaxProofFiles.class;
	}

	@Override
	public String getModelClassName() {
		return TaxProofFiles.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileId", getFileId());
		attributes.put("financialYear", getFinancialYear());
		attributes.put("companyId", getCompanyId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("taxDeclarationId", getTaxDeclarationId());
		attributes.put("fileName", getFileName());
		attributes.put("fileOrigName", getFileOrigName());
		attributes.put("filePath", getFilePath());
		attributes.put("proofName", getProofName());
		attributes.put("uploadDate", getUploadDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		String financialYear = (String)attributes.get("financialYear");

		if (financialYear != null) {
			setFinancialYear(financialYear);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long taxDeclarationId = (Long)attributes.get("taxDeclarationId");

		if (taxDeclarationId != null) {
			setTaxDeclarationId(taxDeclarationId);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		String fileOrigName = (String)attributes.get("fileOrigName");

		if (fileOrigName != null) {
			setFileOrigName(fileOrigName);
		}

		String filePath = (String)attributes.get("filePath");

		if (filePath != null) {
			setFilePath(filePath);
		}

		String proofName = (String)attributes.get("proofName");

		if (proofName != null) {
			setProofName(proofName);
		}

		Date uploadDate = (Date)attributes.get("uploadDate");

		if (uploadDate != null) {
			setUploadDate(uploadDate);
		}
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		_fileId = fileId;
	}

	@JSON
	@Override
	public String getFinancialYear() {
		if (_financialYear == null) {
			return "";
		}
		else {
			return _financialYear;
		}
	}

	@Override
	public void setFinancialYear(String financialYear) {
		_financialYear = financialYear;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getTaxDeclarationId() {
		return _taxDeclarationId;
	}

	@Override
	public void setTaxDeclarationId(long taxDeclarationId) {
		_taxDeclarationId = taxDeclarationId;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@JSON
	@Override
	public String getFileOrigName() {
		if (_fileOrigName == null) {
			return "";
		}
		else {
			return _fileOrigName;
		}
	}

	@Override
	public void setFileOrigName(String fileOrigName) {
		_fileOrigName = fileOrigName;
	}

	@JSON
	@Override
	public String getFilePath() {
		if (_filePath == null) {
			return "";
		}
		else {
			return _filePath;
		}
	}

	@Override
	public void setFilePath(String filePath) {
		_filePath = filePath;
	}

	@JSON
	@Override
	public String getProofName() {
		if (_proofName == null) {
			return "";
		}
		else {
			return _proofName;
		}
	}

	@Override
	public void setProofName(String proofName) {
		_proofName = proofName;
	}

	@JSON
	@Override
	public Date getUploadDate() {
		return _uploadDate;
	}

	@Override
	public void setUploadDate(Date uploadDate) {
		_uploadDate = uploadDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TaxProofFiles.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TaxProofFiles toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TaxProofFiles)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaxProofFilesImpl taxProofFilesImpl = new TaxProofFilesImpl();

		taxProofFilesImpl.setFileId(getFileId());
		taxProofFilesImpl.setFinancialYear(getFinancialYear());
		taxProofFilesImpl.setCompanyId(getCompanyId());
		taxProofFilesImpl.setEmployeeId(getEmployeeId());
		taxProofFilesImpl.setTaxDeclarationId(getTaxDeclarationId());
		taxProofFilesImpl.setFileName(getFileName());
		taxProofFilesImpl.setFileOrigName(getFileOrigName());
		taxProofFilesImpl.setFilePath(getFilePath());
		taxProofFilesImpl.setProofName(getProofName());
		taxProofFilesImpl.setUploadDate(getUploadDate());

		taxProofFilesImpl.resetOriginalValues();

		return taxProofFilesImpl;
	}

	@Override
	public int compareTo(TaxProofFiles taxProofFiles) {
		long primaryKey = taxProofFiles.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TaxProofFiles)) {
			return false;
		}

		TaxProofFiles taxProofFiles = (TaxProofFiles)obj;

		long primaryKey = taxProofFiles.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TaxProofFiles> toCacheModel() {
		TaxProofFilesCacheModel taxProofFilesCacheModel = new TaxProofFilesCacheModel();

		taxProofFilesCacheModel.fileId = getFileId();

		taxProofFilesCacheModel.financialYear = getFinancialYear();

		String financialYear = taxProofFilesCacheModel.financialYear;

		if ((financialYear != null) && (financialYear.length() == 0)) {
			taxProofFilesCacheModel.financialYear = null;
		}

		taxProofFilesCacheModel.companyId = getCompanyId();

		taxProofFilesCacheModel.employeeId = getEmployeeId();

		taxProofFilesCacheModel.taxDeclarationId = getTaxDeclarationId();

		taxProofFilesCacheModel.fileName = getFileName();

		String fileName = taxProofFilesCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			taxProofFilesCacheModel.fileName = null;
		}

		taxProofFilesCacheModel.fileOrigName = getFileOrigName();

		String fileOrigName = taxProofFilesCacheModel.fileOrigName;

		if ((fileOrigName != null) && (fileOrigName.length() == 0)) {
			taxProofFilesCacheModel.fileOrigName = null;
		}

		taxProofFilesCacheModel.filePath = getFilePath();

		String filePath = taxProofFilesCacheModel.filePath;

		if ((filePath != null) && (filePath.length() == 0)) {
			taxProofFilesCacheModel.filePath = null;
		}

		taxProofFilesCacheModel.proofName = getProofName();

		String proofName = taxProofFilesCacheModel.proofName;

		if ((proofName != null) && (proofName.length() == 0)) {
			taxProofFilesCacheModel.proofName = null;
		}

		Date uploadDate = getUploadDate();

		if (uploadDate != null) {
			taxProofFilesCacheModel.uploadDate = uploadDate.getTime();
		}
		else {
			taxProofFilesCacheModel.uploadDate = Long.MIN_VALUE;
		}

		return taxProofFilesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{fileId=");
		sb.append(getFileId());
		sb.append(", financialYear=");
		sb.append(getFinancialYear());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", taxDeclarationId=");
		sb.append(getTaxDeclarationId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", fileOrigName=");
		sb.append(getFileOrigName());
		sb.append(", filePath=");
		sb.append(getFilePath());
		sb.append(", proofName=");
		sb.append(getProofName());
		sb.append(", uploadDate=");
		sb.append(getUploadDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.TaxProofFiles");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialYear</column-name><column-value><![CDATA[");
		sb.append(getFinancialYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxDeclarationId</column-name><column-value><![CDATA[");
		sb.append(getTaxDeclarationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileOrigName</column-name><column-value><![CDATA[");
		sb.append(getFileOrigName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filePath</column-name><column-value><![CDATA[");
		sb.append(getFilePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proofName</column-name><column-value><![CDATA[");
		sb.append(getProofName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadDate</column-name><column-value><![CDATA[");
		sb.append(getUploadDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TaxProofFiles.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TaxProofFiles.class, ModelWrapper.class
		};
	private long _fileId;
	private String _financialYear;
	private long _companyId;
	private long _employeeId;
	private long _taxDeclarationId;
	private String _fileName;
	private String _fileOrigName;
	private String _filePath;
	private String _proofName;
	private Date _uploadDate;
	private TaxProofFiles _escapedModel;
}