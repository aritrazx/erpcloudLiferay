/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ExpCategory;
import com.liferay.famocom.erpcloud.model.ExpCategoryModel;
import com.liferay.famocom.erpcloud.model.ExpCategorySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExpCategory service. Represents a row in the &quot;expCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExpCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpCategoryImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ExpCategoryImpl
 * @see ExpCategory
 * @see ExpCategoryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ExpCategoryModelImpl extends BaseModelImpl<ExpCategory>
	implements ExpCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a exp category model instance should use the {@link ExpCategory} interface instead.
	 */
	public static final String TABLE_NAME = "expCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "catId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "categoryName", Types.VARCHAR },
			{ "frequency", Types.VARCHAR },
			{ "salaryHead", Types.BIGINT },
			{ "finalApprovalRoleId", Types.BIGINT },
			{ "attachment", Types.BOOLEAN },
			{ "componentId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("catId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("frequency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salaryHead", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("finalApprovalRoleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attachment", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("componentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table expCategory (catId LONG not null primary key,companyId LONG,categoryName VARCHAR(75) null,frequency VARCHAR(75) null,salaryHead LONG,finalApprovalRoleId LONG,attachment BOOLEAN,componentId LONG)";
	public static final String TABLE_SQL_DROP = "drop table expCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY expCategory.catId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY expCategory.catId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ExpCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ExpCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExpCategory toModel(ExpCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExpCategory model = new ExpCategoryImpl();

		model.setCatId(soapModel.getCatId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCategoryName(soapModel.getCategoryName());
		model.setFrequency(soapModel.getFrequency());
		model.setSalaryHead(soapModel.getSalaryHead());
		model.setFinalApprovalRoleId(soapModel.getFinalApprovalRoleId());
		model.setAttachment(soapModel.isAttachment());
		model.setComponentId(soapModel.getComponentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExpCategory> toModels(ExpCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExpCategory> models = new ArrayList<ExpCategory>(soapModels.length);

		for (ExpCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ExpCategory"));

	public ExpCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExpCategory.class;
	}

	@Override
	public String getModelClassName() {
		return ExpCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("catId", getCatId());
		attributes.put("companyId", getCompanyId());
		attributes.put("categoryName", getCategoryName());
		attributes.put("frequency", getFrequency());
		attributes.put("salaryHead", getSalaryHead());
		attributes.put("finalApprovalRoleId", getFinalApprovalRoleId());
		attributes.put("attachment", isAttachment());
		attributes.put("componentId", getComponentId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long catId = (Long)attributes.get("catId");

		if (catId != null) {
			setCatId(catId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		String frequency = (String)attributes.get("frequency");

		if (frequency != null) {
			setFrequency(frequency);
		}

		Long salaryHead = (Long)attributes.get("salaryHead");

		if (salaryHead != null) {
			setSalaryHead(salaryHead);
		}

		Long finalApprovalRoleId = (Long)attributes.get("finalApprovalRoleId");

		if (finalApprovalRoleId != null) {
			setFinalApprovalRoleId(finalApprovalRoleId);
		}

		Boolean attachment = (Boolean)attributes.get("attachment");

		if (attachment != null) {
			setAttachment(attachment);
		}

		Long componentId = (Long)attributes.get("componentId");

		if (componentId != null) {
			setComponentId(componentId);
		}
	}

	@JSON
	@Override
	public long getCatId() {
		return _catId;
	}

	@Override
	public void setCatId(long catId) {
		_catId = catId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return "";
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_categoryName = categoryName;
	}

	@JSON
	@Override
	public String getFrequency() {
		if (_frequency == null) {
			return "";
		}
		else {
			return _frequency;
		}
	}

	@Override
	public void setFrequency(String frequency) {
		_frequency = frequency;
	}

	@JSON
	@Override
	public long getSalaryHead() {
		return _salaryHead;
	}

	@Override
	public void setSalaryHead(long salaryHead) {
		_salaryHead = salaryHead;
	}

	@JSON
	@Override
	public long getFinalApprovalRoleId() {
		return _finalApprovalRoleId;
	}

	@Override
	public void setFinalApprovalRoleId(long finalApprovalRoleId) {
		_finalApprovalRoleId = finalApprovalRoleId;
	}

	@JSON
	@Override
	public boolean getAttachment() {
		return _attachment;
	}

	@JSON
	@Override
	public boolean isAttachment() {
		return _attachment;
	}

	@Override
	public void setAttachment(boolean attachment) {
		_attachment = attachment;
	}

	@JSON
	@Override
	public long getComponentId() {
		return _componentId;
	}

	@Override
	public void setComponentId(long componentId) {
		_componentId = componentId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExpCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExpCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExpCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpCategoryImpl expCategoryImpl = new ExpCategoryImpl();

		expCategoryImpl.setCatId(getCatId());
		expCategoryImpl.setCompanyId(getCompanyId());
		expCategoryImpl.setCategoryName(getCategoryName());
		expCategoryImpl.setFrequency(getFrequency());
		expCategoryImpl.setSalaryHead(getSalaryHead());
		expCategoryImpl.setFinalApprovalRoleId(getFinalApprovalRoleId());
		expCategoryImpl.setAttachment(isAttachment());
		expCategoryImpl.setComponentId(getComponentId());

		expCategoryImpl.resetOriginalValues();

		return expCategoryImpl;
	}

	@Override
	public int compareTo(ExpCategory expCategory) {
		long primaryKey = expCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExpCategory)) {
			return false;
		}

		ExpCategory expCategory = (ExpCategory)obj;

		long primaryKey = expCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ExpCategory> toCacheModel() {
		ExpCategoryCacheModel expCategoryCacheModel = new ExpCategoryCacheModel();

		expCategoryCacheModel.catId = getCatId();

		expCategoryCacheModel.companyId = getCompanyId();

		expCategoryCacheModel.categoryName = getCategoryName();

		String categoryName = expCategoryCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			expCategoryCacheModel.categoryName = null;
		}

		expCategoryCacheModel.frequency = getFrequency();

		String frequency = expCategoryCacheModel.frequency;

		if ((frequency != null) && (frequency.length() == 0)) {
			expCategoryCacheModel.frequency = null;
		}

		expCategoryCacheModel.salaryHead = getSalaryHead();

		expCategoryCacheModel.finalApprovalRoleId = getFinalApprovalRoleId();

		expCategoryCacheModel.attachment = isAttachment();

		expCategoryCacheModel.componentId = getComponentId();

		return expCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{catId=");
		sb.append(getCatId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", frequency=");
		sb.append(getFrequency());
		sb.append(", salaryHead=");
		sb.append(getSalaryHead());
		sb.append(", finalApprovalRoleId=");
		sb.append(getFinalApprovalRoleId());
		sb.append(", attachment=");
		sb.append(isAttachment());
		sb.append(", componentId=");
		sb.append(getComponentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ExpCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>catId</column-name><column-value><![CDATA[");
		sb.append(getCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frequency</column-name><column-value><![CDATA[");
		sb.append(getFrequency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salaryHead</column-name><column-value><![CDATA[");
		sb.append(getSalaryHead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalApprovalRoleId</column-name><column-value><![CDATA[");
		sb.append(getFinalApprovalRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachment</column-name><column-value><![CDATA[");
		sb.append(isAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentId</column-name><column-value><![CDATA[");
		sb.append(getComponentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExpCategory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExpCategory.class, ModelWrapper.class
		};
	private long _catId;
	private long _companyId;
	private String _categoryName;
	private String _frequency;
	private long _salaryHead;
	private long _finalApprovalRoleId;
	private boolean _attachment;
	private long _componentId;
	private ExpCategory _escapedModel;
}