/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.Resignation;
import com.liferay.famocom.erpcloud.model.ResignationModel;
import com.liferay.famocom.erpcloud.model.ResignationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Resignation service. Represents a row in the &quot;Resignation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ResignationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResignationImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ResignationImpl
 * @see Resignation
 * @see ResignationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ResignationModelImpl extends BaseModelImpl<Resignation>
	implements ResignationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a resignation model instance should use the {@link Resignation} interface instead.
	 */
	public static final String TABLE_NAME = "Resignation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ResignationId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "resignationDate", Types.TIMESTAMP },
			{ "resignationSubDate", Types.TIMESTAMP },
			{ "Description", Types.VARCHAR },
			{ "managerId", Types.BIGINT },
			{ "mancomment", Types.VARCHAR },
			{ "mancommentdate", Types.TIMESTAMP },
			{ "status", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ResignationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resignationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("resignationSubDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mancomment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mancommentdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Resignation (ResignationId LONG not null primary key,employeeId LONG,resignationDate DATE null,resignationSubDate DATE null,Description VARCHAR(75) null,managerId LONG,mancomment VARCHAR(75) null,mancommentdate DATE null,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Resignation";
	public static final String ORDER_BY_JPQL = " ORDER BY resignation.ResignationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Resignation.ResignationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.Resignation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.Resignation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Resignation toModel(ResignationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Resignation model = new ResignationImpl();

		model.setResignationId(soapModel.getResignationId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setResignationDate(soapModel.getResignationDate());
		model.setResignationSubDate(soapModel.getResignationSubDate());
		model.setDescription(soapModel.getDescription());
		model.setManagerId(soapModel.getManagerId());
		model.setMancomment(soapModel.getMancomment());
		model.setMancommentdate(soapModel.getMancommentdate());
		model.setStatus(soapModel.isStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Resignation> toModels(ResignationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Resignation> models = new ArrayList<Resignation>(soapModels.length);

		for (ResignationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.Resignation"));

	public ResignationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ResignationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setResignationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ResignationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Resignation.class;
	}

	@Override
	public String getModelClassName() {
		return Resignation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ResignationId", getResignationId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("resignationDate", getResignationDate());
		attributes.put("resignationSubDate", getResignationSubDate());
		attributes.put("Description", getDescription());
		attributes.put("managerId", getManagerId());
		attributes.put("mancomment", getMancomment());
		attributes.put("mancommentdate", getMancommentdate());
		attributes.put("status", isStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ResignationId = (Long)attributes.get("ResignationId");

		if (ResignationId != null) {
			setResignationId(ResignationId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Date resignationDate = (Date)attributes.get("resignationDate");

		if (resignationDate != null) {
			setResignationDate(resignationDate);
		}

		Date resignationSubDate = (Date)attributes.get("resignationSubDate");

		if (resignationSubDate != null) {
			setResignationSubDate(resignationSubDate);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}

		Long managerId = (Long)attributes.get("managerId");

		if (managerId != null) {
			setManagerId(managerId);
		}

		String mancomment = (String)attributes.get("mancomment");

		if (mancomment != null) {
			setMancomment(mancomment);
		}

		Date mancommentdate = (Date)attributes.get("mancommentdate");

		if (mancommentdate != null) {
			setMancommentdate(mancommentdate);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getResignationId() {
		return _ResignationId;
	}

	@Override
	public void setResignationId(long ResignationId) {
		_ResignationId = ResignationId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public Date getResignationDate() {
		return _resignationDate;
	}

	@Override
	public void setResignationDate(Date resignationDate) {
		_resignationDate = resignationDate;
	}

	@JSON
	@Override
	public Date getResignationSubDate() {
		return _resignationSubDate;
	}

	@Override
	public void setResignationSubDate(Date resignationSubDate) {
		_resignationSubDate = resignationSubDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_Description == null) {
			return "";
		}
		else {
			return _Description;
		}
	}

	@Override
	public void setDescription(String Description) {
		_Description = Description;
	}

	@JSON
	@Override
	public long getManagerId() {
		return _managerId;
	}

	@Override
	public void setManagerId(long managerId) {
		_managerId = managerId;
	}

	@JSON
	@Override
	public String getMancomment() {
		if (_mancomment == null) {
			return "";
		}
		else {
			return _mancomment;
		}
	}

	@Override
	public void setMancomment(String mancomment) {
		_mancomment = mancomment;
	}

	@JSON
	@Override
	public Date getMancommentdate() {
		return _mancommentdate;
	}

	@Override
	public void setMancommentdate(Date mancommentdate) {
		_mancommentdate = mancommentdate;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@JSON
	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Resignation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Resignation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Resignation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResignationImpl resignationImpl = new ResignationImpl();

		resignationImpl.setResignationId(getResignationId());
		resignationImpl.setEmployeeId(getEmployeeId());
		resignationImpl.setResignationDate(getResignationDate());
		resignationImpl.setResignationSubDate(getResignationSubDate());
		resignationImpl.setDescription(getDescription());
		resignationImpl.setManagerId(getManagerId());
		resignationImpl.setMancomment(getMancomment());
		resignationImpl.setMancommentdate(getMancommentdate());
		resignationImpl.setStatus(isStatus());

		resignationImpl.resetOriginalValues();

		return resignationImpl;
	}

	@Override
	public int compareTo(Resignation resignation) {
		long primaryKey = resignation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Resignation)) {
			return false;
		}

		Resignation resignation = (Resignation)obj;

		long primaryKey = resignation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Resignation> toCacheModel() {
		ResignationCacheModel resignationCacheModel = new ResignationCacheModel();

		resignationCacheModel.ResignationId = getResignationId();

		resignationCacheModel.employeeId = getEmployeeId();

		Date resignationDate = getResignationDate();

		if (resignationDate != null) {
			resignationCacheModel.resignationDate = resignationDate.getTime();
		}
		else {
			resignationCacheModel.resignationDate = Long.MIN_VALUE;
		}

		Date resignationSubDate = getResignationSubDate();

		if (resignationSubDate != null) {
			resignationCacheModel.resignationSubDate = resignationSubDate.getTime();
		}
		else {
			resignationCacheModel.resignationSubDate = Long.MIN_VALUE;
		}

		resignationCacheModel.Description = getDescription();

		String Description = resignationCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			resignationCacheModel.Description = null;
		}

		resignationCacheModel.managerId = getManagerId();

		resignationCacheModel.mancomment = getMancomment();

		String mancomment = resignationCacheModel.mancomment;

		if ((mancomment != null) && (mancomment.length() == 0)) {
			resignationCacheModel.mancomment = null;
		}

		Date mancommentdate = getMancommentdate();

		if (mancommentdate != null) {
			resignationCacheModel.mancommentdate = mancommentdate.getTime();
		}
		else {
			resignationCacheModel.mancommentdate = Long.MIN_VALUE;
		}

		resignationCacheModel.status = isStatus();

		return resignationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{ResignationId=");
		sb.append(getResignationId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", resignationDate=");
		sb.append(getResignationDate());
		sb.append(", resignationSubDate=");
		sb.append(getResignationSubDate());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append(", managerId=");
		sb.append(getManagerId());
		sb.append(", mancomment=");
		sb.append(getMancomment());
		sb.append(", mancommentdate=");
		sb.append(getMancommentdate());
		sb.append(", status=");
		sb.append(isStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.Resignation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ResignationId</column-name><column-value><![CDATA[");
		sb.append(getResignationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resignationDate</column-name><column-value><![CDATA[");
		sb.append(getResignationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resignationSubDate</column-name><column-value><![CDATA[");
		sb.append(getResignationSubDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerId</column-name><column-value><![CDATA[");
		sb.append(getManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mancomment</column-name><column-value><![CDATA[");
		sb.append(getMancomment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mancommentdate</column-name><column-value><![CDATA[");
		sb.append(getMancommentdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(isStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Resignation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Resignation.class, ModelWrapper.class
		};
	private long _ResignationId;
	private long _employeeId;
	private Date _resignationDate;
	private Date _resignationSubDate;
	private String _Description;
	private long _managerId;
	private String _mancomment;
	private Date _mancommentdate;
	private boolean _status;
	private Resignation _escapedModel;
}