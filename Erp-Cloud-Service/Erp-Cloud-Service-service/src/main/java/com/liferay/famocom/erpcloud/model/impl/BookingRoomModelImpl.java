/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.BookingRoom;
import com.liferay.famocom.erpcloud.model.BookingRoomModel;
import com.liferay.famocom.erpcloud.model.BookingRoomSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BookingRoom service. Represents a row in the &quot;BookingRoom&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BookingRoomModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookingRoomImpl}.
 * </p>
 *
 * @author Samaresh
 * @see BookingRoomImpl
 * @see BookingRoom
 * @see BookingRoomModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BookingRoomModelImpl extends BaseModelImpl<BookingRoom>
	implements BookingRoomModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a booking room model instance should use the {@link BookingRoom} interface instead.
	 */
	public static final String TABLE_NAME = "BookingRoom";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookingId", Types.BIGINT },
			{ "roomId", Types.BIGINT },
			{ "bookingDate", Types.TIMESTAMP },
			{ "fromTime", Types.VARCHAR },
			{ "toTime", Types.VARCHAR },
			{ "bookedBy", Types.BIGINT },
			{ "note", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bookingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table BookingRoom (bookingId LONG not null primary key,roomId LONG,bookingDate DATE null,fromTime VARCHAR(75) null,toTime VARCHAR(75) null,bookedBy LONG,note VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BookingRoom";
	public static final String ORDER_BY_JPQL = " ORDER BY bookingRoom.bookingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BookingRoom.bookingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.BookingRoom"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.BookingRoom"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BookingRoom toModel(BookingRoomSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BookingRoom model = new BookingRoomImpl();

		model.setBookingId(soapModel.getBookingId());
		model.setRoomId(soapModel.getRoomId());
		model.setBookingDate(soapModel.getBookingDate());
		model.setFromTime(soapModel.getFromTime());
		model.setToTime(soapModel.getToTime());
		model.setBookedBy(soapModel.getBookedBy());
		model.setNote(soapModel.getNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BookingRoom> toModels(BookingRoomSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BookingRoom> models = new ArrayList<BookingRoom>(soapModels.length);

		for (BookingRoomSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.BookingRoom"));

	public BookingRoomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BookingRoom.class;
	}

	@Override
	public String getModelClassName() {
		return BookingRoom.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bookingId", getBookingId());
		attributes.put("roomId", getRoomId());
		attributes.put("bookingDate", getBookingDate());
		attributes.put("fromTime", getFromTime());
		attributes.put("toTime", getToTime());
		attributes.put("bookedBy", getBookedBy());
		attributes.put("note", getNote());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bookingId = (Long)attributes.get("bookingId");

		if (bookingId != null) {
			setBookingId(bookingId);
		}

		Long roomId = (Long)attributes.get("roomId");

		if (roomId != null) {
			setRoomId(roomId);
		}

		Date bookingDate = (Date)attributes.get("bookingDate");

		if (bookingDate != null) {
			setBookingDate(bookingDate);
		}

		String fromTime = (String)attributes.get("fromTime");

		if (fromTime != null) {
			setFromTime(fromTime);
		}

		String toTime = (String)attributes.get("toTime");

		if (toTime != null) {
			setToTime(toTime);
		}

		Long bookedBy = (Long)attributes.get("bookedBy");

		if (bookedBy != null) {
			setBookedBy(bookedBy);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@JSON
	@Override
	public long getBookingId() {
		return _bookingId;
	}

	@Override
	public void setBookingId(long bookingId) {
		_bookingId = bookingId;
	}

	@JSON
	@Override
	public long getRoomId() {
		return _roomId;
	}

	@Override
	public void setRoomId(long roomId) {
		_roomId = roomId;
	}

	@JSON
	@Override
	public Date getBookingDate() {
		return _bookingDate;
	}

	@Override
	public void setBookingDate(Date bookingDate) {
		_bookingDate = bookingDate;
	}

	@JSON
	@Override
	public String getFromTime() {
		if (_fromTime == null) {
			return "";
		}
		else {
			return _fromTime;
		}
	}

	@Override
	public void setFromTime(String fromTime) {
		_fromTime = fromTime;
	}

	@JSON
	@Override
	public String getToTime() {
		if (_toTime == null) {
			return "";
		}
		else {
			return _toTime;
		}
	}

	@Override
	public void setToTime(String toTime) {
		_toTime = toTime;
	}

	@JSON
	@Override
	public long getBookedBy() {
		return _bookedBy;
	}

	@Override
	public void setBookedBy(long bookedBy) {
		_bookedBy = bookedBy;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BookingRoom.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BookingRoom toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BookingRoom)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookingRoomImpl bookingRoomImpl = new BookingRoomImpl();

		bookingRoomImpl.setBookingId(getBookingId());
		bookingRoomImpl.setRoomId(getRoomId());
		bookingRoomImpl.setBookingDate(getBookingDate());
		bookingRoomImpl.setFromTime(getFromTime());
		bookingRoomImpl.setToTime(getToTime());
		bookingRoomImpl.setBookedBy(getBookedBy());
		bookingRoomImpl.setNote(getNote());

		bookingRoomImpl.resetOriginalValues();

		return bookingRoomImpl;
	}

	@Override
	public int compareTo(BookingRoom bookingRoom) {
		long primaryKey = bookingRoom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BookingRoom)) {
			return false;
		}

		BookingRoom bookingRoom = (BookingRoom)obj;

		long primaryKey = bookingRoom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BookingRoom> toCacheModel() {
		BookingRoomCacheModel bookingRoomCacheModel = new BookingRoomCacheModel();

		bookingRoomCacheModel.bookingId = getBookingId();

		bookingRoomCacheModel.roomId = getRoomId();

		Date bookingDate = getBookingDate();

		if (bookingDate != null) {
			bookingRoomCacheModel.bookingDate = bookingDate.getTime();
		}
		else {
			bookingRoomCacheModel.bookingDate = Long.MIN_VALUE;
		}

		bookingRoomCacheModel.fromTime = getFromTime();

		String fromTime = bookingRoomCacheModel.fromTime;

		if ((fromTime != null) && (fromTime.length() == 0)) {
			bookingRoomCacheModel.fromTime = null;
		}

		bookingRoomCacheModel.toTime = getToTime();

		String toTime = bookingRoomCacheModel.toTime;

		if ((toTime != null) && (toTime.length() == 0)) {
			bookingRoomCacheModel.toTime = null;
		}

		bookingRoomCacheModel.bookedBy = getBookedBy();

		bookingRoomCacheModel.note = getNote();

		String note = bookingRoomCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			bookingRoomCacheModel.note = null;
		}

		return bookingRoomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{bookingId=");
		sb.append(getBookingId());
		sb.append(", roomId=");
		sb.append(getRoomId());
		sb.append(", bookingDate=");
		sb.append(getBookingDate());
		sb.append(", fromTime=");
		sb.append(getFromTime());
		sb.append(", toTime=");
		sb.append(getToTime());
		sb.append(", bookedBy=");
		sb.append(getBookedBy());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.BookingRoom");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookingId</column-name><column-value><![CDATA[");
		sb.append(getBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookingDate</column-name><column-value><![CDATA[");
		sb.append(getBookingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromTime</column-name><column-value><![CDATA[");
		sb.append(getFromTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toTime</column-name><column-value><![CDATA[");
		sb.append(getToTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookedBy</column-name><column-value><![CDATA[");
		sb.append(getBookedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BookingRoom.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BookingRoom.class, ModelWrapper.class
		};
	private long _bookingId;
	private long _roomId;
	private Date _bookingDate;
	private String _fromTime;
	private String _toTime;
	private long _bookedBy;
	private String _note;
	private BookingRoom _escapedModel;
}