/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.EmployeeDocumentUpload;
import com.liferay.famocom.erpcloud.model.EmployeeDocumentUploadModel;
import com.liferay.famocom.erpcloud.model.EmployeeDocumentUploadSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeDocumentUpload service. Represents a row in the &quot;employeeDocumentUpload&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeDocumentUploadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDocumentUploadImpl}.
 * </p>
 *
 * @author Samaresh
 * @see EmployeeDocumentUploadImpl
 * @see EmployeeDocumentUpload
 * @see EmployeeDocumentUploadModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmployeeDocumentUploadModelImpl extends BaseModelImpl<EmployeeDocumentUpload>
	implements EmployeeDocumentUploadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee document upload model instance should use the {@link EmployeeDocumentUpload} interface instead.
	 */
	public static final String TABLE_NAME = "employeeDocumentUpload";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empDocumentId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "travelDeskDetailsId", Types.BIGINT },
			{ "documentName", Types.VARCHAR },
			{ "documentPath", Types.VARCHAR },
			{ "uploadDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("empDocumentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("travelDeskDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table employeeDocumentUpload (empDocumentId LONG not null primary key,employeeId LONG,companyId LONG,fileEntryId LONG,travelDeskDetailsId LONG,documentName VARCHAR(75) null,documentPath VARCHAR(75) null,uploadDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table employeeDocumentUpload";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeDocumentUpload.empDocumentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY employeeDocumentUpload.empDocumentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.EmployeeDocumentUpload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.EmployeeDocumentUpload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeDocumentUpload toModel(
		EmployeeDocumentUploadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeDocumentUpload model = new EmployeeDocumentUploadImpl();

		model.setEmpDocumentId(soapModel.getEmpDocumentId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setTravelDeskDetailsId(soapModel.getTravelDeskDetailsId());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentPath(soapModel.getDocumentPath());
		model.setUploadDate(soapModel.getUploadDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeDocumentUpload> toModels(
		EmployeeDocumentUploadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeDocumentUpload> models = new ArrayList<EmployeeDocumentUpload>(soapModels.length);

		for (EmployeeDocumentUploadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.EmployeeDocumentUpload"));

	public EmployeeDocumentUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empDocumentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpDocumentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empDocumentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeDocumentUpload.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeDocumentUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empDocumentId", getEmpDocumentId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("travelDeskDetailsId", getTravelDeskDetailsId());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentPath", getDocumentPath());
		attributes.put("uploadDate", getUploadDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empDocumentId = (Long)attributes.get("empDocumentId");

		if (empDocumentId != null) {
			setEmpDocumentId(empDocumentId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Long travelDeskDetailsId = (Long)attributes.get("travelDeskDetailsId");

		if (travelDeskDetailsId != null) {
			setTravelDeskDetailsId(travelDeskDetailsId);
		}

		String documentName = (String)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		String documentPath = (String)attributes.get("documentPath");

		if (documentPath != null) {
			setDocumentPath(documentPath);
		}

		Date uploadDate = (Date)attributes.get("uploadDate");

		if (uploadDate != null) {
			setUploadDate(uploadDate);
		}
	}

	@JSON
	@Override
	public long getEmpDocumentId() {
		return _empDocumentId;
	}

	@Override
	public void setEmpDocumentId(long empDocumentId) {
		_empDocumentId = empDocumentId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public long getTravelDeskDetailsId() {
		return _travelDeskDetailsId;
	}

	@Override
	public void setTravelDeskDetailsId(long travelDeskDetailsId) {
		_travelDeskDetailsId = travelDeskDetailsId;
	}

	@JSON
	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		_documentName = documentName;
	}

	@JSON
	@Override
	public String getDocumentPath() {
		if (_documentPath == null) {
			return "";
		}
		else {
			return _documentPath;
		}
	}

	@Override
	public void setDocumentPath(String documentPath) {
		_documentPath = documentPath;
	}

	@JSON
	@Override
	public Date getUploadDate() {
		return _uploadDate;
	}

	@Override
	public void setUploadDate(Date uploadDate) {
		_uploadDate = uploadDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmployeeDocumentUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeDocumentUpload toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeDocumentUpload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeDocumentUploadImpl employeeDocumentUploadImpl = new EmployeeDocumentUploadImpl();

		employeeDocumentUploadImpl.setEmpDocumentId(getEmpDocumentId());
		employeeDocumentUploadImpl.setEmployeeId(getEmployeeId());
		employeeDocumentUploadImpl.setCompanyId(getCompanyId());
		employeeDocumentUploadImpl.setFileEntryId(getFileEntryId());
		employeeDocumentUploadImpl.setTravelDeskDetailsId(getTravelDeskDetailsId());
		employeeDocumentUploadImpl.setDocumentName(getDocumentName());
		employeeDocumentUploadImpl.setDocumentPath(getDocumentPath());
		employeeDocumentUploadImpl.setUploadDate(getUploadDate());

		employeeDocumentUploadImpl.resetOriginalValues();

		return employeeDocumentUploadImpl;
	}

	@Override
	public int compareTo(EmployeeDocumentUpload employeeDocumentUpload) {
		long primaryKey = employeeDocumentUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeDocumentUpload)) {
			return false;
		}

		EmployeeDocumentUpload employeeDocumentUpload = (EmployeeDocumentUpload)obj;

		long primaryKey = employeeDocumentUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EmployeeDocumentUpload> toCacheModel() {
		EmployeeDocumentUploadCacheModel employeeDocumentUploadCacheModel = new EmployeeDocumentUploadCacheModel();

		employeeDocumentUploadCacheModel.empDocumentId = getEmpDocumentId();

		employeeDocumentUploadCacheModel.employeeId = getEmployeeId();

		employeeDocumentUploadCacheModel.companyId = getCompanyId();

		employeeDocumentUploadCacheModel.fileEntryId = getFileEntryId();

		employeeDocumentUploadCacheModel.travelDeskDetailsId = getTravelDeskDetailsId();

		employeeDocumentUploadCacheModel.documentName = getDocumentName();

		String documentName = employeeDocumentUploadCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			employeeDocumentUploadCacheModel.documentName = null;
		}

		employeeDocumentUploadCacheModel.documentPath = getDocumentPath();

		String documentPath = employeeDocumentUploadCacheModel.documentPath;

		if ((documentPath != null) && (documentPath.length() == 0)) {
			employeeDocumentUploadCacheModel.documentPath = null;
		}

		Date uploadDate = getUploadDate();

		if (uploadDate != null) {
			employeeDocumentUploadCacheModel.uploadDate = uploadDate.getTime();
		}
		else {
			employeeDocumentUploadCacheModel.uploadDate = Long.MIN_VALUE;
		}

		return employeeDocumentUploadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{empDocumentId=");
		sb.append(getEmpDocumentId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", travelDeskDetailsId=");
		sb.append(getTravelDeskDetailsId());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentPath=");
		sb.append(getDocumentPath());
		sb.append(", uploadDate=");
		sb.append(getUploadDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.EmployeeDocumentUpload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empDocumentId</column-name><column-value><![CDATA[");
		sb.append(getEmpDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>travelDeskDetailsId</column-name><column-value><![CDATA[");
		sb.append(getTravelDeskDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentPath</column-name><column-value><![CDATA[");
		sb.append(getDocumentPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadDate</column-name><column-value><![CDATA[");
		sb.append(getUploadDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmployeeDocumentUpload.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeDocumentUpload.class, ModelWrapper.class
		};
	private long _empDocumentId;
	private long _employeeId;
	private long _companyId;
	private long _fileEntryId;
	private long _travelDeskDetailsId;
	private String _documentName;
	private String _documentPath;
	private Date _uploadDate;
	private EmployeeDocumentUpload _escapedModel;
}