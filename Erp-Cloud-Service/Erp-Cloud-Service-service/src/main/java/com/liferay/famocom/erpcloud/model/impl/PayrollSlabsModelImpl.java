/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.PayrollSlabs;
import com.liferay.famocom.erpcloud.model.PayrollSlabsModel;
import com.liferay.famocom.erpcloud.model.PayrollSlabsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PayrollSlabs service. Represents a row in the &quot;payrollSlabs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PayrollSlabsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PayrollSlabsImpl}.
 * </p>
 *
 * @author Samaresh
 * @see PayrollSlabsImpl
 * @see PayrollSlabs
 * @see PayrollSlabsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PayrollSlabsModelImpl extends BaseModelImpl<PayrollSlabs>
	implements PayrollSlabsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payroll slabs model instance should use the {@link PayrollSlabs} interface instead.
	 */
	public static final String TABLE_NAME = "payrollSlabs";
	public static final Object[][] TABLE_COLUMNS = {
			{ "payrollSlabsId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "appraisalSettingId", Types.BIGINT },
			{ "ratingId", Types.BIGINT },
			{ "payrollPercentage", Types.DOUBLE },
			{ "bonusPercentage", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("payrollSlabsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ratingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payrollPercentage", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("bonusPercentage", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table payrollSlabs (payrollSlabsId LONG not null primary key,companyId LONG,appraisalSettingId LONG,ratingId LONG,payrollPercentage DOUBLE,bonusPercentage DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table payrollSlabs";
	public static final String ORDER_BY_JPQL = " ORDER BY payrollSlabs.payrollSlabsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY payrollSlabs.payrollSlabsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.PayrollSlabs"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.PayrollSlabs"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.PayrollSlabs"),
			true);
	public static final long APPRAISALSETTINGID_COLUMN_BITMASK = 1L;
	public static final long RATINGID_COLUMN_BITMASK = 2L;
	public static final long PAYROLLSLABSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PayrollSlabs toModel(PayrollSlabsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PayrollSlabs model = new PayrollSlabsImpl();

		model.setPayrollSlabsId(soapModel.getPayrollSlabsId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAppraisalSettingId(soapModel.getAppraisalSettingId());
		model.setRatingId(soapModel.getRatingId());
		model.setPayrollPercentage(soapModel.getPayrollPercentage());
		model.setBonusPercentage(soapModel.getBonusPercentage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PayrollSlabs> toModels(PayrollSlabsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PayrollSlabs> models = new ArrayList<PayrollSlabs>(soapModels.length);

		for (PayrollSlabsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.PayrollSlabs"));

	public PayrollSlabsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _payrollSlabsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPayrollSlabsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _payrollSlabsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PayrollSlabs.class;
	}

	@Override
	public String getModelClassName() {
		return PayrollSlabs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("payrollSlabsId", getPayrollSlabsId());
		attributes.put("companyId", getCompanyId());
		attributes.put("appraisalSettingId", getAppraisalSettingId());
		attributes.put("ratingId", getRatingId());
		attributes.put("payrollPercentage", getPayrollPercentage());
		attributes.put("bonusPercentage", getBonusPercentage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long payrollSlabsId = (Long)attributes.get("payrollSlabsId");

		if (payrollSlabsId != null) {
			setPayrollSlabsId(payrollSlabsId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long appraisalSettingId = (Long)attributes.get("appraisalSettingId");

		if (appraisalSettingId != null) {
			setAppraisalSettingId(appraisalSettingId);
		}

		Long ratingId = (Long)attributes.get("ratingId");

		if (ratingId != null) {
			setRatingId(ratingId);
		}

		Double payrollPercentage = (Double)attributes.get("payrollPercentage");

		if (payrollPercentage != null) {
			setPayrollPercentage(payrollPercentage);
		}

		Double bonusPercentage = (Double)attributes.get("bonusPercentage");

		if (bonusPercentage != null) {
			setBonusPercentage(bonusPercentage);
		}
	}

	@JSON
	@Override
	public long getPayrollSlabsId() {
		return _payrollSlabsId;
	}

	@Override
	public void setPayrollSlabsId(long payrollSlabsId) {
		_payrollSlabsId = payrollSlabsId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getAppraisalSettingId() {
		return _appraisalSettingId;
	}

	@Override
	public void setAppraisalSettingId(long appraisalSettingId) {
		_columnBitmask |= APPRAISALSETTINGID_COLUMN_BITMASK;

		if (!_setOriginalAppraisalSettingId) {
			_setOriginalAppraisalSettingId = true;

			_originalAppraisalSettingId = _appraisalSettingId;
		}

		_appraisalSettingId = appraisalSettingId;
	}

	public long getOriginalAppraisalSettingId() {
		return _originalAppraisalSettingId;
	}

	@JSON
	@Override
	public long getRatingId() {
		return _ratingId;
	}

	@Override
	public void setRatingId(long ratingId) {
		_columnBitmask |= RATINGID_COLUMN_BITMASK;

		if (!_setOriginalRatingId) {
			_setOriginalRatingId = true;

			_originalRatingId = _ratingId;
		}

		_ratingId = ratingId;
	}

	public long getOriginalRatingId() {
		return _originalRatingId;
	}

	@JSON
	@Override
	public double getPayrollPercentage() {
		return _payrollPercentage;
	}

	@Override
	public void setPayrollPercentage(double payrollPercentage) {
		_payrollPercentage = payrollPercentage;
	}

	@JSON
	@Override
	public double getBonusPercentage() {
		return _bonusPercentage;
	}

	@Override
	public void setBonusPercentage(double bonusPercentage) {
		_bonusPercentage = bonusPercentage;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PayrollSlabs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PayrollSlabs toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PayrollSlabs)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PayrollSlabsImpl payrollSlabsImpl = new PayrollSlabsImpl();

		payrollSlabsImpl.setPayrollSlabsId(getPayrollSlabsId());
		payrollSlabsImpl.setCompanyId(getCompanyId());
		payrollSlabsImpl.setAppraisalSettingId(getAppraisalSettingId());
		payrollSlabsImpl.setRatingId(getRatingId());
		payrollSlabsImpl.setPayrollPercentage(getPayrollPercentage());
		payrollSlabsImpl.setBonusPercentage(getBonusPercentage());

		payrollSlabsImpl.resetOriginalValues();

		return payrollSlabsImpl;
	}

	@Override
	public int compareTo(PayrollSlabs payrollSlabs) {
		long primaryKey = payrollSlabs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PayrollSlabs)) {
			return false;
		}

		PayrollSlabs payrollSlabs = (PayrollSlabs)obj;

		long primaryKey = payrollSlabs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PayrollSlabsModelImpl payrollSlabsModelImpl = this;

		payrollSlabsModelImpl._originalAppraisalSettingId = payrollSlabsModelImpl._appraisalSettingId;

		payrollSlabsModelImpl._setOriginalAppraisalSettingId = false;

		payrollSlabsModelImpl._originalRatingId = payrollSlabsModelImpl._ratingId;

		payrollSlabsModelImpl._setOriginalRatingId = false;

		payrollSlabsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PayrollSlabs> toCacheModel() {
		PayrollSlabsCacheModel payrollSlabsCacheModel = new PayrollSlabsCacheModel();

		payrollSlabsCacheModel.payrollSlabsId = getPayrollSlabsId();

		payrollSlabsCacheModel.companyId = getCompanyId();

		payrollSlabsCacheModel.appraisalSettingId = getAppraisalSettingId();

		payrollSlabsCacheModel.ratingId = getRatingId();

		payrollSlabsCacheModel.payrollPercentage = getPayrollPercentage();

		payrollSlabsCacheModel.bonusPercentage = getBonusPercentage();

		return payrollSlabsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{payrollSlabsId=");
		sb.append(getPayrollSlabsId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", appraisalSettingId=");
		sb.append(getAppraisalSettingId());
		sb.append(", ratingId=");
		sb.append(getRatingId());
		sb.append(", payrollPercentage=");
		sb.append(getPayrollPercentage());
		sb.append(", bonusPercentage=");
		sb.append(getBonusPercentage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.PayrollSlabs");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>payrollSlabsId</column-name><column-value><![CDATA[");
		sb.append(getPayrollSlabsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalSettingId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratingId</column-name><column-value><![CDATA[");
		sb.append(getRatingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payrollPercentage</column-name><column-value><![CDATA[");
		sb.append(getPayrollPercentage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bonusPercentage</column-name><column-value><![CDATA[");
		sb.append(getBonusPercentage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PayrollSlabs.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PayrollSlabs.class, ModelWrapper.class
		};
	private long _payrollSlabsId;
	private long _companyId;
	private long _appraisalSettingId;
	private long _originalAppraisalSettingId;
	private boolean _setOriginalAppraisalSettingId;
	private long _ratingId;
	private long _originalRatingId;
	private boolean _setOriginalRatingId;
	private double _payrollPercentage;
	private double _bonusPercentage;
	private long _columnBitmask;
	private PayrollSlabs _escapedModel;
}