/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ProjectTask;
import com.liferay.famocom.erpcloud.model.ProjectTaskModel;
import com.liferay.famocom.erpcloud.model.ProjectTaskSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectTask service. Represents a row in the &quot;ProjectTask&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectTaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectTaskImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ProjectTaskImpl
 * @see ProjectTask
 * @see ProjectTaskModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectTaskModelImpl extends BaseModelImpl<ProjectTask>
	implements ProjectTaskModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project task model instance should use the {@link ProjectTask} interface instead.
	 */
	public static final String TABLE_NAME = "ProjectTask";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectTaskId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "taskId", Types.BIGINT },
			{ "taskName", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "hours", Types.DOUBLE },
			{ "addedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("projectTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hours", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table ProjectTask (projectTaskId LONG not null primary key,projectId LONG,employeeId LONG,taskId LONG,taskName VARCHAR(75) null,startDate DATE null,endDate DATE null,hours DOUBLE,addedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ProjectTask";
	public static final String ORDER_BY_JPQL = " ORDER BY projectTask.projectTaskId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ProjectTask.projectTaskId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ProjectTask"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ProjectTask"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectTask toModel(ProjectTaskSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectTask model = new ProjectTaskImpl();

		model.setProjectTaskId(soapModel.getProjectTaskId());
		model.setProjectId(soapModel.getProjectId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setTaskId(soapModel.getTaskId());
		model.setTaskName(soapModel.getTaskName());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setHours(soapModel.getHours());
		model.setAddedDate(soapModel.getAddedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectTask> toModels(ProjectTaskSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectTask> models = new ArrayList<ProjectTask>(soapModels.length);

		for (ProjectTaskSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ProjectTask"));

	public ProjectTaskModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectTaskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectTaskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectTask.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectTask.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectTaskId", getProjectTaskId());
		attributes.put("projectId", getProjectId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("taskId", getTaskId());
		attributes.put("taskName", getTaskName());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("hours", getHours());
		attributes.put("addedDate", getAddedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectTaskId = (Long)attributes.get("projectTaskId");

		if (projectTaskId != null) {
			setProjectTaskId(projectTaskId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		String taskName = (String)attributes.get("taskName");

		if (taskName != null) {
			setTaskName(taskName);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Double hours = (Double)attributes.get("hours");

		if (hours != null) {
			setHours(hours);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}
	}

	@JSON
	@Override
	public long getProjectTaskId() {
		return _projectTaskId;
	}

	@Override
	public void setProjectTaskId(long projectTaskId) {
		_projectTaskId = projectTaskId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public String getTaskName() {
		if (_taskName == null) {
			return "";
		}
		else {
			return _taskName;
		}
	}

	@Override
	public void setTaskName(String taskName) {
		_taskName = taskName;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public double getHours() {
		return _hours;
	}

	@Override
	public void setHours(double hours) {
		_hours = hours;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectTask.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectTask toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectTask)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectTaskImpl projectTaskImpl = new ProjectTaskImpl();

		projectTaskImpl.setProjectTaskId(getProjectTaskId());
		projectTaskImpl.setProjectId(getProjectId());
		projectTaskImpl.setEmployeeId(getEmployeeId());
		projectTaskImpl.setTaskId(getTaskId());
		projectTaskImpl.setTaskName(getTaskName());
		projectTaskImpl.setStartDate(getStartDate());
		projectTaskImpl.setEndDate(getEndDate());
		projectTaskImpl.setHours(getHours());
		projectTaskImpl.setAddedDate(getAddedDate());

		projectTaskImpl.resetOriginalValues();

		return projectTaskImpl;
	}

	@Override
	public int compareTo(ProjectTask projectTask) {
		long primaryKey = projectTask.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectTask)) {
			return false;
		}

		ProjectTask projectTask = (ProjectTask)obj;

		long primaryKey = projectTask.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProjectTask> toCacheModel() {
		ProjectTaskCacheModel projectTaskCacheModel = new ProjectTaskCacheModel();

		projectTaskCacheModel.projectTaskId = getProjectTaskId();

		projectTaskCacheModel.projectId = getProjectId();

		projectTaskCacheModel.employeeId = getEmployeeId();

		projectTaskCacheModel.taskId = getTaskId();

		projectTaskCacheModel.taskName = getTaskName();

		String taskName = projectTaskCacheModel.taskName;

		if ((taskName != null) && (taskName.length() == 0)) {
			projectTaskCacheModel.taskName = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			projectTaskCacheModel.startDate = startDate.getTime();
		}
		else {
			projectTaskCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			projectTaskCacheModel.endDate = endDate.getTime();
		}
		else {
			projectTaskCacheModel.endDate = Long.MIN_VALUE;
		}

		projectTaskCacheModel.hours = getHours();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			projectTaskCacheModel.addedDate = addedDate.getTime();
		}
		else {
			projectTaskCacheModel.addedDate = Long.MIN_VALUE;
		}

		return projectTaskCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{projectTaskId=");
		sb.append(getProjectTaskId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", taskId=");
		sb.append(getTaskId());
		sb.append(", taskName=");
		sb.append(getTaskName());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", hours=");
		sb.append(getHours());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ProjectTask");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectTaskId</column-name><column-value><![CDATA[");
		sb.append(getProjectTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskName</column-name><column-value><![CDATA[");
		sb.append(getTaskName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hours</column-name><column-value><![CDATA[");
		sb.append(getHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectTask.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectTask.class, ModelWrapper.class
		};
	private long _projectTaskId;
	private long _projectId;
	private long _employeeId;
	private long _taskId;
	private String _taskName;
	private Date _startDate;
	private Date _endDate;
	private double _hours;
	private Date _addedDate;
	private ProjectTask _escapedModel;
}