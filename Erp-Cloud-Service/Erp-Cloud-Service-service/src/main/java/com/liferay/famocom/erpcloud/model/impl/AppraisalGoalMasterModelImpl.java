/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.AppraisalGoalMaster;
import com.liferay.famocom.erpcloud.model.AppraisalGoalMasterModel;
import com.liferay.famocom.erpcloud.model.AppraisalGoalMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppraisalGoalMaster service. Represents a row in the &quot;appraisalGoalMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AppraisalGoalMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppraisalGoalMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see AppraisalGoalMasterImpl
 * @see AppraisalGoalMaster
 * @see AppraisalGoalMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AppraisalGoalMasterModelImpl extends BaseModelImpl<AppraisalGoalMaster>
	implements AppraisalGoalMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a appraisal goal master model instance should use the {@link AppraisalGoalMaster} interface instead.
	 */
	public static final String TABLE_NAME = "appraisalGoalMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appraisalGoalMasterId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "appraisalId", Types.BIGINT },
			{ "appraisalProjectId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "evaluationId", Types.BIGINT },
			{ "employeeComment", Types.VARCHAR },
			{ "employeeOverallRat", Types.BIGINT },
			{ "managerComment", Types.VARCHAR },
			{ "managerOverallRat", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("appraisalGoalMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("evaluationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeOverallRat", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("managerComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerOverallRat", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table appraisalGoalMaster (appraisalGoalMasterId LONG not null primary key,companyId LONG,appraisalId LONG,appraisalProjectId LONG,employeeId LONG,projectId LONG,evaluationId LONG,employeeComment VARCHAR(75) null,employeeOverallRat LONG,managerComment VARCHAR(75) null,managerOverallRat LONG,createdDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table appraisalGoalMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY appraisalGoalMaster.appraisalGoalMasterId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY appraisalGoalMaster.appraisalGoalMasterId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalGoalMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalGoalMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.AppraisalGoalMaster"),
			true);
	public static final long APPRAISALID_COLUMN_BITMASK = 1L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long EVALUATIONID_COLUMN_BITMASK = 4L;
	public static final long PROJECTID_COLUMN_BITMASK = 8L;
	public static final long APPRAISALGOALMASTERID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppraisalGoalMaster toModel(AppraisalGoalMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppraisalGoalMaster model = new AppraisalGoalMasterImpl();

		model.setAppraisalGoalMasterId(soapModel.getAppraisalGoalMasterId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAppraisalId(soapModel.getAppraisalId());
		model.setAppraisalProjectId(soapModel.getAppraisalProjectId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setProjectId(soapModel.getProjectId());
		model.setEvaluationId(soapModel.getEvaluationId());
		model.setEmployeeComment(soapModel.getEmployeeComment());
		model.setEmployeeOverallRat(soapModel.getEmployeeOverallRat());
		model.setManagerComment(soapModel.getManagerComment());
		model.setManagerOverallRat(soapModel.getManagerOverallRat());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppraisalGoalMaster> toModels(
		AppraisalGoalMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppraisalGoalMaster> models = new ArrayList<AppraisalGoalMaster>(soapModels.length);

		for (AppraisalGoalMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.AppraisalGoalMaster"));

	public AppraisalGoalMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appraisalGoalMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppraisalGoalMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appraisalGoalMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppraisalGoalMaster.class;
	}

	@Override
	public String getModelClassName() {
		return AppraisalGoalMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appraisalGoalMasterId", getAppraisalGoalMasterId());
		attributes.put("companyId", getCompanyId());
		attributes.put("appraisalId", getAppraisalId());
		attributes.put("appraisalProjectId", getAppraisalProjectId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("projectId", getProjectId());
		attributes.put("evaluationId", getEvaluationId());
		attributes.put("employeeComment", getEmployeeComment());
		attributes.put("employeeOverallRat", getEmployeeOverallRat());
		attributes.put("managerComment", getManagerComment());
		attributes.put("managerOverallRat", getManagerOverallRat());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appraisalGoalMasterId = (Long)attributes.get(
				"appraisalGoalMasterId");

		if (appraisalGoalMasterId != null) {
			setAppraisalGoalMasterId(appraisalGoalMasterId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long appraisalId = (Long)attributes.get("appraisalId");

		if (appraisalId != null) {
			setAppraisalId(appraisalId);
		}

		Long appraisalProjectId = (Long)attributes.get("appraisalProjectId");

		if (appraisalProjectId != null) {
			setAppraisalProjectId(appraisalProjectId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long evaluationId = (Long)attributes.get("evaluationId");

		if (evaluationId != null) {
			setEvaluationId(evaluationId);
		}

		String employeeComment = (String)attributes.get("employeeComment");

		if (employeeComment != null) {
			setEmployeeComment(employeeComment);
		}

		Long employeeOverallRat = (Long)attributes.get("employeeOverallRat");

		if (employeeOverallRat != null) {
			setEmployeeOverallRat(employeeOverallRat);
		}

		String managerComment = (String)attributes.get("managerComment");

		if (managerComment != null) {
			setManagerComment(managerComment);
		}

		Long managerOverallRat = (Long)attributes.get("managerOverallRat");

		if (managerOverallRat != null) {
			setManagerOverallRat(managerOverallRat);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getAppraisalGoalMasterId() {
		return _appraisalGoalMasterId;
	}

	@Override
	public void setAppraisalGoalMasterId(long appraisalGoalMasterId) {
		_appraisalGoalMasterId = appraisalGoalMasterId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getAppraisalId() {
		return _appraisalId;
	}

	@Override
	public void setAppraisalId(long appraisalId) {
		_columnBitmask |= APPRAISALID_COLUMN_BITMASK;

		if (!_setOriginalAppraisalId) {
			_setOriginalAppraisalId = true;

			_originalAppraisalId = _appraisalId;
		}

		_appraisalId = appraisalId;
	}

	public long getOriginalAppraisalId() {
		return _originalAppraisalId;
	}

	@JSON
	@Override
	public long getAppraisalProjectId() {
		return _appraisalProjectId;
	}

	@Override
	public void setAppraisalProjectId(long appraisalProjectId) {
		_appraisalProjectId = appraisalProjectId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public long getEvaluationId() {
		return _evaluationId;
	}

	@Override
	public void setEvaluationId(long evaluationId) {
		_columnBitmask |= EVALUATIONID_COLUMN_BITMASK;

		if (!_setOriginalEvaluationId) {
			_setOriginalEvaluationId = true;

			_originalEvaluationId = _evaluationId;
		}

		_evaluationId = evaluationId;
	}

	public long getOriginalEvaluationId() {
		return _originalEvaluationId;
	}

	@JSON
	@Override
	public String getEmployeeComment() {
		if (_employeeComment == null) {
			return "";
		}
		else {
			return _employeeComment;
		}
	}

	@Override
	public void setEmployeeComment(String employeeComment) {
		_employeeComment = employeeComment;
	}

	@JSON
	@Override
	public long getEmployeeOverallRat() {
		return _employeeOverallRat;
	}

	@Override
	public void setEmployeeOverallRat(long employeeOverallRat) {
		_employeeOverallRat = employeeOverallRat;
	}

	@JSON
	@Override
	public String getManagerComment() {
		if (_managerComment == null) {
			return "";
		}
		else {
			return _managerComment;
		}
	}

	@Override
	public void setManagerComment(String managerComment) {
		_managerComment = managerComment;
	}

	@JSON
	@Override
	public long getManagerOverallRat() {
		return _managerOverallRat;
	}

	@Override
	public void setManagerOverallRat(long managerOverallRat) {
		_managerOverallRat = managerOverallRat;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppraisalGoalMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppraisalGoalMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppraisalGoalMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppraisalGoalMasterImpl appraisalGoalMasterImpl = new AppraisalGoalMasterImpl();

		appraisalGoalMasterImpl.setAppraisalGoalMasterId(getAppraisalGoalMasterId());
		appraisalGoalMasterImpl.setCompanyId(getCompanyId());
		appraisalGoalMasterImpl.setAppraisalId(getAppraisalId());
		appraisalGoalMasterImpl.setAppraisalProjectId(getAppraisalProjectId());
		appraisalGoalMasterImpl.setEmployeeId(getEmployeeId());
		appraisalGoalMasterImpl.setProjectId(getProjectId());
		appraisalGoalMasterImpl.setEvaluationId(getEvaluationId());
		appraisalGoalMasterImpl.setEmployeeComment(getEmployeeComment());
		appraisalGoalMasterImpl.setEmployeeOverallRat(getEmployeeOverallRat());
		appraisalGoalMasterImpl.setManagerComment(getManagerComment());
		appraisalGoalMasterImpl.setManagerOverallRat(getManagerOverallRat());
		appraisalGoalMasterImpl.setCreatedDate(getCreatedDate());
		appraisalGoalMasterImpl.setCreatedBy(getCreatedBy());
		appraisalGoalMasterImpl.setModifiedDate(getModifiedDate());
		appraisalGoalMasterImpl.setModifiedBy(getModifiedBy());

		appraisalGoalMasterImpl.resetOriginalValues();

		return appraisalGoalMasterImpl;
	}

	@Override
	public int compareTo(AppraisalGoalMaster appraisalGoalMaster) {
		long primaryKey = appraisalGoalMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppraisalGoalMaster)) {
			return false;
		}

		AppraisalGoalMaster appraisalGoalMaster = (AppraisalGoalMaster)obj;

		long primaryKey = appraisalGoalMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AppraisalGoalMasterModelImpl appraisalGoalMasterModelImpl = this;

		appraisalGoalMasterModelImpl._originalAppraisalId = appraisalGoalMasterModelImpl._appraisalId;

		appraisalGoalMasterModelImpl._setOriginalAppraisalId = false;

		appraisalGoalMasterModelImpl._originalEmployeeId = appraisalGoalMasterModelImpl._employeeId;

		appraisalGoalMasterModelImpl._setOriginalEmployeeId = false;

		appraisalGoalMasterModelImpl._originalProjectId = appraisalGoalMasterModelImpl._projectId;

		appraisalGoalMasterModelImpl._setOriginalProjectId = false;

		appraisalGoalMasterModelImpl._originalEvaluationId = appraisalGoalMasterModelImpl._evaluationId;

		appraisalGoalMasterModelImpl._setOriginalEvaluationId = false;

		appraisalGoalMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppraisalGoalMaster> toCacheModel() {
		AppraisalGoalMasterCacheModel appraisalGoalMasterCacheModel = new AppraisalGoalMasterCacheModel();

		appraisalGoalMasterCacheModel.appraisalGoalMasterId = getAppraisalGoalMasterId();

		appraisalGoalMasterCacheModel.companyId = getCompanyId();

		appraisalGoalMasterCacheModel.appraisalId = getAppraisalId();

		appraisalGoalMasterCacheModel.appraisalProjectId = getAppraisalProjectId();

		appraisalGoalMasterCacheModel.employeeId = getEmployeeId();

		appraisalGoalMasterCacheModel.projectId = getProjectId();

		appraisalGoalMasterCacheModel.evaluationId = getEvaluationId();

		appraisalGoalMasterCacheModel.employeeComment = getEmployeeComment();

		String employeeComment = appraisalGoalMasterCacheModel.employeeComment;

		if ((employeeComment != null) && (employeeComment.length() == 0)) {
			appraisalGoalMasterCacheModel.employeeComment = null;
		}

		appraisalGoalMasterCacheModel.employeeOverallRat = getEmployeeOverallRat();

		appraisalGoalMasterCacheModel.managerComment = getManagerComment();

		String managerComment = appraisalGoalMasterCacheModel.managerComment;

		if ((managerComment != null) && (managerComment.length() == 0)) {
			appraisalGoalMasterCacheModel.managerComment = null;
		}

		appraisalGoalMasterCacheModel.managerOverallRat = getManagerOverallRat();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			appraisalGoalMasterCacheModel.createdDate = createdDate.getTime();
		}
		else {
			appraisalGoalMasterCacheModel.createdDate = Long.MIN_VALUE;
		}

		appraisalGoalMasterCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appraisalGoalMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appraisalGoalMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appraisalGoalMasterCacheModel.modifiedBy = getModifiedBy();

		return appraisalGoalMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{appraisalGoalMasterId=");
		sb.append(getAppraisalGoalMasterId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", appraisalId=");
		sb.append(getAppraisalId());
		sb.append(", appraisalProjectId=");
		sb.append(getAppraisalProjectId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", evaluationId=");
		sb.append(getEvaluationId());
		sb.append(", employeeComment=");
		sb.append(getEmployeeComment());
		sb.append(", employeeOverallRat=");
		sb.append(getEmployeeOverallRat());
		sb.append(", managerComment=");
		sb.append(getManagerComment());
		sb.append(", managerOverallRat=");
		sb.append(getManagerOverallRat());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.AppraisalGoalMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appraisalGoalMasterId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalGoalMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalProjectId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationId</column-name><column-value><![CDATA[");
		sb.append(getEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeComment</column-name><column-value><![CDATA[");
		sb.append(getEmployeeComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeOverallRat</column-name><column-value><![CDATA[");
		sb.append(getEmployeeOverallRat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerComment</column-name><column-value><![CDATA[");
		sb.append(getManagerComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>managerOverallRat</column-name><column-value><![CDATA[");
		sb.append(getManagerOverallRat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AppraisalGoalMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AppraisalGoalMaster.class, ModelWrapper.class
		};
	private long _appraisalGoalMasterId;
	private long _companyId;
	private long _appraisalId;
	private long _originalAppraisalId;
	private boolean _setOriginalAppraisalId;
	private long _appraisalProjectId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _evaluationId;
	private long _originalEvaluationId;
	private boolean _setOriginalEvaluationId;
	private String _employeeComment;
	private long _employeeOverallRat;
	private String _managerComment;
	private long _managerOverallRat;
	private Date _createdDate;
	private long _createdBy;
	private Date _modifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private AppraisalGoalMaster _escapedModel;
}