/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.RecruitmentProcess;
import com.liferay.famocom.erpcloud.model.RecruitmentProcessModel;
import com.liferay.famocom.erpcloud.model.RecruitmentProcessSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RecruitmentProcess service. Represents a row in the &quot;RecruitmentProcess&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RecruitmentProcessModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecruitmentProcessImpl}.
 * </p>
 *
 * @author Samaresh
 * @see RecruitmentProcessImpl
 * @see RecruitmentProcess
 * @see RecruitmentProcessModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RecruitmentProcessModelImpl extends BaseModelImpl<RecruitmentProcess>
	implements RecruitmentProcessModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a recruitment process model instance should use the {@link RecruitmentProcess} interface instead.
	 */
	public static final String TABLE_NAME = "RecruitmentProcess";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recruitmentProcessId", Types.BIGINT },
			{ "applyCandidateId", Types.BIGINT },
			{ "interviewDate", Types.TIMESTAMP },
			{ "interviewTime", Types.VARCHAR },
			{ "fileEntryId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "interviewerRemarks", Types.VARCHAR },
			{ "hrRemarks", Types.VARCHAR },
			{ "isSelected", Types.BOOLEAN },
			{ "interviewerId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "jobPostId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("recruitmentProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applyCandidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("interviewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("interviewTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("interviewerRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isSelected", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("interviewerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table RecruitmentProcess (recruitmentProcessId LONG not null primary key,applyCandidateId LONG,interviewDate DATE null,interviewTime VARCHAR(75) null,fileEntryId LONG,createDate DATE null,modifiedDate DATE null,interviewerRemarks VARCHAR(75) null,hrRemarks VARCHAR(75) null,isSelected BOOLEAN,interviewerId LONG,createdBy LONG,jobPostId LONG,groupId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table RecruitmentProcess";
	public static final String ORDER_BY_JPQL = " ORDER BY recruitmentProcess.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RecruitmentProcess.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.RecruitmentProcess"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.RecruitmentProcess"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.RecruitmentProcess"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RecruitmentProcess toModel(RecruitmentProcessSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RecruitmentProcess model = new RecruitmentProcessImpl();

		model.setRecruitmentProcessId(soapModel.getRecruitmentProcessId());
		model.setApplyCandidateId(soapModel.getApplyCandidateId());
		model.setInterviewDate(soapModel.getInterviewDate());
		model.setInterviewTime(soapModel.getInterviewTime());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setInterviewerRemarks(soapModel.getInterviewerRemarks());
		model.setHrRemarks(soapModel.getHrRemarks());
		model.setIsSelected(soapModel.isIsSelected());
		model.setInterviewerId(soapModel.getInterviewerId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setJobPostId(soapModel.getJobPostId());
		model.setGroupId(soapModel.getGroupId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RecruitmentProcess> toModels(
		RecruitmentProcessSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RecruitmentProcess> models = new ArrayList<RecruitmentProcess>(soapModels.length);

		for (RecruitmentProcessSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.RecruitmentProcess"));

	public RecruitmentProcessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recruitmentProcessId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecruitmentProcessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recruitmentProcessId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RecruitmentProcess.class;
	}

	@Override
	public String getModelClassName() {
		return RecruitmentProcess.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recruitmentProcessId", getRecruitmentProcessId());
		attributes.put("applyCandidateId", getApplyCandidateId());
		attributes.put("interviewDate", getInterviewDate());
		attributes.put("interviewTime", getInterviewTime());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("interviewerRemarks", getInterviewerRemarks());
		attributes.put("hrRemarks", getHrRemarks());
		attributes.put("isSelected", isIsSelected());
		attributes.put("interviewerId", getInterviewerId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("jobPostId", getJobPostId());
		attributes.put("groupId", getGroupId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recruitmentProcessId = (Long)attributes.get("recruitmentProcessId");

		if (recruitmentProcessId != null) {
			setRecruitmentProcessId(recruitmentProcessId);
		}

		Long applyCandidateId = (Long)attributes.get("applyCandidateId");

		if (applyCandidateId != null) {
			setApplyCandidateId(applyCandidateId);
		}

		Date interviewDate = (Date)attributes.get("interviewDate");

		if (interviewDate != null) {
			setInterviewDate(interviewDate);
		}

		String interviewTime = (String)attributes.get("interviewTime");

		if (interviewTime != null) {
			setInterviewTime(interviewTime);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String interviewerRemarks = (String)attributes.get("interviewerRemarks");

		if (interviewerRemarks != null) {
			setInterviewerRemarks(interviewerRemarks);
		}

		String hrRemarks = (String)attributes.get("hrRemarks");

		if (hrRemarks != null) {
			setHrRemarks(hrRemarks);
		}

		Boolean isSelected = (Boolean)attributes.get("isSelected");

		if (isSelected != null) {
			setIsSelected(isSelected);
		}

		Long interviewerId = (Long)attributes.get("interviewerId");

		if (interviewerId != null) {
			setInterviewerId(interviewerId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long jobPostId = (Long)attributes.get("jobPostId");

		if (jobPostId != null) {
			setJobPostId(jobPostId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getRecruitmentProcessId() {
		return _recruitmentProcessId;
	}

	@Override
	public void setRecruitmentProcessId(long recruitmentProcessId) {
		_recruitmentProcessId = recruitmentProcessId;
	}

	@JSON
	@Override
	public long getApplyCandidateId() {
		return _applyCandidateId;
	}

	@Override
	public void setApplyCandidateId(long applyCandidateId) {
		_applyCandidateId = applyCandidateId;
	}

	@JSON
	@Override
	public Date getInterviewDate() {
		return _interviewDate;
	}

	@Override
	public void setInterviewDate(Date interviewDate) {
		_interviewDate = interviewDate;
	}

	@JSON
	@Override
	public String getInterviewTime() {
		if (_interviewTime == null) {
			return "";
		}
		else {
			return _interviewTime;
		}
	}

	@Override
	public void setInterviewTime(String interviewTime) {
		_interviewTime = interviewTime;
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getInterviewerRemarks() {
		if (_interviewerRemarks == null) {
			return "";
		}
		else {
			return _interviewerRemarks;
		}
	}

	@Override
	public void setInterviewerRemarks(String interviewerRemarks) {
		_interviewerRemarks = interviewerRemarks;
	}

	@JSON
	@Override
	public String getHrRemarks() {
		if (_hrRemarks == null) {
			return "";
		}
		else {
			return _hrRemarks;
		}
	}

	@Override
	public void setHrRemarks(String hrRemarks) {
		_hrRemarks = hrRemarks;
	}

	@JSON
	@Override
	public boolean getIsSelected() {
		return _isSelected;
	}

	@JSON
	@Override
	public boolean isIsSelected() {
		return _isSelected;
	}

	@Override
	public void setIsSelected(boolean isSelected) {
		_isSelected = isSelected;
	}

	@JSON
	@Override
	public long getInterviewerId() {
		return _interviewerId;
	}

	@Override
	public void setInterviewerId(long interviewerId) {
		_interviewerId = interviewerId;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getJobPostId() {
		return _jobPostId;
	}

	@Override
	public void setJobPostId(long jobPostId) {
		_jobPostId = jobPostId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RecruitmentProcess.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RecruitmentProcess toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RecruitmentProcess)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecruitmentProcessImpl recruitmentProcessImpl = new RecruitmentProcessImpl();

		recruitmentProcessImpl.setRecruitmentProcessId(getRecruitmentProcessId());
		recruitmentProcessImpl.setApplyCandidateId(getApplyCandidateId());
		recruitmentProcessImpl.setInterviewDate(getInterviewDate());
		recruitmentProcessImpl.setInterviewTime(getInterviewTime());
		recruitmentProcessImpl.setFileEntryId(getFileEntryId());
		recruitmentProcessImpl.setCreateDate(getCreateDate());
		recruitmentProcessImpl.setModifiedDate(getModifiedDate());
		recruitmentProcessImpl.setInterviewerRemarks(getInterviewerRemarks());
		recruitmentProcessImpl.setHrRemarks(getHrRemarks());
		recruitmentProcessImpl.setIsSelected(isIsSelected());
		recruitmentProcessImpl.setInterviewerId(getInterviewerId());
		recruitmentProcessImpl.setCreatedBy(getCreatedBy());
		recruitmentProcessImpl.setJobPostId(getJobPostId());
		recruitmentProcessImpl.setGroupId(getGroupId());
		recruitmentProcessImpl.setStatus(getStatus());
		recruitmentProcessImpl.setStatusByUserId(getStatusByUserId());
		recruitmentProcessImpl.setStatusByUserName(getStatusByUserName());
		recruitmentProcessImpl.setStatusDate(getStatusDate());
		recruitmentProcessImpl.setUserId(getUserId());

		recruitmentProcessImpl.resetOriginalValues();

		return recruitmentProcessImpl;
	}

	@Override
	public int compareTo(RecruitmentProcess recruitmentProcess) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				recruitmentProcess.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RecruitmentProcess)) {
			return false;
		}

		RecruitmentProcess recruitmentProcess = (RecruitmentProcess)obj;

		long primaryKey = recruitmentProcess.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RecruitmentProcessModelImpl recruitmentProcessModelImpl = this;

		recruitmentProcessModelImpl._setModifiedDate = false;

		recruitmentProcessModelImpl._originalGroupId = recruitmentProcessModelImpl._groupId;

		recruitmentProcessModelImpl._setOriginalGroupId = false;

		recruitmentProcessModelImpl._originalStatus = recruitmentProcessModelImpl._status;

		recruitmentProcessModelImpl._setOriginalStatus = false;

		recruitmentProcessModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RecruitmentProcess> toCacheModel() {
		RecruitmentProcessCacheModel recruitmentProcessCacheModel = new RecruitmentProcessCacheModel();

		recruitmentProcessCacheModel.recruitmentProcessId = getRecruitmentProcessId();

		recruitmentProcessCacheModel.applyCandidateId = getApplyCandidateId();

		Date interviewDate = getInterviewDate();

		if (interviewDate != null) {
			recruitmentProcessCacheModel.interviewDate = interviewDate.getTime();
		}
		else {
			recruitmentProcessCacheModel.interviewDate = Long.MIN_VALUE;
		}

		recruitmentProcessCacheModel.interviewTime = getInterviewTime();

		String interviewTime = recruitmentProcessCacheModel.interviewTime;

		if ((interviewTime != null) && (interviewTime.length() == 0)) {
			recruitmentProcessCacheModel.interviewTime = null;
		}

		recruitmentProcessCacheModel.fileEntryId = getFileEntryId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			recruitmentProcessCacheModel.createDate = createDate.getTime();
		}
		else {
			recruitmentProcessCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			recruitmentProcessCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			recruitmentProcessCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		recruitmentProcessCacheModel.interviewerRemarks = getInterviewerRemarks();

		String interviewerRemarks = recruitmentProcessCacheModel.interviewerRemarks;

		if ((interviewerRemarks != null) && (interviewerRemarks.length() == 0)) {
			recruitmentProcessCacheModel.interviewerRemarks = null;
		}

		recruitmentProcessCacheModel.hrRemarks = getHrRemarks();

		String hrRemarks = recruitmentProcessCacheModel.hrRemarks;

		if ((hrRemarks != null) && (hrRemarks.length() == 0)) {
			recruitmentProcessCacheModel.hrRemarks = null;
		}

		recruitmentProcessCacheModel.isSelected = isIsSelected();

		recruitmentProcessCacheModel.interviewerId = getInterviewerId();

		recruitmentProcessCacheModel.createdBy = getCreatedBy();

		recruitmentProcessCacheModel.jobPostId = getJobPostId();

		recruitmentProcessCacheModel.groupId = getGroupId();

		recruitmentProcessCacheModel.status = getStatus();

		recruitmentProcessCacheModel.statusByUserId = getStatusByUserId();

		recruitmentProcessCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = recruitmentProcessCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			recruitmentProcessCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			recruitmentProcessCacheModel.statusDate = statusDate.getTime();
		}
		else {
			recruitmentProcessCacheModel.statusDate = Long.MIN_VALUE;
		}

		recruitmentProcessCacheModel.userId = getUserId();

		return recruitmentProcessCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{recruitmentProcessId=");
		sb.append(getRecruitmentProcessId());
		sb.append(", applyCandidateId=");
		sb.append(getApplyCandidateId());
		sb.append(", interviewDate=");
		sb.append(getInterviewDate());
		sb.append(", interviewTime=");
		sb.append(getInterviewTime());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", interviewerRemarks=");
		sb.append(getInterviewerRemarks());
		sb.append(", hrRemarks=");
		sb.append(getHrRemarks());
		sb.append(", isSelected=");
		sb.append(isIsSelected());
		sb.append(", interviewerId=");
		sb.append(getInterviewerId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", jobPostId=");
		sb.append(getJobPostId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.RecruitmentProcess");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recruitmentProcessId</column-name><column-value><![CDATA[");
		sb.append(getRecruitmentProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyCandidateId</column-name><column-value><![CDATA[");
		sb.append(getApplyCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewDate</column-name><column-value><![CDATA[");
		sb.append(getInterviewDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewTime</column-name><column-value><![CDATA[");
		sb.append(getInterviewTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewerRemarks</column-name><column-value><![CDATA[");
		sb.append(getInterviewerRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrRemarks</column-name><column-value><![CDATA[");
		sb.append(getHrRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSelected</column-name><column-value><![CDATA[");
		sb.append(isIsSelected());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewerId</column-name><column-value><![CDATA[");
		sb.append(getInterviewerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobPostId</column-name><column-value><![CDATA[");
		sb.append(getJobPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RecruitmentProcess.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RecruitmentProcess.class, ModelWrapper.class
		};
	private long _recruitmentProcessId;
	private long _applyCandidateId;
	private Date _interviewDate;
	private String _interviewTime;
	private long _fileEntryId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _interviewerRemarks;
	private String _hrRemarks;
	private boolean _isSelected;
	private long _interviewerId;
	private long _createdBy;
	private long _jobPostId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _userId;
	private long _columnBitmask;
	private RecruitmentProcess _escapedModel;
}