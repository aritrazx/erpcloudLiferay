/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.ProjectStatus;
import com.liferay.famocom.erpcloud.model.ProjectStatusModel;
import com.liferay.famocom.erpcloud.model.ProjectStatusSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectStatus service. Represents a row in the &quot;projectStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectStatusImpl}.
 * </p>
 *
 * @author Samaresh
 * @see ProjectStatusImpl
 * @see ProjectStatus
 * @see ProjectStatusModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectStatusModelImpl extends BaseModelImpl<ProjectStatus>
	implements ProjectStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project status model instance should use the {@link ProjectStatus} interface instead.
	 */
	public static final String TABLE_NAME = "projectStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectStatusId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "statusName", Types.VARCHAR },
			{ "statusColor", Types.VARCHAR },
			{ "addedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("projectStatusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table projectStatus (projectStatusId LONG not null primary key,companyId LONG,statusName VARCHAR(75) null,statusColor VARCHAR(75) null,addedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table projectStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY projectStatus.projectStatusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY projectStatus.projectStatusId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.ProjectStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.ProjectStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectStatus toModel(ProjectStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectStatus model = new ProjectStatusImpl();

		model.setProjectStatusId(soapModel.getProjectStatusId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setStatusName(soapModel.getStatusName());
		model.setStatusColor(soapModel.getStatusColor());
		model.setAddedDate(soapModel.getAddedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectStatus> toModels(ProjectStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectStatus> models = new ArrayList<ProjectStatus>(soapModels.length);

		for (ProjectStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.ProjectStatus"));

	public ProjectStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectStatusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectStatusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectStatus.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectStatusId", getProjectStatusId());
		attributes.put("companyId", getCompanyId());
		attributes.put("statusName", getStatusName());
		attributes.put("statusColor", getStatusColor());
		attributes.put("addedDate", getAddedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectStatusId = (Long)attributes.get("projectStatusId");

		if (projectStatusId != null) {
			setProjectStatusId(projectStatusId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String statusName = (String)attributes.get("statusName");

		if (statusName != null) {
			setStatusName(statusName);
		}

		String statusColor = (String)attributes.get("statusColor");

		if (statusColor != null) {
			setStatusColor(statusColor);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}
	}

	@JSON
	@Override
	public long getProjectStatusId() {
		return _projectStatusId;
	}

	@Override
	public void setProjectStatusId(long projectStatusId) {
		_projectStatusId = projectStatusId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getStatusName() {
		if (_statusName == null) {
			return "";
		}
		else {
			return _statusName;
		}
	}

	@Override
	public void setStatusName(String statusName) {
		_statusName = statusName;
	}

	@JSON
	@Override
	public String getStatusColor() {
		if (_statusColor == null) {
			return "";
		}
		else {
			return _statusColor;
		}
	}

	@Override
	public void setStatusColor(String statusColor) {
		_statusColor = statusColor;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProjectStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectStatusImpl projectStatusImpl = new ProjectStatusImpl();

		projectStatusImpl.setProjectStatusId(getProjectStatusId());
		projectStatusImpl.setCompanyId(getCompanyId());
		projectStatusImpl.setStatusName(getStatusName());
		projectStatusImpl.setStatusColor(getStatusColor());
		projectStatusImpl.setAddedDate(getAddedDate());

		projectStatusImpl.resetOriginalValues();

		return projectStatusImpl;
	}

	@Override
	public int compareTo(ProjectStatus projectStatus) {
		long primaryKey = projectStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectStatus)) {
			return false;
		}

		ProjectStatus projectStatus = (ProjectStatus)obj;

		long primaryKey = projectStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProjectStatus> toCacheModel() {
		ProjectStatusCacheModel projectStatusCacheModel = new ProjectStatusCacheModel();

		projectStatusCacheModel.projectStatusId = getProjectStatusId();

		projectStatusCacheModel.companyId = getCompanyId();

		projectStatusCacheModel.statusName = getStatusName();

		String statusName = projectStatusCacheModel.statusName;

		if ((statusName != null) && (statusName.length() == 0)) {
			projectStatusCacheModel.statusName = null;
		}

		projectStatusCacheModel.statusColor = getStatusColor();

		String statusColor = projectStatusCacheModel.statusColor;

		if ((statusColor != null) && (statusColor.length() == 0)) {
			projectStatusCacheModel.statusColor = null;
		}

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			projectStatusCacheModel.addedDate = addedDate.getTime();
		}
		else {
			projectStatusCacheModel.addedDate = Long.MIN_VALUE;
		}

		return projectStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{projectStatusId=");
		sb.append(getProjectStatusId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", statusName=");
		sb.append(getStatusName());
		sb.append(", statusColor=");
		sb.append(getStatusColor());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.ProjectStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectStatusId</column-name><column-value><![CDATA[");
		sb.append(getProjectStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusName</column-name><column-value><![CDATA[");
		sb.append(getStatusName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusColor</column-name><column-value><![CDATA[");
		sb.append(getStatusColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectStatus.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectStatus.class, ModelWrapper.class
		};
	private long _projectStatusId;
	private long _companyId;
	private String _statusName;
	private String _statusColor;
	private Date _addedDate;
	private ProjectStatus _escapedModel;
}