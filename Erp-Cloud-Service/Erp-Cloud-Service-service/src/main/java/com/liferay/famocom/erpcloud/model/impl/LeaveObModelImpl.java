/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.LeaveOb;
import com.liferay.famocom.erpcloud.model.LeaveObModel;
import com.liferay.famocom.erpcloud.model.LeaveObSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LeaveOb service. Represents a row in the &quot;leaveOb&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LeaveObModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveObImpl}.
 * </p>
 *
 * @author Samaresh
 * @see LeaveObImpl
 * @see LeaveOb
 * @see LeaveObModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LeaveObModelImpl extends BaseModelImpl<LeaveOb>
	implements LeaveObModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave ob model instance should use the {@link LeaveOb} interface instead.
	 */
	public static final String TABLE_NAME = "leaveOb";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveobId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "obVal", Types.INTEGER },
			{ "isApprove", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("leaveobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("obVal", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isApprove", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table leaveOb (leaveobId LONG not null primary key,employeeId LONG,leaveTypeId LONG,obVal INTEGER,isApprove BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table leaveOb";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveOb.leaveobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leaveOb.leaveobId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveOb"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveOb"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.LeaveOb"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long LEAVETYPEID_COLUMN_BITMASK = 2L;
	public static final long LEAVEOBID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LeaveOb toModel(LeaveObSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveOb model = new LeaveObImpl();

		model.setLeaveobId(soapModel.getLeaveobId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setLeaveTypeId(soapModel.getLeaveTypeId());
		model.setObVal(soapModel.getObVal());
		model.setIsApprove(soapModel.isIsApprove());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LeaveOb> toModels(LeaveObSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LeaveOb> models = new ArrayList<LeaveOb>(soapModels.length);

		for (LeaveObSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.LeaveOb"));

	public LeaveObModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveOb.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveOb.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveobId", getLeaveobId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("obVal", getObVal());
		attributes.put("isApprove", isIsApprove());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveobId = (Long)attributes.get("leaveobId");

		if (leaveobId != null) {
			setLeaveobId(leaveobId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Integer obVal = (Integer)attributes.get("obVal");

		if (obVal != null) {
			setObVal(obVal);
		}

		Boolean isApprove = (Boolean)attributes.get("isApprove");

		if (isApprove != null) {
			setIsApprove(isApprove);
		}
	}

	@JSON
	@Override
	public long getLeaveobId() {
		return _leaveobId;
	}

	@Override
	public void setLeaveobId(long leaveobId) {
		_leaveobId = leaveobId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_columnBitmask |= LEAVETYPEID_COLUMN_BITMASK;

		if (!_setOriginalLeaveTypeId) {
			_setOriginalLeaveTypeId = true;

			_originalLeaveTypeId = _leaveTypeId;
		}

		_leaveTypeId = leaveTypeId;
	}

	public long getOriginalLeaveTypeId() {
		return _originalLeaveTypeId;
	}

	@JSON
	@Override
	public int getObVal() {
		return _obVal;
	}

	@Override
	public void setObVal(int obVal) {
		_obVal = obVal;
	}

	@JSON
	@Override
	public boolean getIsApprove() {
		return _isApprove;
	}

	@JSON
	@Override
	public boolean isIsApprove() {
		return _isApprove;
	}

	@Override
	public void setIsApprove(boolean isApprove) {
		_isApprove = isApprove;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LeaveOb.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveOb toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveOb)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveObImpl leaveObImpl = new LeaveObImpl();

		leaveObImpl.setLeaveobId(getLeaveobId());
		leaveObImpl.setEmployeeId(getEmployeeId());
		leaveObImpl.setLeaveTypeId(getLeaveTypeId());
		leaveObImpl.setObVal(getObVal());
		leaveObImpl.setIsApprove(isIsApprove());

		leaveObImpl.resetOriginalValues();

		return leaveObImpl;
	}

	@Override
	public int compareTo(LeaveOb leaveOb) {
		long primaryKey = leaveOb.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveOb)) {
			return false;
		}

		LeaveOb leaveOb = (LeaveOb)obj;

		long primaryKey = leaveOb.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LeaveObModelImpl leaveObModelImpl = this;

		leaveObModelImpl._originalEmployeeId = leaveObModelImpl._employeeId;

		leaveObModelImpl._setOriginalEmployeeId = false;

		leaveObModelImpl._originalLeaveTypeId = leaveObModelImpl._leaveTypeId;

		leaveObModelImpl._setOriginalLeaveTypeId = false;

		leaveObModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveOb> toCacheModel() {
		LeaveObCacheModel leaveObCacheModel = new LeaveObCacheModel();

		leaveObCacheModel.leaveobId = getLeaveobId();

		leaveObCacheModel.employeeId = getEmployeeId();

		leaveObCacheModel.leaveTypeId = getLeaveTypeId();

		leaveObCacheModel.obVal = getObVal();

		leaveObCacheModel.isApprove = isIsApprove();

		return leaveObCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{leaveobId=");
		sb.append(getLeaveobId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", obVal=");
		sb.append(getObVal());
		sb.append(", isApprove=");
		sb.append(isIsApprove());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.LeaveOb");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveobId</column-name><column-value><![CDATA[");
		sb.append(getLeaveobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>obVal</column-name><column-value><![CDATA[");
		sb.append(getObVal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApprove</column-name><column-value><![CDATA[");
		sb.append(isIsApprove());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LeaveOb.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveOb.class, ModelWrapper.class
		};
	private long _leaveobId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _leaveTypeId;
	private long _originalLeaveTypeId;
	private boolean _setOriginalLeaveTypeId;
	private int _obVal;
	private boolean _isApprove;
	private long _columnBitmask;
	private LeaveOb _escapedModel;
}