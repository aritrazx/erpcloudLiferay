/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly;
import com.liferay.famocom.erpcloud.model.TaxDeclarationMonthlyModel;
import com.liferay.famocom.erpcloud.model.TaxDeclarationMonthlySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TaxDeclarationMonthly service. Represents a row in the &quot;taxDeclarationMonthly&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TaxDeclarationMonthlyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaxDeclarationMonthlyImpl}.
 * </p>
 *
 * @author Samaresh
 * @see TaxDeclarationMonthlyImpl
 * @see TaxDeclarationMonthly
 * @see TaxDeclarationMonthlyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TaxDeclarationMonthlyModelImpl extends BaseModelImpl<TaxDeclarationMonthly>
	implements TaxDeclarationMonthlyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tax declaration monthly model instance should use the {@link TaxDeclarationMonthly} interface instead.
	 */
	public static final String TABLE_NAME = "taxDeclarationMonthly";
	public static final Object[][] TABLE_COLUMNS = {
			{ "taxDeclarationMonthlyId", Types.BIGINT },
			{ "taxDeclarationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "financialYear", Types.VARCHAR },
			{ "monthYear", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "hraFromDate", Types.VARCHAR },
			{ "hraToDate", Types.VARCHAR },
			{ "hraCity", Types.VARCHAR },
			{ "hraIsmetro", Types.VARCHAR },
			{ "hraLandlordPan", Types.VARCHAR },
			{ "hraRent", Types.DOUBLE },
			{ "medicalIndividual", Types.DOUBLE },
			{ "medicalParents", Types.DOUBLE },
			{ "medicalParentsSenior", Types.DOUBLE },
			{ "medicalHandiLess80", Types.DOUBLE },
			{ "medicalHandiGater80", Types.DOUBLE },
			{ "medicalGater60Less80", Types.DOUBLE },
			{ "medicalGater80", Types.DOUBLE },
			{ "educationLoan", Types.DOUBLE },
			{ "physicalDisability", Types.DOUBLE },
			{ "physicalDisabilitySevere", Types.DOUBLE },
			{ "equitySavings", Types.DOUBLE },
			{ "interestOnDeposit", Types.DOUBLE },
			{ "nationalPension", Types.DOUBLE },
			{ "lic", Types.DOUBLE },
			{ "ppf", Types.DOUBLE },
			{ "nsc", Types.DOUBLE },
			{ "infraBonds", Types.DOUBLE },
			{ "tuitionFees", Types.DOUBLE },
			{ "mutualFunds", Types.DOUBLE },
			{ "sukanya", Types.DOUBLE },
			{ "ulip", Types.DOUBLE },
			{ "timeDeposit", Types.DOUBLE },
			{ "housingLoan", Types.DOUBLE },
			{ "fixedDeposit", Types.DOUBLE },
			{ "nscInterest", Types.DOUBLE },
			{ "housingLoanInterest", Types.DOUBLE },
			{ "housingAddress", Types.VARCHAR },
			{ "previousIncome", Types.DOUBLE },
			{ "previousPf", Types.DOUBLE },
			{ "previousPt", Types.DOUBLE },
			{ "previousTds", Types.DOUBLE },
			{ "islock", Types.BOOLEAN },
			{ "finalSubmission", Types.BOOLEAN },
			{ "hraExempt", Types.DOUBLE },
			{ "sectionBExempt", Types.DOUBLE },
			{ "sectionCExempt", Types.DOUBLE },
			{ "sectionDExempt", Types.DOUBLE },
			{ "salaryAfterExempt", Types.DOUBLE },
			{ "salaryBeforeExempt", Types.DOUBLE },
			{ "taxRate", Types.DOUBLE },
			{ "grossTds", Types.DOUBLE },
			{ "totalTds", Types.DOUBLE },
			{ "tdsDeducted", Types.DOUBLE },
			{ "tdsDuePerMonth", Types.DOUBLE },
			{ "educationCess", Types.DOUBLE },
			{ "totalPtax", Types.DOUBLE },
			{ "totalProvidentFund", Types.DOUBLE },
			{ "totalConveyance", Types.DOUBLE },
			{ "addedDate", Types.TIMESTAMP },
			{ "currentMonthTax", Types.DOUBLE },
			{ "sectionEExempt", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("taxDeclarationMonthlyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taxDeclarationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("financialYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monthYear", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hraFromDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hraToDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hraCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hraIsmetro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hraLandlordPan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hraRent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalIndividual", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalParents", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalParentsSenior", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalHandiLess80", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalHandiGater80", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalGater60Less80", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("medicalGater80", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("educationLoan", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("physicalDisability", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("physicalDisabilitySevere", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("equitySavings", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("interestOnDeposit", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("nationalPension", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("lic", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ppf", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("nsc", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("infraBonds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tuitionFees", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("mutualFunds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sukanya", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ulip", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("timeDeposit", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("housingLoan", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("fixedDeposit", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("nscInterest", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("housingLoanInterest", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("housingAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("previousIncome", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("previousPf", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("previousPt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("previousTds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("islock", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("finalSubmission", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hraExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sectionBExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sectionCExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sectionDExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("salaryAfterExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("salaryBeforeExempt", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("taxRate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("grossTds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalTds", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tdsDeducted", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tdsDuePerMonth", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("educationCess", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalPtax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalProvidentFund", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("totalConveyance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentMonthTax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sectionEExempt", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table taxDeclarationMonthly (taxDeclarationMonthlyId LONG not null primary key,taxDeclarationId LONG,companyId LONG,financialYear VARCHAR(75) null,monthYear LONG,employeeId LONG,hraFromDate VARCHAR(75) null,hraToDate VARCHAR(75) null,hraCity VARCHAR(75) null,hraIsmetro VARCHAR(75) null,hraLandlordPan VARCHAR(75) null,hraRent DOUBLE,medicalIndividual DOUBLE,medicalParents DOUBLE,medicalParentsSenior DOUBLE,medicalHandiLess80 DOUBLE,medicalHandiGater80 DOUBLE,medicalGater60Less80 DOUBLE,medicalGater80 DOUBLE,educationLoan DOUBLE,physicalDisability DOUBLE,physicalDisabilitySevere DOUBLE,equitySavings DOUBLE,interestOnDeposit DOUBLE,nationalPension DOUBLE,lic DOUBLE,ppf DOUBLE,nsc DOUBLE,infraBonds DOUBLE,tuitionFees DOUBLE,mutualFunds DOUBLE,sukanya DOUBLE,ulip DOUBLE,timeDeposit DOUBLE,housingLoan DOUBLE,fixedDeposit DOUBLE,nscInterest DOUBLE,housingLoanInterest DOUBLE,housingAddress VARCHAR(75) null,previousIncome DOUBLE,previousPf DOUBLE,previousPt DOUBLE,previousTds DOUBLE,islock BOOLEAN,finalSubmission BOOLEAN,hraExempt DOUBLE,sectionBExempt DOUBLE,sectionCExempt DOUBLE,sectionDExempt DOUBLE,salaryAfterExempt DOUBLE,salaryBeforeExempt DOUBLE,taxRate DOUBLE,grossTds DOUBLE,totalTds DOUBLE,tdsDeducted DOUBLE,tdsDuePerMonth DOUBLE,educationCess DOUBLE,totalPtax DOUBLE,totalProvidentFund DOUBLE,totalConveyance DOUBLE,addedDate DATE null,currentMonthTax DOUBLE,sectionEExempt DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table taxDeclarationMonthly";
	public static final String ORDER_BY_JPQL = " ORDER BY taxDeclarationMonthly.taxDeclarationMonthlyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY taxDeclarationMonthly.taxDeclarationMonthlyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long MONTHYEAR_COLUMN_BITMASK = 2L;
	public static final long TAXDECLARATIONMONTHLYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TaxDeclarationMonthly toModel(
		TaxDeclarationMonthlySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TaxDeclarationMonthly model = new TaxDeclarationMonthlyImpl();

		model.setTaxDeclarationMonthlyId(soapModel.getTaxDeclarationMonthlyId());
		model.setTaxDeclarationId(soapModel.getTaxDeclarationId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setFinancialYear(soapModel.getFinancialYear());
		model.setMonthYear(soapModel.getMonthYear());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setHraFromDate(soapModel.getHraFromDate());
		model.setHraToDate(soapModel.getHraToDate());
		model.setHraCity(soapModel.getHraCity());
		model.setHraIsmetro(soapModel.getHraIsmetro());
		model.setHraLandlordPan(soapModel.getHraLandlordPan());
		model.setHraRent(soapModel.getHraRent());
		model.setMedicalIndividual(soapModel.getMedicalIndividual());
		model.setMedicalParents(soapModel.getMedicalParents());
		model.setMedicalParentsSenior(soapModel.getMedicalParentsSenior());
		model.setMedicalHandiLess80(soapModel.getMedicalHandiLess80());
		model.setMedicalHandiGater80(soapModel.getMedicalHandiGater80());
		model.setMedicalGater60Less80(soapModel.getMedicalGater60Less80());
		model.setMedicalGater80(soapModel.getMedicalGater80());
		model.setEducationLoan(soapModel.getEducationLoan());
		model.setPhysicalDisability(soapModel.getPhysicalDisability());
		model.setPhysicalDisabilitySevere(soapModel.getPhysicalDisabilitySevere());
		model.setEquitySavings(soapModel.getEquitySavings());
		model.setInterestOnDeposit(soapModel.getInterestOnDeposit());
		model.setNationalPension(soapModel.getNationalPension());
		model.setLic(soapModel.getLic());
		model.setPpf(soapModel.getPpf());
		model.setNsc(soapModel.getNsc());
		model.setInfraBonds(soapModel.getInfraBonds());
		model.setTuitionFees(soapModel.getTuitionFees());
		model.setMutualFunds(soapModel.getMutualFunds());
		model.setSukanya(soapModel.getSukanya());
		model.setUlip(soapModel.getUlip());
		model.setTimeDeposit(soapModel.getTimeDeposit());
		model.setHousingLoan(soapModel.getHousingLoan());
		model.setFixedDeposit(soapModel.getFixedDeposit());
		model.setNscInterest(soapModel.getNscInterest());
		model.setHousingLoanInterest(soapModel.getHousingLoanInterest());
		model.setHousingAddress(soapModel.getHousingAddress());
		model.setPreviousIncome(soapModel.getPreviousIncome());
		model.setPreviousPf(soapModel.getPreviousPf());
		model.setPreviousPt(soapModel.getPreviousPt());
		model.setPreviousTds(soapModel.getPreviousTds());
		model.setIslock(soapModel.isIslock());
		model.setFinalSubmission(soapModel.isFinalSubmission());
		model.setHraExempt(soapModel.getHraExempt());
		model.setSectionBExempt(soapModel.getSectionBExempt());
		model.setSectionCExempt(soapModel.getSectionCExempt());
		model.setSectionDExempt(soapModel.getSectionDExempt());
		model.setSalaryAfterExempt(soapModel.getSalaryAfterExempt());
		model.setSalaryBeforeExempt(soapModel.getSalaryBeforeExempt());
		model.setTaxRate(soapModel.getTaxRate());
		model.setGrossTds(soapModel.getGrossTds());
		model.setTotalTds(soapModel.getTotalTds());
		model.setTdsDeducted(soapModel.getTdsDeducted());
		model.setTdsDuePerMonth(soapModel.getTdsDuePerMonth());
		model.setEducationCess(soapModel.getEducationCess());
		model.setTotalPtax(soapModel.getTotalPtax());
		model.setTotalProvidentFund(soapModel.getTotalProvidentFund());
		model.setTotalConveyance(soapModel.getTotalConveyance());
		model.setAddedDate(soapModel.getAddedDate());
		model.setCurrentMonthTax(soapModel.getCurrentMonthTax());
		model.setSectionEExempt(soapModel.getSectionEExempt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TaxDeclarationMonthly> toModels(
		TaxDeclarationMonthlySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TaxDeclarationMonthly> models = new ArrayList<TaxDeclarationMonthly>(soapModels.length);

		for (TaxDeclarationMonthlySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly"));

	public TaxDeclarationMonthlyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taxDeclarationMonthlyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaxDeclarationMonthlyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taxDeclarationMonthlyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TaxDeclarationMonthly.class;
	}

	@Override
	public String getModelClassName() {
		return TaxDeclarationMonthly.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("taxDeclarationMonthlyId", getTaxDeclarationMonthlyId());
		attributes.put("taxDeclarationId", getTaxDeclarationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("financialYear", getFinancialYear());
		attributes.put("monthYear", getMonthYear());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("hraFromDate", getHraFromDate());
		attributes.put("hraToDate", getHraToDate());
		attributes.put("hraCity", getHraCity());
		attributes.put("hraIsmetro", getHraIsmetro());
		attributes.put("hraLandlordPan", getHraLandlordPan());
		attributes.put("hraRent", getHraRent());
		attributes.put("medicalIndividual", getMedicalIndividual());
		attributes.put("medicalParents", getMedicalParents());
		attributes.put("medicalParentsSenior", getMedicalParentsSenior());
		attributes.put("medicalHandiLess80", getMedicalHandiLess80());
		attributes.put("medicalHandiGater80", getMedicalHandiGater80());
		attributes.put("medicalGater60Less80", getMedicalGater60Less80());
		attributes.put("medicalGater80", getMedicalGater80());
		attributes.put("educationLoan", getEducationLoan());
		attributes.put("physicalDisability", getPhysicalDisability());
		attributes.put("physicalDisabilitySevere", getPhysicalDisabilitySevere());
		attributes.put("equitySavings", getEquitySavings());
		attributes.put("interestOnDeposit", getInterestOnDeposit());
		attributes.put("nationalPension", getNationalPension());
		attributes.put("lic", getLic());
		attributes.put("ppf", getPpf());
		attributes.put("nsc", getNsc());
		attributes.put("infraBonds", getInfraBonds());
		attributes.put("tuitionFees", getTuitionFees());
		attributes.put("mutualFunds", getMutualFunds());
		attributes.put("sukanya", getSukanya());
		attributes.put("ulip", getUlip());
		attributes.put("timeDeposit", getTimeDeposit());
		attributes.put("housingLoan", getHousingLoan());
		attributes.put("fixedDeposit", getFixedDeposit());
		attributes.put("nscInterest", getNscInterest());
		attributes.put("housingLoanInterest", getHousingLoanInterest());
		attributes.put("housingAddress", getHousingAddress());
		attributes.put("previousIncome", getPreviousIncome());
		attributes.put("previousPf", getPreviousPf());
		attributes.put("previousPt", getPreviousPt());
		attributes.put("previousTds", getPreviousTds());
		attributes.put("islock", isIslock());
		attributes.put("finalSubmission", isFinalSubmission());
		attributes.put("hraExempt", getHraExempt());
		attributes.put("sectionBExempt", getSectionBExempt());
		attributes.put("sectionCExempt", getSectionCExempt());
		attributes.put("sectionDExempt", getSectionDExempt());
		attributes.put("salaryAfterExempt", getSalaryAfterExempt());
		attributes.put("salaryBeforeExempt", getSalaryBeforeExempt());
		attributes.put("taxRate", getTaxRate());
		attributes.put("grossTds", getGrossTds());
		attributes.put("totalTds", getTotalTds());
		attributes.put("tdsDeducted", getTdsDeducted());
		attributes.put("tdsDuePerMonth", getTdsDuePerMonth());
		attributes.put("educationCess", getEducationCess());
		attributes.put("totalPtax", getTotalPtax());
		attributes.put("totalProvidentFund", getTotalProvidentFund());
		attributes.put("totalConveyance", getTotalConveyance());
		attributes.put("addedDate", getAddedDate());
		attributes.put("currentMonthTax", getCurrentMonthTax());
		attributes.put("sectionEExempt", getSectionEExempt());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long taxDeclarationMonthlyId = (Long)attributes.get(
				"taxDeclarationMonthlyId");

		if (taxDeclarationMonthlyId != null) {
			setTaxDeclarationMonthlyId(taxDeclarationMonthlyId);
		}

		Long taxDeclarationId = (Long)attributes.get("taxDeclarationId");

		if (taxDeclarationId != null) {
			setTaxDeclarationId(taxDeclarationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String financialYear = (String)attributes.get("financialYear");

		if (financialYear != null) {
			setFinancialYear(financialYear);
		}

		Long monthYear = (Long)attributes.get("monthYear");

		if (monthYear != null) {
			setMonthYear(monthYear);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		String hraFromDate = (String)attributes.get("hraFromDate");

		if (hraFromDate != null) {
			setHraFromDate(hraFromDate);
		}

		String hraToDate = (String)attributes.get("hraToDate");

		if (hraToDate != null) {
			setHraToDate(hraToDate);
		}

		String hraCity = (String)attributes.get("hraCity");

		if (hraCity != null) {
			setHraCity(hraCity);
		}

		String hraIsmetro = (String)attributes.get("hraIsmetro");

		if (hraIsmetro != null) {
			setHraIsmetro(hraIsmetro);
		}

		String hraLandlordPan = (String)attributes.get("hraLandlordPan");

		if (hraLandlordPan != null) {
			setHraLandlordPan(hraLandlordPan);
		}

		Double hraRent = (Double)attributes.get("hraRent");

		if (hraRent != null) {
			setHraRent(hraRent);
		}

		Double medicalIndividual = (Double)attributes.get("medicalIndividual");

		if (medicalIndividual != null) {
			setMedicalIndividual(medicalIndividual);
		}

		Double medicalParents = (Double)attributes.get("medicalParents");

		if (medicalParents != null) {
			setMedicalParents(medicalParents);
		}

		Double medicalParentsSenior = (Double)attributes.get(
				"medicalParentsSenior");

		if (medicalParentsSenior != null) {
			setMedicalParentsSenior(medicalParentsSenior);
		}

		Double medicalHandiLess80 = (Double)attributes.get("medicalHandiLess80");

		if (medicalHandiLess80 != null) {
			setMedicalHandiLess80(medicalHandiLess80);
		}

		Double medicalHandiGater80 = (Double)attributes.get(
				"medicalHandiGater80");

		if (medicalHandiGater80 != null) {
			setMedicalHandiGater80(medicalHandiGater80);
		}

		Double medicalGater60Less80 = (Double)attributes.get(
				"medicalGater60Less80");

		if (medicalGater60Less80 != null) {
			setMedicalGater60Less80(medicalGater60Less80);
		}

		Double medicalGater80 = (Double)attributes.get("medicalGater80");

		if (medicalGater80 != null) {
			setMedicalGater80(medicalGater80);
		}

		Double educationLoan = (Double)attributes.get("educationLoan");

		if (educationLoan != null) {
			setEducationLoan(educationLoan);
		}

		Double physicalDisability = (Double)attributes.get("physicalDisability");

		if (physicalDisability != null) {
			setPhysicalDisability(physicalDisability);
		}

		Double physicalDisabilitySevere = (Double)attributes.get(
				"physicalDisabilitySevere");

		if (physicalDisabilitySevere != null) {
			setPhysicalDisabilitySevere(physicalDisabilitySevere);
		}

		Double equitySavings = (Double)attributes.get("equitySavings");

		if (equitySavings != null) {
			setEquitySavings(equitySavings);
		}

		Double interestOnDeposit = (Double)attributes.get("interestOnDeposit");

		if (interestOnDeposit != null) {
			setInterestOnDeposit(interestOnDeposit);
		}

		Double nationalPension = (Double)attributes.get("nationalPension");

		if (nationalPension != null) {
			setNationalPension(nationalPension);
		}

		Double lic = (Double)attributes.get("lic");

		if (lic != null) {
			setLic(lic);
		}

		Double ppf = (Double)attributes.get("ppf");

		if (ppf != null) {
			setPpf(ppf);
		}

		Double nsc = (Double)attributes.get("nsc");

		if (nsc != null) {
			setNsc(nsc);
		}

		Double infraBonds = (Double)attributes.get("infraBonds");

		if (infraBonds != null) {
			setInfraBonds(infraBonds);
		}

		Double tuitionFees = (Double)attributes.get("tuitionFees");

		if (tuitionFees != null) {
			setTuitionFees(tuitionFees);
		}

		Double mutualFunds = (Double)attributes.get("mutualFunds");

		if (mutualFunds != null) {
			setMutualFunds(mutualFunds);
		}

		Double sukanya = (Double)attributes.get("sukanya");

		if (sukanya != null) {
			setSukanya(sukanya);
		}

		Double ulip = (Double)attributes.get("ulip");

		if (ulip != null) {
			setUlip(ulip);
		}

		Double timeDeposit = (Double)attributes.get("timeDeposit");

		if (timeDeposit != null) {
			setTimeDeposit(timeDeposit);
		}

		Double housingLoan = (Double)attributes.get("housingLoan");

		if (housingLoan != null) {
			setHousingLoan(housingLoan);
		}

		Double fixedDeposit = (Double)attributes.get("fixedDeposit");

		if (fixedDeposit != null) {
			setFixedDeposit(fixedDeposit);
		}

		Double nscInterest = (Double)attributes.get("nscInterest");

		if (nscInterest != null) {
			setNscInterest(nscInterest);
		}

		Double housingLoanInterest = (Double)attributes.get(
				"housingLoanInterest");

		if (housingLoanInterest != null) {
			setHousingLoanInterest(housingLoanInterest);
		}

		String housingAddress = (String)attributes.get("housingAddress");

		if (housingAddress != null) {
			setHousingAddress(housingAddress);
		}

		Double previousIncome = (Double)attributes.get("previousIncome");

		if (previousIncome != null) {
			setPreviousIncome(previousIncome);
		}

		Double previousPf = (Double)attributes.get("previousPf");

		if (previousPf != null) {
			setPreviousPf(previousPf);
		}

		Double previousPt = (Double)attributes.get("previousPt");

		if (previousPt != null) {
			setPreviousPt(previousPt);
		}

		Double previousTds = (Double)attributes.get("previousTds");

		if (previousTds != null) {
			setPreviousTds(previousTds);
		}

		Boolean islock = (Boolean)attributes.get("islock");

		if (islock != null) {
			setIslock(islock);
		}

		Boolean finalSubmission = (Boolean)attributes.get("finalSubmission");

		if (finalSubmission != null) {
			setFinalSubmission(finalSubmission);
		}

		Double hraExempt = (Double)attributes.get("hraExempt");

		if (hraExempt != null) {
			setHraExempt(hraExempt);
		}

		Double sectionBExempt = (Double)attributes.get("sectionBExempt");

		if (sectionBExempt != null) {
			setSectionBExempt(sectionBExempt);
		}

		Double sectionCExempt = (Double)attributes.get("sectionCExempt");

		if (sectionCExempt != null) {
			setSectionCExempt(sectionCExempt);
		}

		Double sectionDExempt = (Double)attributes.get("sectionDExempt");

		if (sectionDExempt != null) {
			setSectionDExempt(sectionDExempt);
		}

		Double salaryAfterExempt = (Double)attributes.get("salaryAfterExempt");

		if (salaryAfterExempt != null) {
			setSalaryAfterExempt(salaryAfterExempt);
		}

		Double salaryBeforeExempt = (Double)attributes.get("salaryBeforeExempt");

		if (salaryBeforeExempt != null) {
			setSalaryBeforeExempt(salaryBeforeExempt);
		}

		Double taxRate = (Double)attributes.get("taxRate");

		if (taxRate != null) {
			setTaxRate(taxRate);
		}

		Double grossTds = (Double)attributes.get("grossTds");

		if (grossTds != null) {
			setGrossTds(grossTds);
		}

		Double totalTds = (Double)attributes.get("totalTds");

		if (totalTds != null) {
			setTotalTds(totalTds);
		}

		Double tdsDeducted = (Double)attributes.get("tdsDeducted");

		if (tdsDeducted != null) {
			setTdsDeducted(tdsDeducted);
		}

		Double tdsDuePerMonth = (Double)attributes.get("tdsDuePerMonth");

		if (tdsDuePerMonth != null) {
			setTdsDuePerMonth(tdsDuePerMonth);
		}

		Double educationCess = (Double)attributes.get("educationCess");

		if (educationCess != null) {
			setEducationCess(educationCess);
		}

		Double totalPtax = (Double)attributes.get("totalPtax");

		if (totalPtax != null) {
			setTotalPtax(totalPtax);
		}

		Double totalProvidentFund = (Double)attributes.get("totalProvidentFund");

		if (totalProvidentFund != null) {
			setTotalProvidentFund(totalProvidentFund);
		}

		Double totalConveyance = (Double)attributes.get("totalConveyance");

		if (totalConveyance != null) {
			setTotalConveyance(totalConveyance);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Double currentMonthTax = (Double)attributes.get("currentMonthTax");

		if (currentMonthTax != null) {
			setCurrentMonthTax(currentMonthTax);
		}

		Double sectionEExempt = (Double)attributes.get("sectionEExempt");

		if (sectionEExempt != null) {
			setSectionEExempt(sectionEExempt);
		}
	}

	@JSON
	@Override
	public long getTaxDeclarationMonthlyId() {
		return _taxDeclarationMonthlyId;
	}

	@Override
	public void setTaxDeclarationMonthlyId(long taxDeclarationMonthlyId) {
		_taxDeclarationMonthlyId = taxDeclarationMonthlyId;
	}

	@JSON
	@Override
	public long getTaxDeclarationId() {
		return _taxDeclarationId;
	}

	@Override
	public void setTaxDeclarationId(long taxDeclarationId) {
		_taxDeclarationId = taxDeclarationId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getFinancialYear() {
		if (_financialYear == null) {
			return "";
		}
		else {
			return _financialYear;
		}
	}

	@Override
	public void setFinancialYear(String financialYear) {
		_financialYear = financialYear;
	}

	@JSON
	@Override
	public long getMonthYear() {
		return _monthYear;
	}

	@Override
	public void setMonthYear(long monthYear) {
		_columnBitmask |= MONTHYEAR_COLUMN_BITMASK;

		if (!_setOriginalMonthYear) {
			_setOriginalMonthYear = true;

			_originalMonthYear = _monthYear;
		}

		_monthYear = monthYear;
	}

	public long getOriginalMonthYear() {
		return _originalMonthYear;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public String getHraFromDate() {
		if (_hraFromDate == null) {
			return "";
		}
		else {
			return _hraFromDate;
		}
	}

	@Override
	public void setHraFromDate(String hraFromDate) {
		_hraFromDate = hraFromDate;
	}

	@JSON
	@Override
	public String getHraToDate() {
		if (_hraToDate == null) {
			return "";
		}
		else {
			return _hraToDate;
		}
	}

	@Override
	public void setHraToDate(String hraToDate) {
		_hraToDate = hraToDate;
	}

	@JSON
	@Override
	public String getHraCity() {
		if (_hraCity == null) {
			return "";
		}
		else {
			return _hraCity;
		}
	}

	@Override
	public void setHraCity(String hraCity) {
		_hraCity = hraCity;
	}

	@JSON
	@Override
	public String getHraIsmetro() {
		if (_hraIsmetro == null) {
			return "";
		}
		else {
			return _hraIsmetro;
		}
	}

	@Override
	public void setHraIsmetro(String hraIsmetro) {
		_hraIsmetro = hraIsmetro;
	}

	@JSON
	@Override
	public String getHraLandlordPan() {
		if (_hraLandlordPan == null) {
			return "";
		}
		else {
			return _hraLandlordPan;
		}
	}

	@Override
	public void setHraLandlordPan(String hraLandlordPan) {
		_hraLandlordPan = hraLandlordPan;
	}

	@JSON
	@Override
	public double getHraRent() {
		return _hraRent;
	}

	@Override
	public void setHraRent(double hraRent) {
		_hraRent = hraRent;
	}

	@JSON
	@Override
	public double getMedicalIndividual() {
		return _medicalIndividual;
	}

	@Override
	public void setMedicalIndividual(double medicalIndividual) {
		_medicalIndividual = medicalIndividual;
	}

	@JSON
	@Override
	public double getMedicalParents() {
		return _medicalParents;
	}

	@Override
	public void setMedicalParents(double medicalParents) {
		_medicalParents = medicalParents;
	}

	@JSON
	@Override
	public double getMedicalParentsSenior() {
		return _medicalParentsSenior;
	}

	@Override
	public void setMedicalParentsSenior(double medicalParentsSenior) {
		_medicalParentsSenior = medicalParentsSenior;
	}

	@JSON
	@Override
	public double getMedicalHandiLess80() {
		return _medicalHandiLess80;
	}

	@Override
	public void setMedicalHandiLess80(double medicalHandiLess80) {
		_medicalHandiLess80 = medicalHandiLess80;
	}

	@JSON
	@Override
	public double getMedicalHandiGater80() {
		return _medicalHandiGater80;
	}

	@Override
	public void setMedicalHandiGater80(double medicalHandiGater80) {
		_medicalHandiGater80 = medicalHandiGater80;
	}

	@JSON
	@Override
	public double getMedicalGater60Less80() {
		return _medicalGater60Less80;
	}

	@Override
	public void setMedicalGater60Less80(double medicalGater60Less80) {
		_medicalGater60Less80 = medicalGater60Less80;
	}

	@JSON
	@Override
	public double getMedicalGater80() {
		return _medicalGater80;
	}

	@Override
	public void setMedicalGater80(double medicalGater80) {
		_medicalGater80 = medicalGater80;
	}

	@JSON
	@Override
	public double getEducationLoan() {
		return _educationLoan;
	}

	@Override
	public void setEducationLoan(double educationLoan) {
		_educationLoan = educationLoan;
	}

	@JSON
	@Override
	public double getPhysicalDisability() {
		return _physicalDisability;
	}

	@Override
	public void setPhysicalDisability(double physicalDisability) {
		_physicalDisability = physicalDisability;
	}

	@JSON
	@Override
	public double getPhysicalDisabilitySevere() {
		return _physicalDisabilitySevere;
	}

	@Override
	public void setPhysicalDisabilitySevere(double physicalDisabilitySevere) {
		_physicalDisabilitySevere = physicalDisabilitySevere;
	}

	@JSON
	@Override
	public double getEquitySavings() {
		return _equitySavings;
	}

	@Override
	public void setEquitySavings(double equitySavings) {
		_equitySavings = equitySavings;
	}

	@JSON
	@Override
	public double getInterestOnDeposit() {
		return _interestOnDeposit;
	}

	@Override
	public void setInterestOnDeposit(double interestOnDeposit) {
		_interestOnDeposit = interestOnDeposit;
	}

	@JSON
	@Override
	public double getNationalPension() {
		return _nationalPension;
	}

	@Override
	public void setNationalPension(double nationalPension) {
		_nationalPension = nationalPension;
	}

	@JSON
	@Override
	public double getLic() {
		return _lic;
	}

	@Override
	public void setLic(double lic) {
		_lic = lic;
	}

	@JSON
	@Override
	public double getPpf() {
		return _ppf;
	}

	@Override
	public void setPpf(double ppf) {
		_ppf = ppf;
	}

	@JSON
	@Override
	public double getNsc() {
		return _nsc;
	}

	@Override
	public void setNsc(double nsc) {
		_nsc = nsc;
	}

	@JSON
	@Override
	public double getInfraBonds() {
		return _infraBonds;
	}

	@Override
	public void setInfraBonds(double infraBonds) {
		_infraBonds = infraBonds;
	}

	@JSON
	@Override
	public double getTuitionFees() {
		return _tuitionFees;
	}

	@Override
	public void setTuitionFees(double tuitionFees) {
		_tuitionFees = tuitionFees;
	}

	@JSON
	@Override
	public double getMutualFunds() {
		return _mutualFunds;
	}

	@Override
	public void setMutualFunds(double mutualFunds) {
		_mutualFunds = mutualFunds;
	}

	@JSON
	@Override
	public double getSukanya() {
		return _sukanya;
	}

	@Override
	public void setSukanya(double sukanya) {
		_sukanya = sukanya;
	}

	@JSON
	@Override
	public double getUlip() {
		return _ulip;
	}

	@Override
	public void setUlip(double ulip) {
		_ulip = ulip;
	}

	@JSON
	@Override
	public double getTimeDeposit() {
		return _timeDeposit;
	}

	@Override
	public void setTimeDeposit(double timeDeposit) {
		_timeDeposit = timeDeposit;
	}

	@JSON
	@Override
	public double getHousingLoan() {
		return _housingLoan;
	}

	@Override
	public void setHousingLoan(double housingLoan) {
		_housingLoan = housingLoan;
	}

	@JSON
	@Override
	public double getFixedDeposit() {
		return _fixedDeposit;
	}

	@Override
	public void setFixedDeposit(double fixedDeposit) {
		_fixedDeposit = fixedDeposit;
	}

	@JSON
	@Override
	public double getNscInterest() {
		return _nscInterest;
	}

	@Override
	public void setNscInterest(double nscInterest) {
		_nscInterest = nscInterest;
	}

	@JSON
	@Override
	public double getHousingLoanInterest() {
		return _housingLoanInterest;
	}

	@Override
	public void setHousingLoanInterest(double housingLoanInterest) {
		_housingLoanInterest = housingLoanInterest;
	}

	@JSON
	@Override
	public String getHousingAddress() {
		if (_housingAddress == null) {
			return "";
		}
		else {
			return _housingAddress;
		}
	}

	@Override
	public void setHousingAddress(String housingAddress) {
		_housingAddress = housingAddress;
	}

	@JSON
	@Override
	public double getPreviousIncome() {
		return _previousIncome;
	}

	@Override
	public void setPreviousIncome(double previousIncome) {
		_previousIncome = previousIncome;
	}

	@JSON
	@Override
	public double getPreviousPf() {
		return _previousPf;
	}

	@Override
	public void setPreviousPf(double previousPf) {
		_previousPf = previousPf;
	}

	@JSON
	@Override
	public double getPreviousPt() {
		return _previousPt;
	}

	@Override
	public void setPreviousPt(double previousPt) {
		_previousPt = previousPt;
	}

	@JSON
	@Override
	public double getPreviousTds() {
		return _previousTds;
	}

	@Override
	public void setPreviousTds(double previousTds) {
		_previousTds = previousTds;
	}

	@JSON
	@Override
	public boolean getIslock() {
		return _islock;
	}

	@JSON
	@Override
	public boolean isIslock() {
		return _islock;
	}

	@Override
	public void setIslock(boolean islock) {
		_islock = islock;
	}

	@JSON
	@Override
	public boolean getFinalSubmission() {
		return _finalSubmission;
	}

	@JSON
	@Override
	public boolean isFinalSubmission() {
		return _finalSubmission;
	}

	@Override
	public void setFinalSubmission(boolean finalSubmission) {
		_finalSubmission = finalSubmission;
	}

	@JSON
	@Override
	public double getHraExempt() {
		return _hraExempt;
	}

	@Override
	public void setHraExempt(double hraExempt) {
		_hraExempt = hraExempt;
	}

	@JSON
	@Override
	public double getSectionBExempt() {
		return _sectionBExempt;
	}

	@Override
	public void setSectionBExempt(double sectionBExempt) {
		_sectionBExempt = sectionBExempt;
	}

	@JSON
	@Override
	public double getSectionCExempt() {
		return _sectionCExempt;
	}

	@Override
	public void setSectionCExempt(double sectionCExempt) {
		_sectionCExempt = sectionCExempt;
	}

	@JSON
	@Override
	public double getSectionDExempt() {
		return _sectionDExempt;
	}

	@Override
	public void setSectionDExempt(double sectionDExempt) {
		_sectionDExempt = sectionDExempt;
	}

	@JSON
	@Override
	public double getSalaryAfterExempt() {
		return _salaryAfterExempt;
	}

	@Override
	public void setSalaryAfterExempt(double salaryAfterExempt) {
		_salaryAfterExempt = salaryAfterExempt;
	}

	@JSON
	@Override
	public double getSalaryBeforeExempt() {
		return _salaryBeforeExempt;
	}

	@Override
	public void setSalaryBeforeExempt(double salaryBeforeExempt) {
		_salaryBeforeExempt = salaryBeforeExempt;
	}

	@JSON
	@Override
	public double getTaxRate() {
		return _taxRate;
	}

	@Override
	public void setTaxRate(double taxRate) {
		_taxRate = taxRate;
	}

	@JSON
	@Override
	public double getGrossTds() {
		return _grossTds;
	}

	@Override
	public void setGrossTds(double grossTds) {
		_grossTds = grossTds;
	}

	@JSON
	@Override
	public double getTotalTds() {
		return _totalTds;
	}

	@Override
	public void setTotalTds(double totalTds) {
		_totalTds = totalTds;
	}

	@JSON
	@Override
	public double getTdsDeducted() {
		return _tdsDeducted;
	}

	@Override
	public void setTdsDeducted(double tdsDeducted) {
		_tdsDeducted = tdsDeducted;
	}

	@JSON
	@Override
	public double getTdsDuePerMonth() {
		return _tdsDuePerMonth;
	}

	@Override
	public void setTdsDuePerMonth(double tdsDuePerMonth) {
		_tdsDuePerMonth = tdsDuePerMonth;
	}

	@JSON
	@Override
	public double getEducationCess() {
		return _educationCess;
	}

	@Override
	public void setEducationCess(double educationCess) {
		_educationCess = educationCess;
	}

	@JSON
	@Override
	public double getTotalPtax() {
		return _totalPtax;
	}

	@Override
	public void setTotalPtax(double totalPtax) {
		_totalPtax = totalPtax;
	}

	@JSON
	@Override
	public double getTotalProvidentFund() {
		return _totalProvidentFund;
	}

	@Override
	public void setTotalProvidentFund(double totalProvidentFund) {
		_totalProvidentFund = totalProvidentFund;
	}

	@JSON
	@Override
	public double getTotalConveyance() {
		return _totalConveyance;
	}

	@Override
	public void setTotalConveyance(double totalConveyance) {
		_totalConveyance = totalConveyance;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public double getCurrentMonthTax() {
		return _currentMonthTax;
	}

	@Override
	public void setCurrentMonthTax(double currentMonthTax) {
		_currentMonthTax = currentMonthTax;
	}

	@JSON
	@Override
	public double getSectionEExempt() {
		return _sectionEExempt;
	}

	@Override
	public void setSectionEExempt(double sectionEExempt) {
		_sectionEExempt = sectionEExempt;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TaxDeclarationMonthly.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TaxDeclarationMonthly toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TaxDeclarationMonthly)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaxDeclarationMonthlyImpl taxDeclarationMonthlyImpl = new TaxDeclarationMonthlyImpl();

		taxDeclarationMonthlyImpl.setTaxDeclarationMonthlyId(getTaxDeclarationMonthlyId());
		taxDeclarationMonthlyImpl.setTaxDeclarationId(getTaxDeclarationId());
		taxDeclarationMonthlyImpl.setCompanyId(getCompanyId());
		taxDeclarationMonthlyImpl.setFinancialYear(getFinancialYear());
		taxDeclarationMonthlyImpl.setMonthYear(getMonthYear());
		taxDeclarationMonthlyImpl.setEmployeeId(getEmployeeId());
		taxDeclarationMonthlyImpl.setHraFromDate(getHraFromDate());
		taxDeclarationMonthlyImpl.setHraToDate(getHraToDate());
		taxDeclarationMonthlyImpl.setHraCity(getHraCity());
		taxDeclarationMonthlyImpl.setHraIsmetro(getHraIsmetro());
		taxDeclarationMonthlyImpl.setHraLandlordPan(getHraLandlordPan());
		taxDeclarationMonthlyImpl.setHraRent(getHraRent());
		taxDeclarationMonthlyImpl.setMedicalIndividual(getMedicalIndividual());
		taxDeclarationMonthlyImpl.setMedicalParents(getMedicalParents());
		taxDeclarationMonthlyImpl.setMedicalParentsSenior(getMedicalParentsSenior());
		taxDeclarationMonthlyImpl.setMedicalHandiLess80(getMedicalHandiLess80());
		taxDeclarationMonthlyImpl.setMedicalHandiGater80(getMedicalHandiGater80());
		taxDeclarationMonthlyImpl.setMedicalGater60Less80(getMedicalGater60Less80());
		taxDeclarationMonthlyImpl.setMedicalGater80(getMedicalGater80());
		taxDeclarationMonthlyImpl.setEducationLoan(getEducationLoan());
		taxDeclarationMonthlyImpl.setPhysicalDisability(getPhysicalDisability());
		taxDeclarationMonthlyImpl.setPhysicalDisabilitySevere(getPhysicalDisabilitySevere());
		taxDeclarationMonthlyImpl.setEquitySavings(getEquitySavings());
		taxDeclarationMonthlyImpl.setInterestOnDeposit(getInterestOnDeposit());
		taxDeclarationMonthlyImpl.setNationalPension(getNationalPension());
		taxDeclarationMonthlyImpl.setLic(getLic());
		taxDeclarationMonthlyImpl.setPpf(getPpf());
		taxDeclarationMonthlyImpl.setNsc(getNsc());
		taxDeclarationMonthlyImpl.setInfraBonds(getInfraBonds());
		taxDeclarationMonthlyImpl.setTuitionFees(getTuitionFees());
		taxDeclarationMonthlyImpl.setMutualFunds(getMutualFunds());
		taxDeclarationMonthlyImpl.setSukanya(getSukanya());
		taxDeclarationMonthlyImpl.setUlip(getUlip());
		taxDeclarationMonthlyImpl.setTimeDeposit(getTimeDeposit());
		taxDeclarationMonthlyImpl.setHousingLoan(getHousingLoan());
		taxDeclarationMonthlyImpl.setFixedDeposit(getFixedDeposit());
		taxDeclarationMonthlyImpl.setNscInterest(getNscInterest());
		taxDeclarationMonthlyImpl.setHousingLoanInterest(getHousingLoanInterest());
		taxDeclarationMonthlyImpl.setHousingAddress(getHousingAddress());
		taxDeclarationMonthlyImpl.setPreviousIncome(getPreviousIncome());
		taxDeclarationMonthlyImpl.setPreviousPf(getPreviousPf());
		taxDeclarationMonthlyImpl.setPreviousPt(getPreviousPt());
		taxDeclarationMonthlyImpl.setPreviousTds(getPreviousTds());
		taxDeclarationMonthlyImpl.setIslock(isIslock());
		taxDeclarationMonthlyImpl.setFinalSubmission(isFinalSubmission());
		taxDeclarationMonthlyImpl.setHraExempt(getHraExempt());
		taxDeclarationMonthlyImpl.setSectionBExempt(getSectionBExempt());
		taxDeclarationMonthlyImpl.setSectionCExempt(getSectionCExempt());
		taxDeclarationMonthlyImpl.setSectionDExempt(getSectionDExempt());
		taxDeclarationMonthlyImpl.setSalaryAfterExempt(getSalaryAfterExempt());
		taxDeclarationMonthlyImpl.setSalaryBeforeExempt(getSalaryBeforeExempt());
		taxDeclarationMonthlyImpl.setTaxRate(getTaxRate());
		taxDeclarationMonthlyImpl.setGrossTds(getGrossTds());
		taxDeclarationMonthlyImpl.setTotalTds(getTotalTds());
		taxDeclarationMonthlyImpl.setTdsDeducted(getTdsDeducted());
		taxDeclarationMonthlyImpl.setTdsDuePerMonth(getTdsDuePerMonth());
		taxDeclarationMonthlyImpl.setEducationCess(getEducationCess());
		taxDeclarationMonthlyImpl.setTotalPtax(getTotalPtax());
		taxDeclarationMonthlyImpl.setTotalProvidentFund(getTotalProvidentFund());
		taxDeclarationMonthlyImpl.setTotalConveyance(getTotalConveyance());
		taxDeclarationMonthlyImpl.setAddedDate(getAddedDate());
		taxDeclarationMonthlyImpl.setCurrentMonthTax(getCurrentMonthTax());
		taxDeclarationMonthlyImpl.setSectionEExempt(getSectionEExempt());

		taxDeclarationMonthlyImpl.resetOriginalValues();

		return taxDeclarationMonthlyImpl;
	}

	@Override
	public int compareTo(TaxDeclarationMonthly taxDeclarationMonthly) {
		long primaryKey = taxDeclarationMonthly.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TaxDeclarationMonthly)) {
			return false;
		}

		TaxDeclarationMonthly taxDeclarationMonthly = (TaxDeclarationMonthly)obj;

		long primaryKey = taxDeclarationMonthly.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TaxDeclarationMonthlyModelImpl taxDeclarationMonthlyModelImpl = this;

		taxDeclarationMonthlyModelImpl._originalMonthYear = taxDeclarationMonthlyModelImpl._monthYear;

		taxDeclarationMonthlyModelImpl._setOriginalMonthYear = false;

		taxDeclarationMonthlyModelImpl._originalEmployeeId = taxDeclarationMonthlyModelImpl._employeeId;

		taxDeclarationMonthlyModelImpl._setOriginalEmployeeId = false;

		taxDeclarationMonthlyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TaxDeclarationMonthly> toCacheModel() {
		TaxDeclarationMonthlyCacheModel taxDeclarationMonthlyCacheModel = new TaxDeclarationMonthlyCacheModel();

		taxDeclarationMonthlyCacheModel.taxDeclarationMonthlyId = getTaxDeclarationMonthlyId();

		taxDeclarationMonthlyCacheModel.taxDeclarationId = getTaxDeclarationId();

		taxDeclarationMonthlyCacheModel.companyId = getCompanyId();

		taxDeclarationMonthlyCacheModel.financialYear = getFinancialYear();

		String financialYear = taxDeclarationMonthlyCacheModel.financialYear;

		if ((financialYear != null) && (financialYear.length() == 0)) {
			taxDeclarationMonthlyCacheModel.financialYear = null;
		}

		taxDeclarationMonthlyCacheModel.monthYear = getMonthYear();

		taxDeclarationMonthlyCacheModel.employeeId = getEmployeeId();

		taxDeclarationMonthlyCacheModel.hraFromDate = getHraFromDate();

		String hraFromDate = taxDeclarationMonthlyCacheModel.hraFromDate;

		if ((hraFromDate != null) && (hraFromDate.length() == 0)) {
			taxDeclarationMonthlyCacheModel.hraFromDate = null;
		}

		taxDeclarationMonthlyCacheModel.hraToDate = getHraToDate();

		String hraToDate = taxDeclarationMonthlyCacheModel.hraToDate;

		if ((hraToDate != null) && (hraToDate.length() == 0)) {
			taxDeclarationMonthlyCacheModel.hraToDate = null;
		}

		taxDeclarationMonthlyCacheModel.hraCity = getHraCity();

		String hraCity = taxDeclarationMonthlyCacheModel.hraCity;

		if ((hraCity != null) && (hraCity.length() == 0)) {
			taxDeclarationMonthlyCacheModel.hraCity = null;
		}

		taxDeclarationMonthlyCacheModel.hraIsmetro = getHraIsmetro();

		String hraIsmetro = taxDeclarationMonthlyCacheModel.hraIsmetro;

		if ((hraIsmetro != null) && (hraIsmetro.length() == 0)) {
			taxDeclarationMonthlyCacheModel.hraIsmetro = null;
		}

		taxDeclarationMonthlyCacheModel.hraLandlordPan = getHraLandlordPan();

		String hraLandlordPan = taxDeclarationMonthlyCacheModel.hraLandlordPan;

		if ((hraLandlordPan != null) && (hraLandlordPan.length() == 0)) {
			taxDeclarationMonthlyCacheModel.hraLandlordPan = null;
		}

		taxDeclarationMonthlyCacheModel.hraRent = getHraRent();

		taxDeclarationMonthlyCacheModel.medicalIndividual = getMedicalIndividual();

		taxDeclarationMonthlyCacheModel.medicalParents = getMedicalParents();

		taxDeclarationMonthlyCacheModel.medicalParentsSenior = getMedicalParentsSenior();

		taxDeclarationMonthlyCacheModel.medicalHandiLess80 = getMedicalHandiLess80();

		taxDeclarationMonthlyCacheModel.medicalHandiGater80 = getMedicalHandiGater80();

		taxDeclarationMonthlyCacheModel.medicalGater60Less80 = getMedicalGater60Less80();

		taxDeclarationMonthlyCacheModel.medicalGater80 = getMedicalGater80();

		taxDeclarationMonthlyCacheModel.educationLoan = getEducationLoan();

		taxDeclarationMonthlyCacheModel.physicalDisability = getPhysicalDisability();

		taxDeclarationMonthlyCacheModel.physicalDisabilitySevere = getPhysicalDisabilitySevere();

		taxDeclarationMonthlyCacheModel.equitySavings = getEquitySavings();

		taxDeclarationMonthlyCacheModel.interestOnDeposit = getInterestOnDeposit();

		taxDeclarationMonthlyCacheModel.nationalPension = getNationalPension();

		taxDeclarationMonthlyCacheModel.lic = getLic();

		taxDeclarationMonthlyCacheModel.ppf = getPpf();

		taxDeclarationMonthlyCacheModel.nsc = getNsc();

		taxDeclarationMonthlyCacheModel.infraBonds = getInfraBonds();

		taxDeclarationMonthlyCacheModel.tuitionFees = getTuitionFees();

		taxDeclarationMonthlyCacheModel.mutualFunds = getMutualFunds();

		taxDeclarationMonthlyCacheModel.sukanya = getSukanya();

		taxDeclarationMonthlyCacheModel.ulip = getUlip();

		taxDeclarationMonthlyCacheModel.timeDeposit = getTimeDeposit();

		taxDeclarationMonthlyCacheModel.housingLoan = getHousingLoan();

		taxDeclarationMonthlyCacheModel.fixedDeposit = getFixedDeposit();

		taxDeclarationMonthlyCacheModel.nscInterest = getNscInterest();

		taxDeclarationMonthlyCacheModel.housingLoanInterest = getHousingLoanInterest();

		taxDeclarationMonthlyCacheModel.housingAddress = getHousingAddress();

		String housingAddress = taxDeclarationMonthlyCacheModel.housingAddress;

		if ((housingAddress != null) && (housingAddress.length() == 0)) {
			taxDeclarationMonthlyCacheModel.housingAddress = null;
		}

		taxDeclarationMonthlyCacheModel.previousIncome = getPreviousIncome();

		taxDeclarationMonthlyCacheModel.previousPf = getPreviousPf();

		taxDeclarationMonthlyCacheModel.previousPt = getPreviousPt();

		taxDeclarationMonthlyCacheModel.previousTds = getPreviousTds();

		taxDeclarationMonthlyCacheModel.islock = isIslock();

		taxDeclarationMonthlyCacheModel.finalSubmission = isFinalSubmission();

		taxDeclarationMonthlyCacheModel.hraExempt = getHraExempt();

		taxDeclarationMonthlyCacheModel.sectionBExempt = getSectionBExempt();

		taxDeclarationMonthlyCacheModel.sectionCExempt = getSectionCExempt();

		taxDeclarationMonthlyCacheModel.sectionDExempt = getSectionDExempt();

		taxDeclarationMonthlyCacheModel.salaryAfterExempt = getSalaryAfterExempt();

		taxDeclarationMonthlyCacheModel.salaryBeforeExempt = getSalaryBeforeExempt();

		taxDeclarationMonthlyCacheModel.taxRate = getTaxRate();

		taxDeclarationMonthlyCacheModel.grossTds = getGrossTds();

		taxDeclarationMonthlyCacheModel.totalTds = getTotalTds();

		taxDeclarationMonthlyCacheModel.tdsDeducted = getTdsDeducted();

		taxDeclarationMonthlyCacheModel.tdsDuePerMonth = getTdsDuePerMonth();

		taxDeclarationMonthlyCacheModel.educationCess = getEducationCess();

		taxDeclarationMonthlyCacheModel.totalPtax = getTotalPtax();

		taxDeclarationMonthlyCacheModel.totalProvidentFund = getTotalProvidentFund();

		taxDeclarationMonthlyCacheModel.totalConveyance = getTotalConveyance();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			taxDeclarationMonthlyCacheModel.addedDate = addedDate.getTime();
		}
		else {
			taxDeclarationMonthlyCacheModel.addedDate = Long.MIN_VALUE;
		}

		taxDeclarationMonthlyCacheModel.currentMonthTax = getCurrentMonthTax();

		taxDeclarationMonthlyCacheModel.sectionEExempt = getSectionEExempt();

		return taxDeclarationMonthlyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(127);

		sb.append("{taxDeclarationMonthlyId=");
		sb.append(getTaxDeclarationMonthlyId());
		sb.append(", taxDeclarationId=");
		sb.append(getTaxDeclarationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", financialYear=");
		sb.append(getFinancialYear());
		sb.append(", monthYear=");
		sb.append(getMonthYear());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", hraFromDate=");
		sb.append(getHraFromDate());
		sb.append(", hraToDate=");
		sb.append(getHraToDate());
		sb.append(", hraCity=");
		sb.append(getHraCity());
		sb.append(", hraIsmetro=");
		sb.append(getHraIsmetro());
		sb.append(", hraLandlordPan=");
		sb.append(getHraLandlordPan());
		sb.append(", hraRent=");
		sb.append(getHraRent());
		sb.append(", medicalIndividual=");
		sb.append(getMedicalIndividual());
		sb.append(", medicalParents=");
		sb.append(getMedicalParents());
		sb.append(", medicalParentsSenior=");
		sb.append(getMedicalParentsSenior());
		sb.append(", medicalHandiLess80=");
		sb.append(getMedicalHandiLess80());
		sb.append(", medicalHandiGater80=");
		sb.append(getMedicalHandiGater80());
		sb.append(", medicalGater60Less80=");
		sb.append(getMedicalGater60Less80());
		sb.append(", medicalGater80=");
		sb.append(getMedicalGater80());
		sb.append(", educationLoan=");
		sb.append(getEducationLoan());
		sb.append(", physicalDisability=");
		sb.append(getPhysicalDisability());
		sb.append(", physicalDisabilitySevere=");
		sb.append(getPhysicalDisabilitySevere());
		sb.append(", equitySavings=");
		sb.append(getEquitySavings());
		sb.append(", interestOnDeposit=");
		sb.append(getInterestOnDeposit());
		sb.append(", nationalPension=");
		sb.append(getNationalPension());
		sb.append(", lic=");
		sb.append(getLic());
		sb.append(", ppf=");
		sb.append(getPpf());
		sb.append(", nsc=");
		sb.append(getNsc());
		sb.append(", infraBonds=");
		sb.append(getInfraBonds());
		sb.append(", tuitionFees=");
		sb.append(getTuitionFees());
		sb.append(", mutualFunds=");
		sb.append(getMutualFunds());
		sb.append(", sukanya=");
		sb.append(getSukanya());
		sb.append(", ulip=");
		sb.append(getUlip());
		sb.append(", timeDeposit=");
		sb.append(getTimeDeposit());
		sb.append(", housingLoan=");
		sb.append(getHousingLoan());
		sb.append(", fixedDeposit=");
		sb.append(getFixedDeposit());
		sb.append(", nscInterest=");
		sb.append(getNscInterest());
		sb.append(", housingLoanInterest=");
		sb.append(getHousingLoanInterest());
		sb.append(", housingAddress=");
		sb.append(getHousingAddress());
		sb.append(", previousIncome=");
		sb.append(getPreviousIncome());
		sb.append(", previousPf=");
		sb.append(getPreviousPf());
		sb.append(", previousPt=");
		sb.append(getPreviousPt());
		sb.append(", previousTds=");
		sb.append(getPreviousTds());
		sb.append(", islock=");
		sb.append(isIslock());
		sb.append(", finalSubmission=");
		sb.append(isFinalSubmission());
		sb.append(", hraExempt=");
		sb.append(getHraExempt());
		sb.append(", sectionBExempt=");
		sb.append(getSectionBExempt());
		sb.append(", sectionCExempt=");
		sb.append(getSectionCExempt());
		sb.append(", sectionDExempt=");
		sb.append(getSectionDExempt());
		sb.append(", salaryAfterExempt=");
		sb.append(getSalaryAfterExempt());
		sb.append(", salaryBeforeExempt=");
		sb.append(getSalaryBeforeExempt());
		sb.append(", taxRate=");
		sb.append(getTaxRate());
		sb.append(", grossTds=");
		sb.append(getGrossTds());
		sb.append(", totalTds=");
		sb.append(getTotalTds());
		sb.append(", tdsDeducted=");
		sb.append(getTdsDeducted());
		sb.append(", tdsDuePerMonth=");
		sb.append(getTdsDuePerMonth());
		sb.append(", educationCess=");
		sb.append(getEducationCess());
		sb.append(", totalPtax=");
		sb.append(getTotalPtax());
		sb.append(", totalProvidentFund=");
		sb.append(getTotalProvidentFund());
		sb.append(", totalConveyance=");
		sb.append(getTotalConveyance());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", currentMonthTax=");
		sb.append(getCurrentMonthTax());
		sb.append(", sectionEExempt=");
		sb.append(getSectionEExempt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(193);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.TaxDeclarationMonthly");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taxDeclarationMonthlyId</column-name><column-value><![CDATA[");
		sb.append(getTaxDeclarationMonthlyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxDeclarationId</column-name><column-value><![CDATA[");
		sb.append(getTaxDeclarationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialYear</column-name><column-value><![CDATA[");
		sb.append(getFinancialYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthYear</column-name><column-value><![CDATA[");
		sb.append(getMonthYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraFromDate</column-name><column-value><![CDATA[");
		sb.append(getHraFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraToDate</column-name><column-value><![CDATA[");
		sb.append(getHraToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraCity</column-name><column-value><![CDATA[");
		sb.append(getHraCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraIsmetro</column-name><column-value><![CDATA[");
		sb.append(getHraIsmetro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraLandlordPan</column-name><column-value><![CDATA[");
		sb.append(getHraLandlordPan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraRent</column-name><column-value><![CDATA[");
		sb.append(getHraRent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalIndividual</column-name><column-value><![CDATA[");
		sb.append(getMedicalIndividual());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalParents</column-name><column-value><![CDATA[");
		sb.append(getMedicalParents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalParentsSenior</column-name><column-value><![CDATA[");
		sb.append(getMedicalParentsSenior());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalHandiLess80</column-name><column-value><![CDATA[");
		sb.append(getMedicalHandiLess80());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalHandiGater80</column-name><column-value><![CDATA[");
		sb.append(getMedicalHandiGater80());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalGater60Less80</column-name><column-value><![CDATA[");
		sb.append(getMedicalGater60Less80());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicalGater80</column-name><column-value><![CDATA[");
		sb.append(getMedicalGater80());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>educationLoan</column-name><column-value><![CDATA[");
		sb.append(getEducationLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>physicalDisability</column-name><column-value><![CDATA[");
		sb.append(getPhysicalDisability());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>physicalDisabilitySevere</column-name><column-value><![CDATA[");
		sb.append(getPhysicalDisabilitySevere());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equitySavings</column-name><column-value><![CDATA[");
		sb.append(getEquitySavings());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interestOnDeposit</column-name><column-value><![CDATA[");
		sb.append(getInterestOnDeposit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationalPension</column-name><column-value><![CDATA[");
		sb.append(getNationalPension());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lic</column-name><column-value><![CDATA[");
		sb.append(getLic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppf</column-name><column-value><![CDATA[");
		sb.append(getPpf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nsc</column-name><column-value><![CDATA[");
		sb.append(getNsc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infraBonds</column-name><column-value><![CDATA[");
		sb.append(getInfraBonds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tuitionFees</column-name><column-value><![CDATA[");
		sb.append(getTuitionFees());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mutualFunds</column-name><column-value><![CDATA[");
		sb.append(getMutualFunds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sukanya</column-name><column-value><![CDATA[");
		sb.append(getSukanya());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ulip</column-name><column-value><![CDATA[");
		sb.append(getUlip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeDeposit</column-name><column-value><![CDATA[");
		sb.append(getTimeDeposit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>housingLoan</column-name><column-value><![CDATA[");
		sb.append(getHousingLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fixedDeposit</column-name><column-value><![CDATA[");
		sb.append(getFixedDeposit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nscInterest</column-name><column-value><![CDATA[");
		sb.append(getNscInterest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>housingLoanInterest</column-name><column-value><![CDATA[");
		sb.append(getHousingLoanInterest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>housingAddress</column-name><column-value><![CDATA[");
		sb.append(getHousingAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousIncome</column-name><column-value><![CDATA[");
		sb.append(getPreviousIncome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousPf</column-name><column-value><![CDATA[");
		sb.append(getPreviousPf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousPt</column-name><column-value><![CDATA[");
		sb.append(getPreviousPt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousTds</column-name><column-value><![CDATA[");
		sb.append(getPreviousTds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>islock</column-name><column-value><![CDATA[");
		sb.append(isIslock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalSubmission</column-name><column-value><![CDATA[");
		sb.append(isFinalSubmission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hraExempt</column-name><column-value><![CDATA[");
		sb.append(getHraExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sectionBExempt</column-name><column-value><![CDATA[");
		sb.append(getSectionBExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sectionCExempt</column-name><column-value><![CDATA[");
		sb.append(getSectionCExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sectionDExempt</column-name><column-value><![CDATA[");
		sb.append(getSectionDExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salaryAfterExempt</column-name><column-value><![CDATA[");
		sb.append(getSalaryAfterExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salaryBeforeExempt</column-name><column-value><![CDATA[");
		sb.append(getSalaryBeforeExempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxRate</column-name><column-value><![CDATA[");
		sb.append(getTaxRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTds</column-name><column-value><![CDATA[");
		sb.append(getGrossTds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalTds</column-name><column-value><![CDATA[");
		sb.append(getTotalTds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tdsDeducted</column-name><column-value><![CDATA[");
		sb.append(getTdsDeducted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tdsDuePerMonth</column-name><column-value><![CDATA[");
		sb.append(getTdsDuePerMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>educationCess</column-name><column-value><![CDATA[");
		sb.append(getEducationCess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPtax</column-name><column-value><![CDATA[");
		sb.append(getTotalPtax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalProvidentFund</column-name><column-value><![CDATA[");
		sb.append(getTotalProvidentFund());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalConveyance</column-name><column-value><![CDATA[");
		sb.append(getTotalConveyance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentMonthTax</column-name><column-value><![CDATA[");
		sb.append(getCurrentMonthTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sectionEExempt</column-name><column-value><![CDATA[");
		sb.append(getSectionEExempt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TaxDeclarationMonthly.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TaxDeclarationMonthly.class, ModelWrapper.class
		};
	private long _taxDeclarationMonthlyId;
	private long _taxDeclarationId;
	private long _companyId;
	private String _financialYear;
	private long _monthYear;
	private long _originalMonthYear;
	private boolean _setOriginalMonthYear;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private String _hraFromDate;
	private String _hraToDate;
	private String _hraCity;
	private String _hraIsmetro;
	private String _hraLandlordPan;
	private double _hraRent;
	private double _medicalIndividual;
	private double _medicalParents;
	private double _medicalParentsSenior;
	private double _medicalHandiLess80;
	private double _medicalHandiGater80;
	private double _medicalGater60Less80;
	private double _medicalGater80;
	private double _educationLoan;
	private double _physicalDisability;
	private double _physicalDisabilitySevere;
	private double _equitySavings;
	private double _interestOnDeposit;
	private double _nationalPension;
	private double _lic;
	private double _ppf;
	private double _nsc;
	private double _infraBonds;
	private double _tuitionFees;
	private double _mutualFunds;
	private double _sukanya;
	private double _ulip;
	private double _timeDeposit;
	private double _housingLoan;
	private double _fixedDeposit;
	private double _nscInterest;
	private double _housingLoanInterest;
	private String _housingAddress;
	private double _previousIncome;
	private double _previousPf;
	private double _previousPt;
	private double _previousTds;
	private boolean _islock;
	private boolean _finalSubmission;
	private double _hraExempt;
	private double _sectionBExempt;
	private double _sectionCExempt;
	private double _sectionDExempt;
	private double _salaryAfterExempt;
	private double _salaryBeforeExempt;
	private double _taxRate;
	private double _grossTds;
	private double _totalTds;
	private double _tdsDeducted;
	private double _tdsDuePerMonth;
	private double _educationCess;
	private double _totalPtax;
	private double _totalProvidentFund;
	private double _totalConveyance;
	private Date _addedDate;
	private double _currentMonthTax;
	private double _sectionEExempt;
	private long _columnBitmask;
	private TaxDeclarationMonthly _escapedModel;
}