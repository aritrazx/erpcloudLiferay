/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.MonthlyAdjustment;
import com.liferay.famocom.erpcloud.model.MonthlyAdjustmentModel;
import com.liferay.famocom.erpcloud.model.MonthlyAdjustmentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MonthlyAdjustment service. Represents a row in the &quot;MonthlyAdjustment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MonthlyAdjustmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MonthlyAdjustmentImpl}.
 * </p>
 *
 * @author Samaresh
 * @see MonthlyAdjustmentImpl
 * @see MonthlyAdjustment
 * @see MonthlyAdjustmentModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MonthlyAdjustmentModelImpl extends BaseModelImpl<MonthlyAdjustment>
	implements MonthlyAdjustmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a monthly adjustment model instance should use the {@link MonthlyAdjustment} interface instead.
	 */
	public static final String TABLE_NAME = "MonthlyAdjustment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "monthlyAdjustmentId", Types.BIGINT },
			{ "payComponentId", Types.BIGINT },
			{ "amount", Types.DOUBLE },
			{ "monthYear", Types.BIGINT },
			{ "employeeId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("monthlyAdjustmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payComponentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("monthYear", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table MonthlyAdjustment (monthlyAdjustmentId LONG not null primary key,payComponentId LONG,amount DOUBLE,monthYear LONG,employeeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table MonthlyAdjustment";
	public static final String ORDER_BY_JPQL = " ORDER BY monthlyAdjustment.monthlyAdjustmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MonthlyAdjustment.monthlyAdjustmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.MonthlyAdjustment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.MonthlyAdjustment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.MonthlyAdjustment"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long MONTHYEAR_COLUMN_BITMASK = 2L;
	public static final long PAYCOMPONENTID_COLUMN_BITMASK = 4L;
	public static final long MONTHLYADJUSTMENTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MonthlyAdjustment toModel(MonthlyAdjustmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MonthlyAdjustment model = new MonthlyAdjustmentImpl();

		model.setMonthlyAdjustmentId(soapModel.getMonthlyAdjustmentId());
		model.setPayComponentId(soapModel.getPayComponentId());
		model.setAmount(soapModel.getAmount());
		model.setMonthYear(soapModel.getMonthYear());
		model.setEmployeeId(soapModel.getEmployeeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MonthlyAdjustment> toModels(
		MonthlyAdjustmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MonthlyAdjustment> models = new ArrayList<MonthlyAdjustment>(soapModels.length);

		for (MonthlyAdjustmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.MonthlyAdjustment"));

	public MonthlyAdjustmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _monthlyAdjustmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMonthlyAdjustmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _monthlyAdjustmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MonthlyAdjustment.class;
	}

	@Override
	public String getModelClassName() {
		return MonthlyAdjustment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("monthlyAdjustmentId", getMonthlyAdjustmentId());
		attributes.put("payComponentId", getPayComponentId());
		attributes.put("amount", getAmount());
		attributes.put("monthYear", getMonthYear());
		attributes.put("employeeId", getEmployeeId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long monthlyAdjustmentId = (Long)attributes.get("monthlyAdjustmentId");

		if (monthlyAdjustmentId != null) {
			setMonthlyAdjustmentId(monthlyAdjustmentId);
		}

		Long payComponentId = (Long)attributes.get("payComponentId");

		if (payComponentId != null) {
			setPayComponentId(payComponentId);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long monthYear = (Long)attributes.get("monthYear");

		if (monthYear != null) {
			setMonthYear(monthYear);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}
	}

	@JSON
	@Override
	public long getMonthlyAdjustmentId() {
		return _monthlyAdjustmentId;
	}

	@Override
	public void setMonthlyAdjustmentId(long monthlyAdjustmentId) {
		_monthlyAdjustmentId = monthlyAdjustmentId;
	}

	@JSON
	@Override
	public long getPayComponentId() {
		return _payComponentId;
	}

	@Override
	public void setPayComponentId(long payComponentId) {
		_columnBitmask |= PAYCOMPONENTID_COLUMN_BITMASK;

		if (!_setOriginalPayComponentId) {
			_setOriginalPayComponentId = true;

			_originalPayComponentId = _payComponentId;
		}

		_payComponentId = payComponentId;
	}

	public long getOriginalPayComponentId() {
		return _originalPayComponentId;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public long getMonthYear() {
		return _monthYear;
	}

	@Override
	public void setMonthYear(long monthYear) {
		_columnBitmask |= MONTHYEAR_COLUMN_BITMASK;

		if (!_setOriginalMonthYear) {
			_setOriginalMonthYear = true;

			_originalMonthYear = _monthYear;
		}

		_monthYear = monthYear;
	}

	public long getOriginalMonthYear() {
		return _originalMonthYear;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MonthlyAdjustment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MonthlyAdjustment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MonthlyAdjustment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MonthlyAdjustmentImpl monthlyAdjustmentImpl = new MonthlyAdjustmentImpl();

		monthlyAdjustmentImpl.setMonthlyAdjustmentId(getMonthlyAdjustmentId());
		monthlyAdjustmentImpl.setPayComponentId(getPayComponentId());
		monthlyAdjustmentImpl.setAmount(getAmount());
		monthlyAdjustmentImpl.setMonthYear(getMonthYear());
		monthlyAdjustmentImpl.setEmployeeId(getEmployeeId());

		monthlyAdjustmentImpl.resetOriginalValues();

		return monthlyAdjustmentImpl;
	}

	@Override
	public int compareTo(MonthlyAdjustment monthlyAdjustment) {
		long primaryKey = monthlyAdjustment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MonthlyAdjustment)) {
			return false;
		}

		MonthlyAdjustment monthlyAdjustment = (MonthlyAdjustment)obj;

		long primaryKey = monthlyAdjustment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MonthlyAdjustmentModelImpl monthlyAdjustmentModelImpl = this;

		monthlyAdjustmentModelImpl._originalPayComponentId = monthlyAdjustmentModelImpl._payComponentId;

		monthlyAdjustmentModelImpl._setOriginalPayComponentId = false;

		monthlyAdjustmentModelImpl._originalMonthYear = monthlyAdjustmentModelImpl._monthYear;

		monthlyAdjustmentModelImpl._setOriginalMonthYear = false;

		monthlyAdjustmentModelImpl._originalEmployeeId = monthlyAdjustmentModelImpl._employeeId;

		monthlyAdjustmentModelImpl._setOriginalEmployeeId = false;

		monthlyAdjustmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MonthlyAdjustment> toCacheModel() {
		MonthlyAdjustmentCacheModel monthlyAdjustmentCacheModel = new MonthlyAdjustmentCacheModel();

		monthlyAdjustmentCacheModel.monthlyAdjustmentId = getMonthlyAdjustmentId();

		monthlyAdjustmentCacheModel.payComponentId = getPayComponentId();

		monthlyAdjustmentCacheModel.amount = getAmount();

		monthlyAdjustmentCacheModel.monthYear = getMonthYear();

		monthlyAdjustmentCacheModel.employeeId = getEmployeeId();

		return monthlyAdjustmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{monthlyAdjustmentId=");
		sb.append(getMonthlyAdjustmentId());
		sb.append(", payComponentId=");
		sb.append(getPayComponentId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", monthYear=");
		sb.append(getMonthYear());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.MonthlyAdjustment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>monthlyAdjustmentId</column-name><column-value><![CDATA[");
		sb.append(getMonthlyAdjustmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payComponentId</column-name><column-value><![CDATA[");
		sb.append(getPayComponentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthYear</column-name><column-value><![CDATA[");
		sb.append(getMonthYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MonthlyAdjustment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MonthlyAdjustment.class, ModelWrapper.class
		};
	private long _monthlyAdjustmentId;
	private long _payComponentId;
	private long _originalPayComponentId;
	private boolean _setOriginalPayComponentId;
	private double _amount;
	private long _monthYear;
	private long _originalMonthYear;
	private boolean _setOriginalMonthYear;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _columnBitmask;
	private MonthlyAdjustment _escapedModel;
}