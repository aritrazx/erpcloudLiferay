/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.EmpPayStructure;
import com.liferay.famocom.erpcloud.model.EmpPayStructureModel;
import com.liferay.famocom.erpcloud.model.EmpPayStructureSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmpPayStructure service. Represents a row in the &quot;empPayStructure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmpPayStructureModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpPayStructureImpl}.
 * </p>
 *
 * @author Samaresh
 * @see EmpPayStructureImpl
 * @see EmpPayStructure
 * @see EmpPayStructureModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmpPayStructureModelImpl extends BaseModelImpl<EmpPayStructure>
	implements EmpPayStructureModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp pay structure model instance should use the {@link EmpPayStructure} interface instead.
	 */
	public static final String TABLE_NAME = "empPayStructure";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empPayStructureId", Types.BIGINT },
			{ "payComponentId", Types.BIGINT },
			{ "componentValue", Types.DOUBLE },
			{ "employeeId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("empPayStructureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payComponentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("componentValue", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table empPayStructure (empPayStructureId LONG not null primary key,payComponentId LONG,componentValue DOUBLE,employeeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table empPayStructure";
	public static final String ORDER_BY_JPQL = " ORDER BY empPayStructure.empPayStructureId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY empPayStructure.empPayStructureId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.EmpPayStructure"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.EmpPayStructure"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.EmpPayStructure"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long PAYCOMPONENTID_COLUMN_BITMASK = 2L;
	public static final long EMPPAYSTRUCTUREID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmpPayStructure toModel(EmpPayStructureSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmpPayStructure model = new EmpPayStructureImpl();

		model.setEmpPayStructureId(soapModel.getEmpPayStructureId());
		model.setPayComponentId(soapModel.getPayComponentId());
		model.setComponentValue(soapModel.getComponentValue());
		model.setEmployeeId(soapModel.getEmployeeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmpPayStructure> toModels(
		EmpPayStructureSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmpPayStructure> models = new ArrayList<EmpPayStructure>(soapModels.length);

		for (EmpPayStructureSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.EmpPayStructure"));

	public EmpPayStructureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empPayStructureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpPayStructureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empPayStructureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpPayStructure.class;
	}

	@Override
	public String getModelClassName() {
		return EmpPayStructure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empPayStructureId", getEmpPayStructureId());
		attributes.put("payComponentId", getPayComponentId());
		attributes.put("componentValue", getComponentValue());
		attributes.put("employeeId", getEmployeeId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empPayStructureId = (Long)attributes.get("empPayStructureId");

		if (empPayStructureId != null) {
			setEmpPayStructureId(empPayStructureId);
		}

		Long payComponentId = (Long)attributes.get("payComponentId");

		if (payComponentId != null) {
			setPayComponentId(payComponentId);
		}

		Double componentValue = (Double)attributes.get("componentValue");

		if (componentValue != null) {
			setComponentValue(componentValue);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}
	}

	@JSON
	@Override
	public long getEmpPayStructureId() {
		return _empPayStructureId;
	}

	@Override
	public void setEmpPayStructureId(long empPayStructureId) {
		_empPayStructureId = empPayStructureId;
	}

	@JSON
	@Override
	public long getPayComponentId() {
		return _payComponentId;
	}

	@Override
	public void setPayComponentId(long payComponentId) {
		_columnBitmask |= PAYCOMPONENTID_COLUMN_BITMASK;

		if (!_setOriginalPayComponentId) {
			_setOriginalPayComponentId = true;

			_originalPayComponentId = _payComponentId;
		}

		_payComponentId = payComponentId;
	}

	public long getOriginalPayComponentId() {
		return _originalPayComponentId;
	}

	@JSON
	@Override
	public double getComponentValue() {
		return _componentValue;
	}

	@Override
	public void setComponentValue(double componentValue) {
		_componentValue = componentValue;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmpPayStructure.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpPayStructure toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpPayStructure)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpPayStructureImpl empPayStructureImpl = new EmpPayStructureImpl();

		empPayStructureImpl.setEmpPayStructureId(getEmpPayStructureId());
		empPayStructureImpl.setPayComponentId(getPayComponentId());
		empPayStructureImpl.setComponentValue(getComponentValue());
		empPayStructureImpl.setEmployeeId(getEmployeeId());

		empPayStructureImpl.resetOriginalValues();

		return empPayStructureImpl;
	}

	@Override
	public int compareTo(EmpPayStructure empPayStructure) {
		long primaryKey = empPayStructure.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpPayStructure)) {
			return false;
		}

		EmpPayStructure empPayStructure = (EmpPayStructure)obj;

		long primaryKey = empPayStructure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmpPayStructureModelImpl empPayStructureModelImpl = this;

		empPayStructureModelImpl._originalPayComponentId = empPayStructureModelImpl._payComponentId;

		empPayStructureModelImpl._setOriginalPayComponentId = false;

		empPayStructureModelImpl._originalEmployeeId = empPayStructureModelImpl._employeeId;

		empPayStructureModelImpl._setOriginalEmployeeId = false;

		empPayStructureModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpPayStructure> toCacheModel() {
		EmpPayStructureCacheModel empPayStructureCacheModel = new EmpPayStructureCacheModel();

		empPayStructureCacheModel.empPayStructureId = getEmpPayStructureId();

		empPayStructureCacheModel.payComponentId = getPayComponentId();

		empPayStructureCacheModel.componentValue = getComponentValue();

		empPayStructureCacheModel.employeeId = getEmployeeId();

		return empPayStructureCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{empPayStructureId=");
		sb.append(getEmpPayStructureId());
		sb.append(", payComponentId=");
		sb.append(getPayComponentId());
		sb.append(", componentValue=");
		sb.append(getComponentValue());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.EmpPayStructure");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empPayStructureId</column-name><column-value><![CDATA[");
		sb.append(getEmpPayStructureId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payComponentId</column-name><column-value><![CDATA[");
		sb.append(getPayComponentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentValue</column-name><column-value><![CDATA[");
		sb.append(getComponentValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmpPayStructure.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmpPayStructure.class, ModelWrapper.class
		};
	private long _empPayStructureId;
	private long _payComponentId;
	private long _originalPayComponentId;
	private boolean _setOriginalPayComponentId;
	private double _componentValue;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _columnBitmask;
	private EmpPayStructure _escapedModel;
}