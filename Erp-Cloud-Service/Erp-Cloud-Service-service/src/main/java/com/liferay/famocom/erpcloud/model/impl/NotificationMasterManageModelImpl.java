/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.NotificationMasterManage;
import com.liferay.famocom.erpcloud.model.NotificationMasterManageModel;
import com.liferay.famocom.erpcloud.model.NotificationMasterManageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotificationMasterManage service. Represents a row in the &quot;notificationMasterManage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NotificationMasterManageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationMasterManageImpl}.
 * </p>
 *
 * @author Samaresh
 * @see NotificationMasterManageImpl
 * @see NotificationMasterManage
 * @see NotificationMasterManageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NotificationMasterManageModelImpl extends BaseModelImpl<NotificationMasterManage>
	implements NotificationMasterManageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification master manage model instance should use the {@link NotificationMasterManage} interface instead.
	 */
	public static final String TABLE_NAME = "notificationMasterManage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notifyId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "body", Types.VARCHAR },
			{ "createdBy", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "documentId", Types.BIGINT },
			{ "documentUrl", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notifyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table notificationMasterManage (notifyId LONG not null primary key,subject VARCHAR(75) null,body VARCHAR(75) null,createdBy VARCHAR(75) null,createdDate DATE null,modifiedDate DATE null,documentId LONG,documentUrl VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table notificationMasterManage";
	public static final String ORDER_BY_JPQL = " ORDER BY notificationMasterManage.notifyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY notificationMasterManage.notifyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.NotificationMasterManage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.NotificationMasterManage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NotificationMasterManage toModel(
		NotificationMasterManageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NotificationMasterManage model = new NotificationMasterManageImpl();

		model.setNotifyId(soapModel.getNotifyId());
		model.setSubject(soapModel.getSubject());
		model.setBody(soapModel.getBody());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDocumentId(soapModel.getDocumentId());
		model.setDocumentUrl(soapModel.getDocumentUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NotificationMasterManage> toModels(
		NotificationMasterManageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NotificationMasterManage> models = new ArrayList<NotificationMasterManage>(soapModels.length);

		for (NotificationMasterManageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.NotificationMasterManage"));

	public NotificationMasterManageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notifyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotifyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notifyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotificationMasterManage.class;
	}

	@Override
	public String getModelClassName() {
		return NotificationMasterManage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notifyId", getNotifyId());
		attributes.put("subject", getSubject());
		attributes.put("body", getBody());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("documentId", getDocumentId());
		attributes.put("documentUrl", getDocumentUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notifyId = (Long)attributes.get("notifyId");

		if (notifyId != null) {
			setNotifyId(notifyId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long documentId = (Long)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		String documentUrl = (String)attributes.get("documentUrl");

		if (documentUrl != null) {
			setDocumentUrl(documentUrl);
		}
	}

	@JSON
	@Override
	public long getNotifyId() {
		return _notifyId;
	}

	@Override
	public void setNotifyId(long notifyId) {
		_notifyId = notifyId;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getBody() {
		if (_body == null) {
			return "";
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public String getDocumentUrl() {
		if (_documentUrl == null) {
			return "";
		}
		else {
			return _documentUrl;
		}
	}

	@Override
	public void setDocumentUrl(String documentUrl) {
		_documentUrl = documentUrl;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NotificationMasterManage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotificationMasterManage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NotificationMasterManage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationMasterManageImpl notificationMasterManageImpl = new NotificationMasterManageImpl();

		notificationMasterManageImpl.setNotifyId(getNotifyId());
		notificationMasterManageImpl.setSubject(getSubject());
		notificationMasterManageImpl.setBody(getBody());
		notificationMasterManageImpl.setCreatedBy(getCreatedBy());
		notificationMasterManageImpl.setCreatedDate(getCreatedDate());
		notificationMasterManageImpl.setModifiedDate(getModifiedDate());
		notificationMasterManageImpl.setDocumentId(getDocumentId());
		notificationMasterManageImpl.setDocumentUrl(getDocumentUrl());

		notificationMasterManageImpl.resetOriginalValues();

		return notificationMasterManageImpl;
	}

	@Override
	public int compareTo(NotificationMasterManage notificationMasterManage) {
		long primaryKey = notificationMasterManage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NotificationMasterManage)) {
			return false;
		}

		NotificationMasterManage notificationMasterManage = (NotificationMasterManage)obj;

		long primaryKey = notificationMasterManage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NotificationMasterManage> toCacheModel() {
		NotificationMasterManageCacheModel notificationMasterManageCacheModel = new NotificationMasterManageCacheModel();

		notificationMasterManageCacheModel.notifyId = getNotifyId();

		notificationMasterManageCacheModel.subject = getSubject();

		String subject = notificationMasterManageCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			notificationMasterManageCacheModel.subject = null;
		}

		notificationMasterManageCacheModel.body = getBody();

		String body = notificationMasterManageCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			notificationMasterManageCacheModel.body = null;
		}

		notificationMasterManageCacheModel.createdBy = getCreatedBy();

		String createdBy = notificationMasterManageCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			notificationMasterManageCacheModel.createdBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			notificationMasterManageCacheModel.createdDate = createdDate.getTime();
		}
		else {
			notificationMasterManageCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificationMasterManageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificationMasterManageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificationMasterManageCacheModel.documentId = getDocumentId();

		notificationMasterManageCacheModel.documentUrl = getDocumentUrl();

		String documentUrl = notificationMasterManageCacheModel.documentUrl;

		if ((documentUrl != null) && (documentUrl.length() == 0)) {
			notificationMasterManageCacheModel.documentUrl = null;
		}

		return notificationMasterManageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{notifyId=");
		sb.append(getNotifyId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", documentUrl=");
		sb.append(getDocumentUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.NotificationMasterManage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notifyId</column-name><column-value><![CDATA[");
		sb.append(getNotifyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentUrl</column-name><column-value><![CDATA[");
		sb.append(getDocumentUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = NotificationMasterManage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			NotificationMasterManage.class, ModelWrapper.class
		};
	private long _notifyId;
	private String _subject;
	private String _body;
	private String _createdBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _documentId;
	private String _documentUrl;
	private NotificationMasterManage _escapedModel;
}