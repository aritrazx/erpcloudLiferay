/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.LeaveType;
import com.liferay.famocom.erpcloud.model.LeaveTypeModel;
import com.liferay.famocom.erpcloud.model.LeaveTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LeaveType service. Represents a row in the &quot;leaveType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LeaveTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveTypeImpl}.
 * </p>
 *
 * @author Samaresh
 * @see LeaveTypeImpl
 * @see LeaveType
 * @see LeaveTypeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LeaveTypeModelImpl extends BaseModelImpl<LeaveType>
	implements LeaveTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave type model instance should use the {@link LeaveType} interface instead.
	 */
	public static final String TABLE_NAME = "leaveType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveTypeId", Types.BIGINT },
			{ "leaveName", Types.VARCHAR },
			{ "abb", Types.VARCHAR },
			{ "encashmentDay", Types.INTEGER },
			{ "forwardDay", Types.INTEGER },
			{ "leaveStatus", Types.BOOLEAN },
			{ "encashmentPer", Types.INTEGER },
			{ "minServiceDay", Types.INTEGER },
			{ "noticeDay", Types.INTEGER },
			{ "employeetypeId", Types.BIGINT },
			{ "maxCreditDay", Types.INTEGER },
			{ "gender", Types.VARCHAR },
			{ "maritalStatus", Types.VARCHAR },
			{ "impectOnSalary", Types.INTEGER },
			{ "companyId", Types.BIGINT },
			{ "addedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("leaveTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("abb", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("encashmentDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("forwardDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("leaveStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("encashmentPer", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("minServiceDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("noticeDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("employeetypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maxCreditDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impectOnSalary", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table leaveType (leaveTypeId LONG not null primary key,leaveName VARCHAR(75) null,abb VARCHAR(75) null,encashmentDay INTEGER,forwardDay INTEGER,leaveStatus BOOLEAN,encashmentPer INTEGER,minServiceDay INTEGER,noticeDay INTEGER,employeetypeId LONG,maxCreditDay INTEGER,gender VARCHAR(75) null,maritalStatus VARCHAR(75) null,impectOnSalary INTEGER,companyId LONG,addedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table leaveType";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveType.leaveTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leaveType.leaveTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.LeaveType"),
			true);
	public static final long LEAVENAME_COLUMN_BITMASK = 1L;
	public static final long LEAVETYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LeaveType toModel(LeaveTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveType model = new LeaveTypeImpl();

		model.setLeaveTypeId(soapModel.getLeaveTypeId());
		model.setLeaveName(soapModel.getLeaveName());
		model.setAbb(soapModel.getAbb());
		model.setEncashmentDay(soapModel.getEncashmentDay());
		model.setForwardDay(soapModel.getForwardDay());
		model.setLeaveStatus(soapModel.isLeaveStatus());
		model.setEncashmentPer(soapModel.getEncashmentPer());
		model.setMinServiceDay(soapModel.getMinServiceDay());
		model.setNoticeDay(soapModel.getNoticeDay());
		model.setEmployeetypeId(soapModel.getEmployeetypeId());
		model.setMaxCreditDay(soapModel.getMaxCreditDay());
		model.setGender(soapModel.getGender());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setImpectOnSalary(soapModel.getImpectOnSalary());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAddedDate(soapModel.getAddedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LeaveType> toModels(LeaveTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LeaveType> models = new ArrayList<LeaveType>(soapModels.length);

		for (LeaveTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.LeaveType"));

	public LeaveTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveType.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("leaveName", getLeaveName());
		attributes.put("abb", getAbb());
		attributes.put("encashmentDay", getEncashmentDay());
		attributes.put("forwardDay", getForwardDay());
		attributes.put("leaveStatus", isLeaveStatus());
		attributes.put("encashmentPer", getEncashmentPer());
		attributes.put("minServiceDay", getMinServiceDay());
		attributes.put("noticeDay", getNoticeDay());
		attributes.put("employeetypeId", getEmployeetypeId());
		attributes.put("maxCreditDay", getMaxCreditDay());
		attributes.put("gender", getGender());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("impectOnSalary", getImpectOnSalary());
		attributes.put("companyId", getCompanyId());
		attributes.put("addedDate", getAddedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		String leaveName = (String)attributes.get("leaveName");

		if (leaveName != null) {
			setLeaveName(leaveName);
		}

		String abb = (String)attributes.get("abb");

		if (abb != null) {
			setAbb(abb);
		}

		Integer encashmentDay = (Integer)attributes.get("encashmentDay");

		if (encashmentDay != null) {
			setEncashmentDay(encashmentDay);
		}

		Integer forwardDay = (Integer)attributes.get("forwardDay");

		if (forwardDay != null) {
			setForwardDay(forwardDay);
		}

		Boolean leaveStatus = (Boolean)attributes.get("leaveStatus");

		if (leaveStatus != null) {
			setLeaveStatus(leaveStatus);
		}

		Integer encashmentPer = (Integer)attributes.get("encashmentPer");

		if (encashmentPer != null) {
			setEncashmentPer(encashmentPer);
		}

		Integer minServiceDay = (Integer)attributes.get("minServiceDay");

		if (minServiceDay != null) {
			setMinServiceDay(minServiceDay);
		}

		Integer noticeDay = (Integer)attributes.get("noticeDay");

		if (noticeDay != null) {
			setNoticeDay(noticeDay);
		}

		Long employeetypeId = (Long)attributes.get("employeetypeId");

		if (employeetypeId != null) {
			setEmployeetypeId(employeetypeId);
		}

		Integer maxCreditDay = (Integer)attributes.get("maxCreditDay");

		if (maxCreditDay != null) {
			setMaxCreditDay(maxCreditDay);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String maritalStatus = (String)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		Integer impectOnSalary = (Integer)attributes.get("impectOnSalary");

		if (impectOnSalary != null) {
			setImpectOnSalary(impectOnSalary);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_leaveTypeId = leaveTypeId;
	}

	@JSON
	@Override
	public String getLeaveName() {
		if (_leaveName == null) {
			return "";
		}
		else {
			return _leaveName;
		}
	}

	@Override
	public void setLeaveName(String leaveName) {
		_columnBitmask |= LEAVENAME_COLUMN_BITMASK;

		if (_originalLeaveName == null) {
			_originalLeaveName = _leaveName;
		}

		_leaveName = leaveName;
	}

	public String getOriginalLeaveName() {
		return GetterUtil.getString(_originalLeaveName);
	}

	@JSON
	@Override
	public String getAbb() {
		if (_abb == null) {
			return "";
		}
		else {
			return _abb;
		}
	}

	@Override
	public void setAbb(String abb) {
		_abb = abb;
	}

	@JSON
	@Override
	public int getEncashmentDay() {
		return _encashmentDay;
	}

	@Override
	public void setEncashmentDay(int encashmentDay) {
		_encashmentDay = encashmentDay;
	}

	@JSON
	@Override
	public int getForwardDay() {
		return _forwardDay;
	}

	@Override
	public void setForwardDay(int forwardDay) {
		_forwardDay = forwardDay;
	}

	@JSON
	@Override
	public boolean getLeaveStatus() {
		return _leaveStatus;
	}

	@JSON
	@Override
	public boolean isLeaveStatus() {
		return _leaveStatus;
	}

	@Override
	public void setLeaveStatus(boolean leaveStatus) {
		_leaveStatus = leaveStatus;
	}

	@JSON
	@Override
	public int getEncashmentPer() {
		return _encashmentPer;
	}

	@Override
	public void setEncashmentPer(int encashmentPer) {
		_encashmentPer = encashmentPer;
	}

	@JSON
	@Override
	public int getMinServiceDay() {
		return _minServiceDay;
	}

	@Override
	public void setMinServiceDay(int minServiceDay) {
		_minServiceDay = minServiceDay;
	}

	@JSON
	@Override
	public int getNoticeDay() {
		return _noticeDay;
	}

	@Override
	public void setNoticeDay(int noticeDay) {
		_noticeDay = noticeDay;
	}

	@JSON
	@Override
	public long getEmployeetypeId() {
		return _employeetypeId;
	}

	@Override
	public void setEmployeetypeId(long employeetypeId) {
		_employeetypeId = employeetypeId;
	}

	@JSON
	@Override
	public int getMaxCreditDay() {
		return _maxCreditDay;
	}

	@Override
	public void setMaxCreditDay(int maxCreditDay) {
		_maxCreditDay = maxCreditDay;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public int getImpectOnSalary() {
		return _impectOnSalary;
	}

	@Override
	public void setImpectOnSalary(int impectOnSalary) {
		_impectOnSalary = impectOnSalary;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveTypeImpl leaveTypeImpl = new LeaveTypeImpl();

		leaveTypeImpl.setLeaveTypeId(getLeaveTypeId());
		leaveTypeImpl.setLeaveName(getLeaveName());
		leaveTypeImpl.setAbb(getAbb());
		leaveTypeImpl.setEncashmentDay(getEncashmentDay());
		leaveTypeImpl.setForwardDay(getForwardDay());
		leaveTypeImpl.setLeaveStatus(isLeaveStatus());
		leaveTypeImpl.setEncashmentPer(getEncashmentPer());
		leaveTypeImpl.setMinServiceDay(getMinServiceDay());
		leaveTypeImpl.setNoticeDay(getNoticeDay());
		leaveTypeImpl.setEmployeetypeId(getEmployeetypeId());
		leaveTypeImpl.setMaxCreditDay(getMaxCreditDay());
		leaveTypeImpl.setGender(getGender());
		leaveTypeImpl.setMaritalStatus(getMaritalStatus());
		leaveTypeImpl.setImpectOnSalary(getImpectOnSalary());
		leaveTypeImpl.setCompanyId(getCompanyId());
		leaveTypeImpl.setAddedDate(getAddedDate());

		leaveTypeImpl.resetOriginalValues();

		return leaveTypeImpl;
	}

	@Override
	public int compareTo(LeaveType leaveType) {
		long primaryKey = leaveType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveType)) {
			return false;
		}

		LeaveType leaveType = (LeaveType)obj;

		long primaryKey = leaveType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LeaveTypeModelImpl leaveTypeModelImpl = this;

		leaveTypeModelImpl._originalLeaveName = leaveTypeModelImpl._leaveName;

		leaveTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveType> toCacheModel() {
		LeaveTypeCacheModel leaveTypeCacheModel = new LeaveTypeCacheModel();

		leaveTypeCacheModel.leaveTypeId = getLeaveTypeId();

		leaveTypeCacheModel.leaveName = getLeaveName();

		String leaveName = leaveTypeCacheModel.leaveName;

		if ((leaveName != null) && (leaveName.length() == 0)) {
			leaveTypeCacheModel.leaveName = null;
		}

		leaveTypeCacheModel.abb = getAbb();

		String abb = leaveTypeCacheModel.abb;

		if ((abb != null) && (abb.length() == 0)) {
			leaveTypeCacheModel.abb = null;
		}

		leaveTypeCacheModel.encashmentDay = getEncashmentDay();

		leaveTypeCacheModel.forwardDay = getForwardDay();

		leaveTypeCacheModel.leaveStatus = isLeaveStatus();

		leaveTypeCacheModel.encashmentPer = getEncashmentPer();

		leaveTypeCacheModel.minServiceDay = getMinServiceDay();

		leaveTypeCacheModel.noticeDay = getNoticeDay();

		leaveTypeCacheModel.employeetypeId = getEmployeetypeId();

		leaveTypeCacheModel.maxCreditDay = getMaxCreditDay();

		leaveTypeCacheModel.gender = getGender();

		String gender = leaveTypeCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			leaveTypeCacheModel.gender = null;
		}

		leaveTypeCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = leaveTypeCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			leaveTypeCacheModel.maritalStatus = null;
		}

		leaveTypeCacheModel.impectOnSalary = getImpectOnSalary();

		leaveTypeCacheModel.companyId = getCompanyId();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			leaveTypeCacheModel.addedDate = addedDate.getTime();
		}
		else {
			leaveTypeCacheModel.addedDate = Long.MIN_VALUE;
		}

		return leaveTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", leaveName=");
		sb.append(getLeaveName());
		sb.append(", abb=");
		sb.append(getAbb());
		sb.append(", encashmentDay=");
		sb.append(getEncashmentDay());
		sb.append(", forwardDay=");
		sb.append(getForwardDay());
		sb.append(", leaveStatus=");
		sb.append(isLeaveStatus());
		sb.append(", encashmentPer=");
		sb.append(getEncashmentPer());
		sb.append(", minServiceDay=");
		sb.append(getMinServiceDay());
		sb.append(", noticeDay=");
		sb.append(getNoticeDay());
		sb.append(", employeetypeId=");
		sb.append(getEmployeetypeId());
		sb.append(", maxCreditDay=");
		sb.append(getMaxCreditDay());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", impectOnSalary=");
		sb.append(getImpectOnSalary());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.LeaveType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveName</column-name><column-value><![CDATA[");
		sb.append(getLeaveName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abb</column-name><column-value><![CDATA[");
		sb.append(getAbb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>encashmentDay</column-name><column-value><![CDATA[");
		sb.append(getEncashmentDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forwardDay</column-name><column-value><![CDATA[");
		sb.append(getForwardDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveStatus</column-name><column-value><![CDATA[");
		sb.append(isLeaveStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>encashmentPer</column-name><column-value><![CDATA[");
		sb.append(getEncashmentPer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minServiceDay</column-name><column-value><![CDATA[");
		sb.append(getMinServiceDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeDay</column-name><column-value><![CDATA[");
		sb.append(getNoticeDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeetypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeetypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxCreditDay</column-name><column-value><![CDATA[");
		sb.append(getMaxCreditDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impectOnSalary</column-name><column-value><![CDATA[");
		sb.append(getImpectOnSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LeaveType.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveType.class, ModelWrapper.class
		};
	private long _leaveTypeId;
	private String _leaveName;
	private String _originalLeaveName;
	private String _abb;
	private int _encashmentDay;
	private int _forwardDay;
	private boolean _leaveStatus;
	private int _encashmentPer;
	private int _minServiceDay;
	private int _noticeDay;
	private long _employeetypeId;
	private int _maxCreditDay;
	private String _gender;
	private String _maritalStatus;
	private int _impectOnSalary;
	private long _companyId;
	private Date _addedDate;
	private long _columnBitmask;
	private LeaveType _escapedModel;
}