/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.BillingTable;
import com.liferay.famocom.erpcloud.model.BillingTableModel;
import com.liferay.famocom.erpcloud.model.BillingTableSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BillingTable service. Represents a row in the &quot;billingTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BillingTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BillingTableImpl}.
 * </p>
 *
 * @author Samaresh
 * @see BillingTableImpl
 * @see BillingTable
 * @see BillingTableModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BillingTableModelImpl extends BaseModelImpl<BillingTable>
	implements BillingTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a billing table model instance should use the {@link BillingTable} interface instead.
	 */
	public static final String TABLE_NAME = "billingTable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "billingId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "clientId", Types.BIGINT },
			{ "milestoneName", Types.VARCHAR },
			{ "dueDate", Types.TIMESTAMP },
			{ "checkGST", Types.INTEGER },
			{ "amount", Types.DOUBLE },
			{ "fileId", Types.BIGINT },
			{ "fileName", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("billingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("milestoneName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("checkGST", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table billingTable (billingId LONG not null primary key,projectId LONG,clientId LONG,milestoneName VARCHAR(75) null,dueDate DATE null,checkGST INTEGER,amount DOUBLE,fileId LONG,fileName VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table billingTable";
	public static final String ORDER_BY_JPQL = " ORDER BY billingTable.billingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY billingTable.billingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.BillingTable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.BillingTable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BillingTable toModel(BillingTableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BillingTable model = new BillingTableImpl();

		model.setBillingId(soapModel.getBillingId());
		model.setProjectId(soapModel.getProjectId());
		model.setClientId(soapModel.getClientId());
		model.setMilestoneName(soapModel.getMilestoneName());
		model.setDueDate(soapModel.getDueDate());
		model.setCheckGST(soapModel.getCheckGST());
		model.setAmount(soapModel.getAmount());
		model.setFileId(soapModel.getFileId());
		model.setFileName(soapModel.getFileName());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BillingTable> toModels(BillingTableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BillingTable> models = new ArrayList<BillingTable>(soapModels.length);

		for (BillingTableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.BillingTable"));

	public BillingTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _billingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBillingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _billingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BillingTable.class;
	}

	@Override
	public String getModelClassName() {
		return BillingTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("billingId", getBillingId());
		attributes.put("projectId", getProjectId());
		attributes.put("clientId", getClientId());
		attributes.put("milestoneName", getMilestoneName());
		attributes.put("dueDate", getDueDate());
		attributes.put("checkGST", getCheckGST());
		attributes.put("amount", getAmount());
		attributes.put("fileId", getFileId());
		attributes.put("fileName", getFileName());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long billingId = (Long)attributes.get("billingId");

		if (billingId != null) {
			setBillingId(billingId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long clientId = (Long)attributes.get("clientId");

		if (clientId != null) {
			setClientId(clientId);
		}

		String milestoneName = (String)attributes.get("milestoneName");

		if (milestoneName != null) {
			setMilestoneName(milestoneName);
		}

		Date dueDate = (Date)attributes.get("dueDate");

		if (dueDate != null) {
			setDueDate(dueDate);
		}

		Integer checkGST = (Integer)attributes.get("checkGST");

		if (checkGST != null) {
			setCheckGST(checkGST);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getBillingId() {
		return _billingId;
	}

	@Override
	public void setBillingId(long billingId) {
		_billingId = billingId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@JSON
	@Override
	public String getMilestoneName() {
		if (_milestoneName == null) {
			return StringPool.BLANK;
		}
		else {
			return _milestoneName;
		}
	}

	@Override
	public void setMilestoneName(String milestoneName) {
		_milestoneName = milestoneName;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@JSON
	@Override
	public int getCheckGST() {
		return _checkGST;
	}

	@Override
	public void setCheckGST(int checkGST) {
		_checkGST = checkGST;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		_fileId = fileId;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BillingTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BillingTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BillingTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BillingTableImpl billingTableImpl = new BillingTableImpl();

		billingTableImpl.setBillingId(getBillingId());
		billingTableImpl.setProjectId(getProjectId());
		billingTableImpl.setClientId(getClientId());
		billingTableImpl.setMilestoneName(getMilestoneName());
		billingTableImpl.setDueDate(getDueDate());
		billingTableImpl.setCheckGST(getCheckGST());
		billingTableImpl.setAmount(getAmount());
		billingTableImpl.setFileId(getFileId());
		billingTableImpl.setFileName(getFileName());
		billingTableImpl.setStatus(getStatus());

		billingTableImpl.resetOriginalValues();

		return billingTableImpl;
	}

	@Override
	public int compareTo(BillingTable billingTable) {
		long primaryKey = billingTable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BillingTable)) {
			return false;
		}

		BillingTable billingTable = (BillingTable)obj;

		long primaryKey = billingTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BillingTable> toCacheModel() {
		BillingTableCacheModel billingTableCacheModel = new BillingTableCacheModel();

		billingTableCacheModel.billingId = getBillingId();

		billingTableCacheModel.projectId = getProjectId();

		billingTableCacheModel.clientId = getClientId();

		billingTableCacheModel.milestoneName = getMilestoneName();

		String milestoneName = billingTableCacheModel.milestoneName;

		if ((milestoneName != null) && (milestoneName.length() == 0)) {
			billingTableCacheModel.milestoneName = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			billingTableCacheModel.dueDate = dueDate.getTime();
		}
		else {
			billingTableCacheModel.dueDate = Long.MIN_VALUE;
		}

		billingTableCacheModel.checkGST = getCheckGST();

		billingTableCacheModel.amount = getAmount();

		billingTableCacheModel.fileId = getFileId();

		billingTableCacheModel.fileName = getFileName();

		String fileName = billingTableCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			billingTableCacheModel.fileName = null;
		}

		billingTableCacheModel.status = getStatus();

		return billingTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{billingId=");
		sb.append(getBillingId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", clientId=");
		sb.append(getClientId());
		sb.append(", milestoneName=");
		sb.append(getMilestoneName());
		sb.append(", dueDate=");
		sb.append(getDueDate());
		sb.append(", checkGST=");
		sb.append(getCheckGST());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", fileId=");
		sb.append(getFileId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.BillingTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>billingId</column-name><column-value><![CDATA[");
		sb.append(getBillingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId</column-name><column-value><![CDATA[");
		sb.append(getClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>milestoneName</column-name><column-value><![CDATA[");
		sb.append(getMilestoneName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dueDate</column-name><column-value><![CDATA[");
		sb.append(getDueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkGST</column-name><column-value><![CDATA[");
		sb.append(getCheckGST());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BillingTable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BillingTable.class
		};
	private long _billingId;
	private long _projectId;
	private long _clientId;
	private String _milestoneName;
	private Date _dueDate;
	private int _checkGST;
	private double _amount;
	private long _fileId;
	private String _fileName;
	private int _status;
	private BillingTable _escapedModel;
}