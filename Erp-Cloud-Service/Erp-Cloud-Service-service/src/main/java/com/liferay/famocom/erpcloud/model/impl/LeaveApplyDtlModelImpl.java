/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.LeaveApplyDtl;
import com.liferay.famocom.erpcloud.model.LeaveApplyDtlModel;
import com.liferay.famocom.erpcloud.model.LeaveApplyDtlSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LeaveApplyDtl service. Represents a row in the &quot;leaveApplyDtl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LeaveApplyDtlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveApplyDtlImpl}.
 * </p>
 *
 * @author Samaresh
 * @see LeaveApplyDtlImpl
 * @see LeaveApplyDtl
 * @see LeaveApplyDtlModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LeaveApplyDtlModelImpl extends BaseModelImpl<LeaveApplyDtl>
	implements LeaveApplyDtlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave apply dtl model instance should use the {@link LeaveApplyDtl} interface instead.
	 */
	public static final String TABLE_NAME = "leaveApplyDtl";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveApplyDtlId", Types.BIGINT },
			{ "leaveApplyId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "leaveDate", Types.TIMESTAMP },
			{ "sessionData", Types.VARCHAR },
			{ "leaveDays", Types.DOUBLE },
			{ "impectOnSalary", Types.INTEGER },
			{ "isApprove", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("leaveApplyDtlId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveApplyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sessionData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveDays", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("impectOnSalary", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isApprove", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table leaveApplyDtl (leaveApplyDtlId LONG not null primary key,leaveApplyId LONG,employeeId LONG,companyId LONG,leaveTypeId LONG,leaveDate DATE null,sessionData VARCHAR(75) null,leaveDays DOUBLE,impectOnSalary INTEGER,isApprove INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table leaveApplyDtl";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveApplyDtl.leaveApplyDtlId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leaveApplyDtl.leaveApplyDtlId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveApplyDtl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.LeaveApplyDtl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.LeaveApplyDtl"),
			true);
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static final long ISAPPROVE_COLUMN_BITMASK = 2L;
	public static final long LEAVEDATE_COLUMN_BITMASK = 4L;
	public static final long LEAVEAPPLYDTLID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LeaveApplyDtl toModel(LeaveApplyDtlSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveApplyDtl model = new LeaveApplyDtlImpl();

		model.setLeaveApplyDtlId(soapModel.getLeaveApplyDtlId());
		model.setLeaveApplyId(soapModel.getLeaveApplyId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setLeaveTypeId(soapModel.getLeaveTypeId());
		model.setLeaveDate(soapModel.getLeaveDate());
		model.setSessionData(soapModel.getSessionData());
		model.setLeaveDays(soapModel.getLeaveDays());
		model.setImpectOnSalary(soapModel.getImpectOnSalary());
		model.setIsApprove(soapModel.getIsApprove());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LeaveApplyDtl> toModels(LeaveApplyDtlSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LeaveApplyDtl> models = new ArrayList<LeaveApplyDtl>(soapModels.length);

		for (LeaveApplyDtlSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.LeaveApplyDtl"));

	public LeaveApplyDtlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveApplyDtlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveApplyDtlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveApplyDtlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveApplyDtl.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveApplyDtl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveApplyDtlId", getLeaveApplyDtlId());
		attributes.put("leaveApplyId", getLeaveApplyId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("leaveDate", getLeaveDate());
		attributes.put("sessionData", getSessionData());
		attributes.put("leaveDays", getLeaveDays());
		attributes.put("impectOnSalary", getImpectOnSalary());
		attributes.put("isApprove", getIsApprove());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveApplyDtlId = (Long)attributes.get("leaveApplyDtlId");

		if (leaveApplyDtlId != null) {
			setLeaveApplyDtlId(leaveApplyDtlId);
		}

		Long leaveApplyId = (Long)attributes.get("leaveApplyId");

		if (leaveApplyId != null) {
			setLeaveApplyId(leaveApplyId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Date leaveDate = (Date)attributes.get("leaveDate");

		if (leaveDate != null) {
			setLeaveDate(leaveDate);
		}

		String sessionData = (String)attributes.get("sessionData");

		if (sessionData != null) {
			setSessionData(sessionData);
		}

		Double leaveDays = (Double)attributes.get("leaveDays");

		if (leaveDays != null) {
			setLeaveDays(leaveDays);
		}

		Integer impectOnSalary = (Integer)attributes.get("impectOnSalary");

		if (impectOnSalary != null) {
			setImpectOnSalary(impectOnSalary);
		}

		Integer isApprove = (Integer)attributes.get("isApprove");

		if (isApprove != null) {
			setIsApprove(isApprove);
		}
	}

	@JSON
	@Override
	public long getLeaveApplyDtlId() {
		return _leaveApplyDtlId;
	}

	@Override
	public void setLeaveApplyDtlId(long leaveApplyDtlId) {
		_leaveApplyDtlId = leaveApplyDtlId;
	}

	@JSON
	@Override
	public long getLeaveApplyId() {
		return _leaveApplyId;
	}

	@Override
	public void setLeaveApplyId(long leaveApplyId) {
		_leaveApplyId = leaveApplyId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_leaveTypeId = leaveTypeId;
	}

	@JSON
	@Override
	public Date getLeaveDate() {
		return _leaveDate;
	}

	@Override
	public void setLeaveDate(Date leaveDate) {
		_columnBitmask |= LEAVEDATE_COLUMN_BITMASK;

		if (_originalLeaveDate == null) {
			_originalLeaveDate = _leaveDate;
		}

		_leaveDate = leaveDate;
	}

	public Date getOriginalLeaveDate() {
		return _originalLeaveDate;
	}

	@JSON
	@Override
	public String getSessionData() {
		if (_sessionData == null) {
			return "";
		}
		else {
			return _sessionData;
		}
	}

	@Override
	public void setSessionData(String sessionData) {
		_sessionData = sessionData;
	}

	@JSON
	@Override
	public double getLeaveDays() {
		return _leaveDays;
	}

	@Override
	public void setLeaveDays(double leaveDays) {
		_leaveDays = leaveDays;
	}

	@JSON
	@Override
	public int getImpectOnSalary() {
		return _impectOnSalary;
	}

	@Override
	public void setImpectOnSalary(int impectOnSalary) {
		_impectOnSalary = impectOnSalary;
	}

	@JSON
	@Override
	public int getIsApprove() {
		return _isApprove;
	}

	@Override
	public void setIsApprove(int isApprove) {
		_columnBitmask |= ISAPPROVE_COLUMN_BITMASK;

		if (!_setOriginalIsApprove) {
			_setOriginalIsApprove = true;

			_originalIsApprove = _isApprove;
		}

		_isApprove = isApprove;
	}

	public int getOriginalIsApprove() {
		return _originalIsApprove;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveApplyDtl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveApplyDtl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveApplyDtl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveApplyDtlImpl leaveApplyDtlImpl = new LeaveApplyDtlImpl();

		leaveApplyDtlImpl.setLeaveApplyDtlId(getLeaveApplyDtlId());
		leaveApplyDtlImpl.setLeaveApplyId(getLeaveApplyId());
		leaveApplyDtlImpl.setEmployeeId(getEmployeeId());
		leaveApplyDtlImpl.setCompanyId(getCompanyId());
		leaveApplyDtlImpl.setLeaveTypeId(getLeaveTypeId());
		leaveApplyDtlImpl.setLeaveDate(getLeaveDate());
		leaveApplyDtlImpl.setSessionData(getSessionData());
		leaveApplyDtlImpl.setLeaveDays(getLeaveDays());
		leaveApplyDtlImpl.setImpectOnSalary(getImpectOnSalary());
		leaveApplyDtlImpl.setIsApprove(getIsApprove());

		leaveApplyDtlImpl.resetOriginalValues();

		return leaveApplyDtlImpl;
	}

	@Override
	public int compareTo(LeaveApplyDtl leaveApplyDtl) {
		long primaryKey = leaveApplyDtl.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveApplyDtl)) {
			return false;
		}

		LeaveApplyDtl leaveApplyDtl = (LeaveApplyDtl)obj;

		long primaryKey = leaveApplyDtl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LeaveApplyDtlModelImpl leaveApplyDtlModelImpl = this;

		leaveApplyDtlModelImpl._originalEmployeeId = leaveApplyDtlModelImpl._employeeId;

		leaveApplyDtlModelImpl._setOriginalEmployeeId = false;

		leaveApplyDtlModelImpl._originalLeaveDate = leaveApplyDtlModelImpl._leaveDate;

		leaveApplyDtlModelImpl._originalIsApprove = leaveApplyDtlModelImpl._isApprove;

		leaveApplyDtlModelImpl._setOriginalIsApprove = false;

		leaveApplyDtlModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveApplyDtl> toCacheModel() {
		LeaveApplyDtlCacheModel leaveApplyDtlCacheModel = new LeaveApplyDtlCacheModel();

		leaveApplyDtlCacheModel.leaveApplyDtlId = getLeaveApplyDtlId();

		leaveApplyDtlCacheModel.leaveApplyId = getLeaveApplyId();

		leaveApplyDtlCacheModel.employeeId = getEmployeeId();

		leaveApplyDtlCacheModel.companyId = getCompanyId();

		leaveApplyDtlCacheModel.leaveTypeId = getLeaveTypeId();

		Date leaveDate = getLeaveDate();

		if (leaveDate != null) {
			leaveApplyDtlCacheModel.leaveDate = leaveDate.getTime();
		}
		else {
			leaveApplyDtlCacheModel.leaveDate = Long.MIN_VALUE;
		}

		leaveApplyDtlCacheModel.sessionData = getSessionData();

		String sessionData = leaveApplyDtlCacheModel.sessionData;

		if ((sessionData != null) && (sessionData.length() == 0)) {
			leaveApplyDtlCacheModel.sessionData = null;
		}

		leaveApplyDtlCacheModel.leaveDays = getLeaveDays();

		leaveApplyDtlCacheModel.impectOnSalary = getImpectOnSalary();

		leaveApplyDtlCacheModel.isApprove = getIsApprove();

		return leaveApplyDtlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{leaveApplyDtlId=");
		sb.append(getLeaveApplyDtlId());
		sb.append(", leaveApplyId=");
		sb.append(getLeaveApplyId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", leaveDate=");
		sb.append(getLeaveDate());
		sb.append(", sessionData=");
		sb.append(getSessionData());
		sb.append(", leaveDays=");
		sb.append(getLeaveDays());
		sb.append(", impectOnSalary=");
		sb.append(getImpectOnSalary());
		sb.append(", isApprove=");
		sb.append(getIsApprove());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.LeaveApplyDtl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveApplyDtlId</column-name><column-value><![CDATA[");
		sb.append(getLeaveApplyDtlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveApplyId</column-name><column-value><![CDATA[");
		sb.append(getLeaveApplyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDate</column-name><column-value><![CDATA[");
		sb.append(getLeaveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionData</column-name><column-value><![CDATA[");
		sb.append(getSessionData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDays</column-name><column-value><![CDATA[");
		sb.append(getLeaveDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impectOnSalary</column-name><column-value><![CDATA[");
		sb.append(getImpectOnSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApprove</column-name><column-value><![CDATA[");
		sb.append(getIsApprove());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LeaveApplyDtl.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveApplyDtl.class, ModelWrapper.class
		};
	private long _leaveApplyDtlId;
	private long _leaveApplyId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _companyId;
	private long _leaveTypeId;
	private Date _leaveDate;
	private Date _originalLeaveDate;
	private String _sessionData;
	private double _leaveDays;
	private int _impectOnSalary;
	private int _isApprove;
	private int _originalIsApprove;
	private boolean _setOriginalIsApprove;
	private long _columnBitmask;
	private LeaveApplyDtl _escapedModel;
}