/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.InterviewEvaluation;
import com.liferay.famocom.erpcloud.model.InterviewEvaluationModel;
import com.liferay.famocom.erpcloud.model.InterviewEvaluationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InterviewEvaluation service. Represents a row in the &quot;interviewEvaluation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link InterviewEvaluationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InterviewEvaluationImpl}.
 * </p>
 *
 * @author Samaresh
 * @see InterviewEvaluationImpl
 * @see InterviewEvaluation
 * @see InterviewEvaluationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class InterviewEvaluationModelImpl extends BaseModelImpl<InterviewEvaluation>
	implements InterviewEvaluationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a interview evaluation model instance should use the {@link InterviewEvaluation} interface instead.
	 */
	public static final String TABLE_NAME = "interviewEvaluation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "evaluationId", Types.BIGINT },
			{ "roleId", Types.BIGINT },
			{ "evaluationName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("evaluationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("evaluationName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table interviewEvaluation (evaluationId LONG not null primary key,roleId LONG,evaluationName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table interviewEvaluation";
	public static final String ORDER_BY_JPQL = " ORDER BY interviewEvaluation.evaluationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY interviewEvaluation.evaluationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.InterviewEvaluation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.InterviewEvaluation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InterviewEvaluation toModel(InterviewEvaluationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InterviewEvaluation model = new InterviewEvaluationImpl();

		model.setEvaluationId(soapModel.getEvaluationId());
		model.setRoleId(soapModel.getRoleId());
		model.setEvaluationName(soapModel.getEvaluationName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InterviewEvaluation> toModels(
		InterviewEvaluationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InterviewEvaluation> models = new ArrayList<InterviewEvaluation>(soapModels.length);

		for (InterviewEvaluationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.InterviewEvaluation"));

	public InterviewEvaluationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _evaluationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEvaluationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _evaluationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InterviewEvaluation.class;
	}

	@Override
	public String getModelClassName() {
		return InterviewEvaluation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("evaluationId", getEvaluationId());
		attributes.put("roleId", getRoleId());
		attributes.put("evaluationName", getEvaluationName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long evaluationId = (Long)attributes.get("evaluationId");

		if (evaluationId != null) {
			setEvaluationId(evaluationId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		String evaluationName = (String)attributes.get("evaluationName");

		if (evaluationName != null) {
			setEvaluationName(evaluationName);
		}
	}

	@JSON
	@Override
	public long getEvaluationId() {
		return _evaluationId;
	}

	@Override
	public void setEvaluationId(long evaluationId) {
		_evaluationId = evaluationId;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_roleId = roleId;
	}

	@JSON
	@Override
	public String getEvaluationName() {
		if (_evaluationName == null) {
			return "";
		}
		else {
			return _evaluationName;
		}
	}

	@Override
	public void setEvaluationName(String evaluationName) {
		_evaluationName = evaluationName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InterviewEvaluation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InterviewEvaluation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InterviewEvaluation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InterviewEvaluationImpl interviewEvaluationImpl = new InterviewEvaluationImpl();

		interviewEvaluationImpl.setEvaluationId(getEvaluationId());
		interviewEvaluationImpl.setRoleId(getRoleId());
		interviewEvaluationImpl.setEvaluationName(getEvaluationName());

		interviewEvaluationImpl.resetOriginalValues();

		return interviewEvaluationImpl;
	}

	@Override
	public int compareTo(InterviewEvaluation interviewEvaluation) {
		long primaryKey = interviewEvaluation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InterviewEvaluation)) {
			return false;
		}

		InterviewEvaluation interviewEvaluation = (InterviewEvaluation)obj;

		long primaryKey = interviewEvaluation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<InterviewEvaluation> toCacheModel() {
		InterviewEvaluationCacheModel interviewEvaluationCacheModel = new InterviewEvaluationCacheModel();

		interviewEvaluationCacheModel.evaluationId = getEvaluationId();

		interviewEvaluationCacheModel.roleId = getRoleId();

		interviewEvaluationCacheModel.evaluationName = getEvaluationName();

		String evaluationName = interviewEvaluationCacheModel.evaluationName;

		if ((evaluationName != null) && (evaluationName.length() == 0)) {
			interviewEvaluationCacheModel.evaluationName = null;
		}

		return interviewEvaluationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{evaluationId=");
		sb.append(getEvaluationId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append(", evaluationName=");
		sb.append(getEvaluationName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.InterviewEvaluation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>evaluationId</column-name><column-value><![CDATA[");
		sb.append(getEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationName</column-name><column-value><![CDATA[");
		sb.append(getEvaluationName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = InterviewEvaluation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			InterviewEvaluation.class, ModelWrapper.class
		};
	private long _evaluationId;
	private long _roleId;
	private String _evaluationName;
	private InterviewEvaluation _escapedModel;
}