/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.CandidateEvaluation;
import com.liferay.famocom.erpcloud.model.CandidateEvaluationModel;
import com.liferay.famocom.erpcloud.model.CandidateEvaluationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CandidateEvaluation service. Represents a row in the &quot;CandidateEvaluation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidateEvaluationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateEvaluationImpl}.
 * </p>
 *
 * @author Samaresh
 * @see CandidateEvaluationImpl
 * @see CandidateEvaluation
 * @see CandidateEvaluationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidateEvaluationModelImpl extends BaseModelImpl<CandidateEvaluation>
	implements CandidateEvaluationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate evaluation model instance should use the {@link CandidateEvaluation} interface instead.
	 */
	public static final String TABLE_NAME = "CandidateEvaluation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "candidateEvaluationId", Types.BIGINT },
			{ "interviewerId", Types.BIGINT },
			{ "jobPostId", Types.BIGINT },
			{ "postEvaluationId", Types.BIGINT },
			{ "applyCandidateId", Types.BIGINT },
			{ "interviewerRating", Types.INTEGER },
			{ "interviewerRemarks", Types.VARCHAR },
			{ "hrRemarks", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "recruitmentProcessId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("candidateEvaluationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("interviewerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postEvaluationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applyCandidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("interviewerRating", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("interviewerRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hrRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recruitmentProcessId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table CandidateEvaluation (candidateEvaluationId LONG not null primary key,interviewerId LONG,jobPostId LONG,postEvaluationId LONG,applyCandidateId LONG,interviewerRating INTEGER,interviewerRemarks VARCHAR(75) null,hrRemarks VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,recruitmentProcessId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CandidateEvaluation";
	public static final String ORDER_BY_JPQL = " ORDER BY candidateEvaluation.candidateEvaluationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CandidateEvaluation.candidateEvaluationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.CandidateEvaluation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.CandidateEvaluation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CandidateEvaluation toModel(CandidateEvaluationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CandidateEvaluation model = new CandidateEvaluationImpl();

		model.setCandidateEvaluationId(soapModel.getCandidateEvaluationId());
		model.setInterviewerId(soapModel.getInterviewerId());
		model.setJobPostId(soapModel.getJobPostId());
		model.setPostEvaluationId(soapModel.getPostEvaluationId());
		model.setApplyCandidateId(soapModel.getApplyCandidateId());
		model.setInterviewerRating(soapModel.getInterviewerRating());
		model.setInterviewerRemarks(soapModel.getInterviewerRemarks());
		model.setHrRemarks(soapModel.getHrRemarks());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRecruitmentProcessId(soapModel.getRecruitmentProcessId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CandidateEvaluation> toModels(
		CandidateEvaluationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CandidateEvaluation> models = new ArrayList<CandidateEvaluation>(soapModels.length);

		for (CandidateEvaluationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.CandidateEvaluation"));

	public CandidateEvaluationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateEvaluationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateEvaluationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateEvaluationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CandidateEvaluation.class;
	}

	@Override
	public String getModelClassName() {
		return CandidateEvaluation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("candidateEvaluationId", getCandidateEvaluationId());
		attributes.put("interviewerId", getInterviewerId());
		attributes.put("jobPostId", getJobPostId());
		attributes.put("postEvaluationId", getPostEvaluationId());
		attributes.put("applyCandidateId", getApplyCandidateId());
		attributes.put("interviewerRating", getInterviewerRating());
		attributes.put("interviewerRemarks", getInterviewerRemarks());
		attributes.put("hrRemarks", getHrRemarks());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("recruitmentProcessId", getRecruitmentProcessId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long candidateEvaluationId = (Long)attributes.get(
				"candidateEvaluationId");

		if (candidateEvaluationId != null) {
			setCandidateEvaluationId(candidateEvaluationId);
		}

		Long interviewerId = (Long)attributes.get("interviewerId");

		if (interviewerId != null) {
			setInterviewerId(interviewerId);
		}

		Long jobPostId = (Long)attributes.get("jobPostId");

		if (jobPostId != null) {
			setJobPostId(jobPostId);
		}

		Long postEvaluationId = (Long)attributes.get("postEvaluationId");

		if (postEvaluationId != null) {
			setPostEvaluationId(postEvaluationId);
		}

		Long applyCandidateId = (Long)attributes.get("applyCandidateId");

		if (applyCandidateId != null) {
			setApplyCandidateId(applyCandidateId);
		}

		Integer interviewerRating = (Integer)attributes.get("interviewerRating");

		if (interviewerRating != null) {
			setInterviewerRating(interviewerRating);
		}

		String interviewerRemarks = (String)attributes.get("interviewerRemarks");

		if (interviewerRemarks != null) {
			setInterviewerRemarks(interviewerRemarks);
		}

		String hrRemarks = (String)attributes.get("hrRemarks");

		if (hrRemarks != null) {
			setHrRemarks(hrRemarks);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long recruitmentProcessId = (Long)attributes.get("recruitmentProcessId");

		if (recruitmentProcessId != null) {
			setRecruitmentProcessId(recruitmentProcessId);
		}
	}

	@JSON
	@Override
	public long getCandidateEvaluationId() {
		return _candidateEvaluationId;
	}

	@Override
	public void setCandidateEvaluationId(long candidateEvaluationId) {
		_candidateEvaluationId = candidateEvaluationId;
	}

	@JSON
	@Override
	public long getInterviewerId() {
		return _interviewerId;
	}

	@Override
	public void setInterviewerId(long interviewerId) {
		_interviewerId = interviewerId;
	}

	@JSON
	@Override
	public long getJobPostId() {
		return _jobPostId;
	}

	@Override
	public void setJobPostId(long jobPostId) {
		_jobPostId = jobPostId;
	}

	@JSON
	@Override
	public long getPostEvaluationId() {
		return _postEvaluationId;
	}

	@Override
	public void setPostEvaluationId(long postEvaluationId) {
		_postEvaluationId = postEvaluationId;
	}

	@JSON
	@Override
	public long getApplyCandidateId() {
		return _applyCandidateId;
	}

	@Override
	public void setApplyCandidateId(long applyCandidateId) {
		_applyCandidateId = applyCandidateId;
	}

	@JSON
	@Override
	public int getInterviewerRating() {
		return _interviewerRating;
	}

	@Override
	public void setInterviewerRating(int interviewerRating) {
		_interviewerRating = interviewerRating;
	}

	@JSON
	@Override
	public String getInterviewerRemarks() {
		if (_interviewerRemarks == null) {
			return "";
		}
		else {
			return _interviewerRemarks;
		}
	}

	@Override
	public void setInterviewerRemarks(String interviewerRemarks) {
		_interviewerRemarks = interviewerRemarks;
	}

	@JSON
	@Override
	public String getHrRemarks() {
		if (_hrRemarks == null) {
			return "";
		}
		else {
			return _hrRemarks;
		}
	}

	@Override
	public void setHrRemarks(String hrRemarks) {
		_hrRemarks = hrRemarks;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getRecruitmentProcessId() {
		return _recruitmentProcessId;
	}

	@Override
	public void setRecruitmentProcessId(long recruitmentProcessId) {
		_recruitmentProcessId = recruitmentProcessId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CandidateEvaluation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CandidateEvaluation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CandidateEvaluation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateEvaluationImpl candidateEvaluationImpl = new CandidateEvaluationImpl();

		candidateEvaluationImpl.setCandidateEvaluationId(getCandidateEvaluationId());
		candidateEvaluationImpl.setInterviewerId(getInterviewerId());
		candidateEvaluationImpl.setJobPostId(getJobPostId());
		candidateEvaluationImpl.setPostEvaluationId(getPostEvaluationId());
		candidateEvaluationImpl.setApplyCandidateId(getApplyCandidateId());
		candidateEvaluationImpl.setInterviewerRating(getInterviewerRating());
		candidateEvaluationImpl.setInterviewerRemarks(getInterviewerRemarks());
		candidateEvaluationImpl.setHrRemarks(getHrRemarks());
		candidateEvaluationImpl.setCreateDate(getCreateDate());
		candidateEvaluationImpl.setModifiedDate(getModifiedDate());
		candidateEvaluationImpl.setRecruitmentProcessId(getRecruitmentProcessId());

		candidateEvaluationImpl.resetOriginalValues();

		return candidateEvaluationImpl;
	}

	@Override
	public int compareTo(CandidateEvaluation candidateEvaluation) {
		long primaryKey = candidateEvaluation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CandidateEvaluation)) {
			return false;
		}

		CandidateEvaluation candidateEvaluation = (CandidateEvaluation)obj;

		long primaryKey = candidateEvaluation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CandidateEvaluationModelImpl candidateEvaluationModelImpl = this;

		candidateEvaluationModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<CandidateEvaluation> toCacheModel() {
		CandidateEvaluationCacheModel candidateEvaluationCacheModel = new CandidateEvaluationCacheModel();

		candidateEvaluationCacheModel.candidateEvaluationId = getCandidateEvaluationId();

		candidateEvaluationCacheModel.interviewerId = getInterviewerId();

		candidateEvaluationCacheModel.jobPostId = getJobPostId();

		candidateEvaluationCacheModel.postEvaluationId = getPostEvaluationId();

		candidateEvaluationCacheModel.applyCandidateId = getApplyCandidateId();

		candidateEvaluationCacheModel.interviewerRating = getInterviewerRating();

		candidateEvaluationCacheModel.interviewerRemarks = getInterviewerRemarks();

		String interviewerRemarks = candidateEvaluationCacheModel.interviewerRemarks;

		if ((interviewerRemarks != null) && (interviewerRemarks.length() == 0)) {
			candidateEvaluationCacheModel.interviewerRemarks = null;
		}

		candidateEvaluationCacheModel.hrRemarks = getHrRemarks();

		String hrRemarks = candidateEvaluationCacheModel.hrRemarks;

		if ((hrRemarks != null) && (hrRemarks.length() == 0)) {
			candidateEvaluationCacheModel.hrRemarks = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			candidateEvaluationCacheModel.createDate = createDate.getTime();
		}
		else {
			candidateEvaluationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			candidateEvaluationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			candidateEvaluationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		candidateEvaluationCacheModel.recruitmentProcessId = getRecruitmentProcessId();

		return candidateEvaluationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{candidateEvaluationId=");
		sb.append(getCandidateEvaluationId());
		sb.append(", interviewerId=");
		sb.append(getInterviewerId());
		sb.append(", jobPostId=");
		sb.append(getJobPostId());
		sb.append(", postEvaluationId=");
		sb.append(getPostEvaluationId());
		sb.append(", applyCandidateId=");
		sb.append(getApplyCandidateId());
		sb.append(", interviewerRating=");
		sb.append(getInterviewerRating());
		sb.append(", interviewerRemarks=");
		sb.append(getInterviewerRemarks());
		sb.append(", hrRemarks=");
		sb.append(getHrRemarks());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", recruitmentProcessId=");
		sb.append(getRecruitmentProcessId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.CandidateEvaluation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>candidateEvaluationId</column-name><column-value><![CDATA[");
		sb.append(getCandidateEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewerId</column-name><column-value><![CDATA[");
		sb.append(getInterviewerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobPostId</column-name><column-value><![CDATA[");
		sb.append(getJobPostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postEvaluationId</column-name><column-value><![CDATA[");
		sb.append(getPostEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyCandidateId</column-name><column-value><![CDATA[");
		sb.append(getApplyCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewerRating</column-name><column-value><![CDATA[");
		sb.append(getInterviewerRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewerRemarks</column-name><column-value><![CDATA[");
		sb.append(getInterviewerRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrRemarks</column-name><column-value><![CDATA[");
		sb.append(getHrRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitmentProcessId</column-name><column-value><![CDATA[");
		sb.append(getRecruitmentProcessId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CandidateEvaluation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CandidateEvaluation.class, ModelWrapper.class
		};
	private long _candidateEvaluationId;
	private long _interviewerId;
	private long _jobPostId;
	private long _postEvaluationId;
	private long _applyCandidateId;
	private int _interviewerRating;
	private String _interviewerRemarks;
	private String _hrRemarks;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _recruitmentProcessId;
	private CandidateEvaluation _escapedModel;
}