/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.GeoAttendance;
import com.liferay.famocom.erpcloud.model.GeoAttendanceModel;
import com.liferay.famocom.erpcloud.model.GeoAttendanceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GeoAttendance service. Represents a row in the &quot;geoAttendance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GeoAttendanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeoAttendanceImpl}.
 * </p>
 *
 * @author Samaresh
 * @see GeoAttendanceImpl
 * @see GeoAttendance
 * @see GeoAttendanceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GeoAttendanceModelImpl extends BaseModelImpl<GeoAttendance>
	implements GeoAttendanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a geo attendance model instance should use the {@link GeoAttendance} interface instead.
	 */
	public static final String TABLE_NAME = "geoAttendance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "attendanceId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "attDate", Types.TIMESTAMP },
			{ "inTime", Types.VARCHAR },
			{ "outTime", Types.VARCHAR },
			{ "workHour", Types.VARCHAR },
			{ "latitude", Types.VARCHAR },
			{ "longitude", Types.VARCHAR },
			{ "outLatitude", Types.VARCHAR },
			{ "outLongitude", Types.VARCHAR },
			{ "geoAddress", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attendanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("outTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workHour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("outLatitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("outLongitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geoAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table geoAttendance (attendanceId LONG not null primary key,employeeId LONG,attDate DATE null,inTime VARCHAR(75) null,outTime VARCHAR(75) null,workHour VARCHAR(75) null,latitude VARCHAR(75) null,longitude VARCHAR(75) null,outLatitude VARCHAR(75) null,outLongitude VARCHAR(75) null,geoAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table geoAttendance";
	public static final String ORDER_BY_JPQL = " ORDER BY geoAttendance.attendanceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY geoAttendance.attendanceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.GeoAttendance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.GeoAttendance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.GeoAttendance"),
			true);
	public static final long ATTDATE_COLUMN_BITMASK = 1L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long ATTENDANCEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GeoAttendance toModel(GeoAttendanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GeoAttendance model = new GeoAttendanceImpl();

		model.setAttendanceId(soapModel.getAttendanceId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setAttDate(soapModel.getAttDate());
		model.setInTime(soapModel.getInTime());
		model.setOutTime(soapModel.getOutTime());
		model.setWorkHour(soapModel.getWorkHour());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setOutLatitude(soapModel.getOutLatitude());
		model.setOutLongitude(soapModel.getOutLongitude());
		model.setGeoAddress(soapModel.getGeoAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GeoAttendance> toModels(GeoAttendanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GeoAttendance> models = new ArrayList<GeoAttendance>(soapModels.length);

		for (GeoAttendanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.GeoAttendance"));

	public GeoAttendanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attendanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttendanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attendanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GeoAttendance.class;
	}

	@Override
	public String getModelClassName() {
		return GeoAttendance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("attendanceId", getAttendanceId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("attDate", getAttDate());
		attributes.put("inTime", getInTime());
		attributes.put("outTime", getOutTime());
		attributes.put("workHour", getWorkHour());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("outLatitude", getOutLatitude());
		attributes.put("outLongitude", getOutLongitude());
		attributes.put("geoAddress", getGeoAddress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long attendanceId = (Long)attributes.get("attendanceId");

		if (attendanceId != null) {
			setAttendanceId(attendanceId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Date attDate = (Date)attributes.get("attDate");

		if (attDate != null) {
			setAttDate(attDate);
		}

		String inTime = (String)attributes.get("inTime");

		if (inTime != null) {
			setInTime(inTime);
		}

		String outTime = (String)attributes.get("outTime");

		if (outTime != null) {
			setOutTime(outTime);
		}

		String workHour = (String)attributes.get("workHour");

		if (workHour != null) {
			setWorkHour(workHour);
		}

		String latitude = (String)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String longitude = (String)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		String outLatitude = (String)attributes.get("outLatitude");

		if (outLatitude != null) {
			setOutLatitude(outLatitude);
		}

		String outLongitude = (String)attributes.get("outLongitude");

		if (outLongitude != null) {
			setOutLongitude(outLongitude);
		}

		String geoAddress = (String)attributes.get("geoAddress");

		if (geoAddress != null) {
			setGeoAddress(geoAddress);
		}
	}

	@JSON
	@Override
	public long getAttendanceId() {
		return _attendanceId;
	}

	@Override
	public void setAttendanceId(long attendanceId) {
		_attendanceId = attendanceId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public Date getAttDate() {
		return _attDate;
	}

	@Override
	public void setAttDate(Date attDate) {
		_columnBitmask |= ATTDATE_COLUMN_BITMASK;

		if (_originalAttDate == null) {
			_originalAttDate = _attDate;
		}

		_attDate = attDate;
	}

	public Date getOriginalAttDate() {
		return _originalAttDate;
	}

	@JSON
	@Override
	public String getInTime() {
		if (_inTime == null) {
			return "";
		}
		else {
			return _inTime;
		}
	}

	@Override
	public void setInTime(String inTime) {
		_inTime = inTime;
	}

	@JSON
	@Override
	public String getOutTime() {
		if (_outTime == null) {
			return "";
		}
		else {
			return _outTime;
		}
	}

	@Override
	public void setOutTime(String outTime) {
		_outTime = outTime;
	}

	@JSON
	@Override
	public String getWorkHour() {
		if (_workHour == null) {
			return "";
		}
		else {
			return _workHour;
		}
	}

	@Override
	public void setWorkHour(String workHour) {
		_workHour = workHour;
	}

	@JSON
	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return "";
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return "";
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public String getOutLatitude() {
		if (_outLatitude == null) {
			return "";
		}
		else {
			return _outLatitude;
		}
	}

	@Override
	public void setOutLatitude(String outLatitude) {
		_outLatitude = outLatitude;
	}

	@JSON
	@Override
	public String getOutLongitude() {
		if (_outLongitude == null) {
			return "";
		}
		else {
			return _outLongitude;
		}
	}

	@Override
	public void setOutLongitude(String outLongitude) {
		_outLongitude = outLongitude;
	}

	@JSON
	@Override
	public String getGeoAddress() {
		if (_geoAddress == null) {
			return "";
		}
		else {
			return _geoAddress;
		}
	}

	@Override
	public void setGeoAddress(String geoAddress) {
		_geoAddress = geoAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GeoAttendance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GeoAttendance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeoAttendance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeoAttendanceImpl geoAttendanceImpl = new GeoAttendanceImpl();

		geoAttendanceImpl.setAttendanceId(getAttendanceId());
		geoAttendanceImpl.setEmployeeId(getEmployeeId());
		geoAttendanceImpl.setAttDate(getAttDate());
		geoAttendanceImpl.setInTime(getInTime());
		geoAttendanceImpl.setOutTime(getOutTime());
		geoAttendanceImpl.setWorkHour(getWorkHour());
		geoAttendanceImpl.setLatitude(getLatitude());
		geoAttendanceImpl.setLongitude(getLongitude());
		geoAttendanceImpl.setOutLatitude(getOutLatitude());
		geoAttendanceImpl.setOutLongitude(getOutLongitude());
		geoAttendanceImpl.setGeoAddress(getGeoAddress());

		geoAttendanceImpl.resetOriginalValues();

		return geoAttendanceImpl;
	}

	@Override
	public int compareTo(GeoAttendance geoAttendance) {
		long primaryKey = geoAttendance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeoAttendance)) {
			return false;
		}

		GeoAttendance geoAttendance = (GeoAttendance)obj;

		long primaryKey = geoAttendance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GeoAttendanceModelImpl geoAttendanceModelImpl = this;

		geoAttendanceModelImpl._originalEmployeeId = geoAttendanceModelImpl._employeeId;

		geoAttendanceModelImpl._setOriginalEmployeeId = false;

		geoAttendanceModelImpl._originalAttDate = geoAttendanceModelImpl._attDate;

		geoAttendanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GeoAttendance> toCacheModel() {
		GeoAttendanceCacheModel geoAttendanceCacheModel = new GeoAttendanceCacheModel();

		geoAttendanceCacheModel.attendanceId = getAttendanceId();

		geoAttendanceCacheModel.employeeId = getEmployeeId();

		Date attDate = getAttDate();

		if (attDate != null) {
			geoAttendanceCacheModel.attDate = attDate.getTime();
		}
		else {
			geoAttendanceCacheModel.attDate = Long.MIN_VALUE;
		}

		geoAttendanceCacheModel.inTime = getInTime();

		String inTime = geoAttendanceCacheModel.inTime;

		if ((inTime != null) && (inTime.length() == 0)) {
			geoAttendanceCacheModel.inTime = null;
		}

		geoAttendanceCacheModel.outTime = getOutTime();

		String outTime = geoAttendanceCacheModel.outTime;

		if ((outTime != null) && (outTime.length() == 0)) {
			geoAttendanceCacheModel.outTime = null;
		}

		geoAttendanceCacheModel.workHour = getWorkHour();

		String workHour = geoAttendanceCacheModel.workHour;

		if ((workHour != null) && (workHour.length() == 0)) {
			geoAttendanceCacheModel.workHour = null;
		}

		geoAttendanceCacheModel.latitude = getLatitude();

		String latitude = geoAttendanceCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			geoAttendanceCacheModel.latitude = null;
		}

		geoAttendanceCacheModel.longitude = getLongitude();

		String longitude = geoAttendanceCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			geoAttendanceCacheModel.longitude = null;
		}

		geoAttendanceCacheModel.outLatitude = getOutLatitude();

		String outLatitude = geoAttendanceCacheModel.outLatitude;

		if ((outLatitude != null) && (outLatitude.length() == 0)) {
			geoAttendanceCacheModel.outLatitude = null;
		}

		geoAttendanceCacheModel.outLongitude = getOutLongitude();

		String outLongitude = geoAttendanceCacheModel.outLongitude;

		if ((outLongitude != null) && (outLongitude.length() == 0)) {
			geoAttendanceCacheModel.outLongitude = null;
		}

		geoAttendanceCacheModel.geoAddress = getGeoAddress();

		String geoAddress = geoAttendanceCacheModel.geoAddress;

		if ((geoAddress != null) && (geoAddress.length() == 0)) {
			geoAttendanceCacheModel.geoAddress = null;
		}

		return geoAttendanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{attendanceId=");
		sb.append(getAttendanceId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", attDate=");
		sb.append(getAttDate());
		sb.append(", inTime=");
		sb.append(getInTime());
		sb.append(", outTime=");
		sb.append(getOutTime());
		sb.append(", workHour=");
		sb.append(getWorkHour());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", outLatitude=");
		sb.append(getOutLatitude());
		sb.append(", outLongitude=");
		sb.append(getOutLongitude());
		sb.append(", geoAddress=");
		sb.append(getGeoAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.GeoAttendance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>attendanceId</column-name><column-value><![CDATA[");
		sb.append(getAttendanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attDate</column-name><column-value><![CDATA[");
		sb.append(getAttDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inTime</column-name><column-value><![CDATA[");
		sb.append(getInTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outTime</column-name><column-value><![CDATA[");
		sb.append(getOutTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workHour</column-name><column-value><![CDATA[");
		sb.append(getWorkHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outLatitude</column-name><column-value><![CDATA[");
		sb.append(getOutLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outLongitude</column-name><column-value><![CDATA[");
		sb.append(getOutLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoAddress</column-name><column-value><![CDATA[");
		sb.append(getGeoAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GeoAttendance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GeoAttendance.class, ModelWrapper.class
		};
	private long _attendanceId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private Date _attDate;
	private Date _originalAttDate;
	private String _inTime;
	private String _outTime;
	private String _workHour;
	private String _latitude;
	private String _longitude;
	private String _outLatitude;
	private String _outLongitude;
	private String _geoAddress;
	private long _columnBitmask;
	private GeoAttendance _escapedModel;
}