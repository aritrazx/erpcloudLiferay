/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.AppraisalProjectMaster;
import com.liferay.famocom.erpcloud.model.AppraisalProjectMasterModel;
import com.liferay.famocom.erpcloud.model.AppraisalProjectMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppraisalProjectMaster service. Represents a row in the &quot;appraisalProjectMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AppraisalProjectMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppraisalProjectMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see AppraisalProjectMasterImpl
 * @see AppraisalProjectMaster
 * @see AppraisalProjectMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AppraisalProjectMasterModelImpl extends BaseModelImpl<AppraisalProjectMaster>
	implements AppraisalProjectMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a appraisal project master model instance should use the {@link AppraisalProjectMaster} interface instead.
	 */
	public static final String TABLE_NAME = "appraisalProjectMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appraisalProjectId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "appraisalId", Types.BIGINT },
			{ "appraisalSettingId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "projectId", Types.BIGINT },
			{ "projectDescription", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "submitStep", Types.BIGINT },
			{ "addedDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("appraisalProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("submitStep", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table appraisalProjectMaster (appraisalProjectId LONG not null primary key,companyId LONG,appraisalId LONG,appraisalSettingId LONG,employeeId LONG,projectId LONG,projectDescription VARCHAR(75) null,startDate DATE null,endDate DATE null,submitStep LONG,addedDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table appraisalProjectMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY appraisalProjectMaster.appraisalProjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY appraisalProjectMaster.appraisalProjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalProjectMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalProjectMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.AppraisalProjectMaster"),
			true);
	public static final long APPRAISALID_COLUMN_BITMASK = 1L;
	public static final long APPRAISALSETTINGID_COLUMN_BITMASK = 2L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 4L;
	public static final long PROJECTID_COLUMN_BITMASK = 8L;
	public static final long SUBMITSTEP_COLUMN_BITMASK = 16L;
	public static final long APPRAISALPROJECTID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppraisalProjectMaster toModel(
		AppraisalProjectMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppraisalProjectMaster model = new AppraisalProjectMasterImpl();

		model.setAppraisalProjectId(soapModel.getAppraisalProjectId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAppraisalId(soapModel.getAppraisalId());
		model.setAppraisalSettingId(soapModel.getAppraisalSettingId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setProjectId(soapModel.getProjectId());
		model.setProjectDescription(soapModel.getProjectDescription());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setSubmitStep(soapModel.getSubmitStep());
		model.setAddedDate(soapModel.getAddedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppraisalProjectMaster> toModels(
		AppraisalProjectMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppraisalProjectMaster> models = new ArrayList<AppraisalProjectMaster>(soapModels.length);

		for (AppraisalProjectMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.AppraisalProjectMaster"));

	public AppraisalProjectMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appraisalProjectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppraisalProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appraisalProjectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppraisalProjectMaster.class;
	}

	@Override
	public String getModelClassName() {
		return AppraisalProjectMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appraisalProjectId", getAppraisalProjectId());
		attributes.put("companyId", getCompanyId());
		attributes.put("appraisalId", getAppraisalId());
		attributes.put("appraisalSettingId", getAppraisalSettingId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("projectId", getProjectId());
		attributes.put("projectDescription", getProjectDescription());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("submitStep", getSubmitStep());
		attributes.put("addedDate", getAddedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appraisalProjectId = (Long)attributes.get("appraisalProjectId");

		if (appraisalProjectId != null) {
			setAppraisalProjectId(appraisalProjectId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long appraisalId = (Long)attributes.get("appraisalId");

		if (appraisalId != null) {
			setAppraisalId(appraisalId);
		}

		Long appraisalSettingId = (Long)attributes.get("appraisalSettingId");

		if (appraisalSettingId != null) {
			setAppraisalSettingId(appraisalSettingId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		String projectDescription = (String)attributes.get("projectDescription");

		if (projectDescription != null) {
			setProjectDescription(projectDescription);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Long submitStep = (Long)attributes.get("submitStep");

		if (submitStep != null) {
			setSubmitStep(submitStep);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getAppraisalProjectId() {
		return _appraisalProjectId;
	}

	@Override
	public void setAppraisalProjectId(long appraisalProjectId) {
		_appraisalProjectId = appraisalProjectId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getAppraisalId() {
		return _appraisalId;
	}

	@Override
	public void setAppraisalId(long appraisalId) {
		_columnBitmask |= APPRAISALID_COLUMN_BITMASK;

		if (!_setOriginalAppraisalId) {
			_setOriginalAppraisalId = true;

			_originalAppraisalId = _appraisalId;
		}

		_appraisalId = appraisalId;
	}

	public long getOriginalAppraisalId() {
		return _originalAppraisalId;
	}

	@JSON
	@Override
	public long getAppraisalSettingId() {
		return _appraisalSettingId;
	}

	@Override
	public void setAppraisalSettingId(long appraisalSettingId) {
		_columnBitmask |= APPRAISALSETTINGID_COLUMN_BITMASK;

		if (!_setOriginalAppraisalSettingId) {
			_setOriginalAppraisalSettingId = true;

			_originalAppraisalSettingId = _appraisalSettingId;
		}

		_appraisalSettingId = appraisalSettingId;
	}

	public long getOriginalAppraisalSettingId() {
		return _originalAppraisalSettingId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public String getProjectDescription() {
		if (_projectDescription == null) {
			return "";
		}
		else {
			return _projectDescription;
		}
	}

	@Override
	public void setProjectDescription(String projectDescription) {
		_projectDescription = projectDescription;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public long getSubmitStep() {
		return _submitStep;
	}

	@Override
	public void setSubmitStep(long submitStep) {
		_columnBitmask |= SUBMITSTEP_COLUMN_BITMASK;

		if (!_setOriginalSubmitStep) {
			_setOriginalSubmitStep = true;

			_originalSubmitStep = _submitStep;
		}

		_submitStep = submitStep;
	}

	public long getOriginalSubmitStep() {
		return _originalSubmitStep;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppraisalProjectMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppraisalProjectMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppraisalProjectMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppraisalProjectMasterImpl appraisalProjectMasterImpl = new AppraisalProjectMasterImpl();

		appraisalProjectMasterImpl.setAppraisalProjectId(getAppraisalProjectId());
		appraisalProjectMasterImpl.setCompanyId(getCompanyId());
		appraisalProjectMasterImpl.setAppraisalId(getAppraisalId());
		appraisalProjectMasterImpl.setAppraisalSettingId(getAppraisalSettingId());
		appraisalProjectMasterImpl.setEmployeeId(getEmployeeId());
		appraisalProjectMasterImpl.setProjectId(getProjectId());
		appraisalProjectMasterImpl.setProjectDescription(getProjectDescription());
		appraisalProjectMasterImpl.setStartDate(getStartDate());
		appraisalProjectMasterImpl.setEndDate(getEndDate());
		appraisalProjectMasterImpl.setSubmitStep(getSubmitStep());
		appraisalProjectMasterImpl.setAddedDate(getAddedDate());
		appraisalProjectMasterImpl.setCreatedBy(getCreatedBy());
		appraisalProjectMasterImpl.setModifiedDate(getModifiedDate());
		appraisalProjectMasterImpl.setModifiedBy(getModifiedBy());

		appraisalProjectMasterImpl.resetOriginalValues();

		return appraisalProjectMasterImpl;
	}

	@Override
	public int compareTo(AppraisalProjectMaster appraisalProjectMaster) {
		long primaryKey = appraisalProjectMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppraisalProjectMaster)) {
			return false;
		}

		AppraisalProjectMaster appraisalProjectMaster = (AppraisalProjectMaster)obj;

		long primaryKey = appraisalProjectMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AppraisalProjectMasterModelImpl appraisalProjectMasterModelImpl = this;

		appraisalProjectMasterModelImpl._originalAppraisalId = appraisalProjectMasterModelImpl._appraisalId;

		appraisalProjectMasterModelImpl._setOriginalAppraisalId = false;

		appraisalProjectMasterModelImpl._originalAppraisalSettingId = appraisalProjectMasterModelImpl._appraisalSettingId;

		appraisalProjectMasterModelImpl._setOriginalAppraisalSettingId = false;

		appraisalProjectMasterModelImpl._originalEmployeeId = appraisalProjectMasterModelImpl._employeeId;

		appraisalProjectMasterModelImpl._setOriginalEmployeeId = false;

		appraisalProjectMasterModelImpl._originalProjectId = appraisalProjectMasterModelImpl._projectId;

		appraisalProjectMasterModelImpl._setOriginalProjectId = false;

		appraisalProjectMasterModelImpl._originalSubmitStep = appraisalProjectMasterModelImpl._submitStep;

		appraisalProjectMasterModelImpl._setOriginalSubmitStep = false;

		appraisalProjectMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppraisalProjectMaster> toCacheModel() {
		AppraisalProjectMasterCacheModel appraisalProjectMasterCacheModel = new AppraisalProjectMasterCacheModel();

		appraisalProjectMasterCacheModel.appraisalProjectId = getAppraisalProjectId();

		appraisalProjectMasterCacheModel.companyId = getCompanyId();

		appraisalProjectMasterCacheModel.appraisalId = getAppraisalId();

		appraisalProjectMasterCacheModel.appraisalSettingId = getAppraisalSettingId();

		appraisalProjectMasterCacheModel.employeeId = getEmployeeId();

		appraisalProjectMasterCacheModel.projectId = getProjectId();

		appraisalProjectMasterCacheModel.projectDescription = getProjectDescription();

		String projectDescription = appraisalProjectMasterCacheModel.projectDescription;

		if ((projectDescription != null) && (projectDescription.length() == 0)) {
			appraisalProjectMasterCacheModel.projectDescription = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			appraisalProjectMasterCacheModel.startDate = startDate.getTime();
		}
		else {
			appraisalProjectMasterCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			appraisalProjectMasterCacheModel.endDate = endDate.getTime();
		}
		else {
			appraisalProjectMasterCacheModel.endDate = Long.MIN_VALUE;
		}

		appraisalProjectMasterCacheModel.submitStep = getSubmitStep();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			appraisalProjectMasterCacheModel.addedDate = addedDate.getTime();
		}
		else {
			appraisalProjectMasterCacheModel.addedDate = Long.MIN_VALUE;
		}

		appraisalProjectMasterCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appraisalProjectMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appraisalProjectMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appraisalProjectMasterCacheModel.modifiedBy = getModifiedBy();

		return appraisalProjectMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{appraisalProjectId=");
		sb.append(getAppraisalProjectId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", appraisalId=");
		sb.append(getAppraisalId());
		sb.append(", appraisalSettingId=");
		sb.append(getAppraisalSettingId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", projectDescription=");
		sb.append(getProjectDescription());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", submitStep=");
		sb.append(getSubmitStep());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.AppraisalProjectMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appraisalProjectId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalSettingId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectDescription</column-name><column-value><![CDATA[");
		sb.append(getProjectDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitStep</column-name><column-value><![CDATA[");
		sb.append(getSubmitStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AppraisalProjectMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AppraisalProjectMaster.class, ModelWrapper.class
		};
	private long _appraisalProjectId;
	private long _companyId;
	private long _appraisalId;
	private long _originalAppraisalId;
	private boolean _setOriginalAppraisalId;
	private long _appraisalSettingId;
	private long _originalAppraisalSettingId;
	private boolean _setOriginalAppraisalSettingId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private String _projectDescription;
	private Date _startDate;
	private Date _endDate;
	private long _submitStep;
	private long _originalSubmitStep;
	private boolean _setOriginalSubmitStep;
	private Date _addedDate;
	private long _createdBy;
	private Date _modifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private AppraisalProjectMaster _escapedModel;
}