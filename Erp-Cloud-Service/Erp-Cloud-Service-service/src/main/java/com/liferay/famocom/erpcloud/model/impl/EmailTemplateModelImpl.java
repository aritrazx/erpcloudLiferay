/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.EmailTemplate;
import com.liferay.famocom.erpcloud.model.EmailTemplateModel;
import com.liferay.famocom.erpcloud.model.EmailTemplateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmailTemplate service. Represents a row in the &quot;emailTemplates&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmailTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailTemplateImpl}.
 * </p>
 *
 * @author Samaresh
 * @see EmailTemplateImpl
 * @see EmailTemplate
 * @see EmailTemplateModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmailTemplateModelImpl extends BaseModelImpl<EmailTemplate>
	implements EmailTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email template model instance should use the {@link EmailTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "emailTemplates";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "templateName", Types.VARCHAR },
			{ "emailFor", Types.VARCHAR },
			{ "templateBody", Types.VARCHAR },
			{ "createdBy", Types.TIMESTAMP },
			{ "ModifiedBy", Types.TIMESTAMP },
			{ "Status", Types.BOOLEAN },
			{ "restoreTemplateBody", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("templateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailFor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("templateBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdBy", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ModifiedBy", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("restoreTemplateBody", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table emailTemplates (id_ LONG not null primary key,templateName VARCHAR(75) null,emailFor VARCHAR(75) null,templateBody VARCHAR(75) null,createdBy DATE null,ModifiedBy DATE null,Status BOOLEAN,restoreTemplateBody VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table emailTemplates";
	public static final String ORDER_BY_JPQL = " ORDER BY emailTemplate.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY emailTemplates.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.EmailTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.EmailTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.EmailTemplate"),
			true);
	public static final long EMAILFOR_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmailTemplate toModel(EmailTemplateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmailTemplate model = new EmailTemplateImpl();

		model.setId(soapModel.getId());
		model.setTemplateName(soapModel.getTemplateName());
		model.setEmailFor(soapModel.getEmailFor());
		model.setTemplateBody(soapModel.getTemplateBody());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setStatus(soapModel.isStatus());
		model.setRestoreTemplateBody(soapModel.getRestoreTemplateBody());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmailTemplate> toModels(EmailTemplateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmailTemplate> models = new ArrayList<EmailTemplate>(soapModels.length);

		for (EmailTemplateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.EmailTemplate"));

	public EmailTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return EmailTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("templateName", getTemplateName());
		attributes.put("emailFor", getEmailFor());
		attributes.put("templateBody", getTemplateBody());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("Status", isStatus());
		attributes.put("restoreTemplateBody", getRestoreTemplateBody());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String templateName = (String)attributes.get("templateName");

		if (templateName != null) {
			setTemplateName(templateName);
		}

		String emailFor = (String)attributes.get("emailFor");

		if (emailFor != null) {
			setEmailFor(emailFor);
		}

		String templateBody = (String)attributes.get("templateBody");

		if (templateBody != null) {
			setTemplateBody(templateBody);
		}

		Date createdBy = (Date)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date ModifiedBy = (Date)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Boolean Status = (Boolean)attributes.get("Status");

		if (Status != null) {
			setStatus(Status);
		}

		String restoreTemplateBody = (String)attributes.get(
				"restoreTemplateBody");

		if (restoreTemplateBody != null) {
			setRestoreTemplateBody(restoreTemplateBody);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return "";
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		_templateName = templateName;
	}

	@JSON
	@Override
	public String getEmailFor() {
		if (_emailFor == null) {
			return "";
		}
		else {
			return _emailFor;
		}
	}

	@Override
	public void setEmailFor(String emailFor) {
		_columnBitmask |= EMAILFOR_COLUMN_BITMASK;

		if (_originalEmailFor == null) {
			_originalEmailFor = _emailFor;
		}

		_emailFor = emailFor;
	}

	public String getOriginalEmailFor() {
		return GetterUtil.getString(_originalEmailFor);
	}

	@JSON
	@Override
	public String getTemplateBody() {
		if (_templateBody == null) {
			return "";
		}
		else {
			return _templateBody;
		}
	}

	@Override
	public void setTemplateBody(String templateBody) {
		_templateBody = templateBody;
	}

	@JSON
	@Override
	public Date getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(Date createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedBy() {
		return _ModifiedBy;
	}

	@Override
	public void setModifiedBy(Date ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _Status;
	}

	@JSON
	@Override
	public boolean isStatus() {
		return _Status;
	}

	@Override
	public void setStatus(boolean Status) {
		_Status = Status;
	}

	@JSON
	@Override
	public String getRestoreTemplateBody() {
		if (_restoreTemplateBody == null) {
			return "";
		}
		else {
			return _restoreTemplateBody;
		}
	}

	@Override
	public void setRestoreTemplateBody(String restoreTemplateBody) {
		_restoreTemplateBody = restoreTemplateBody;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmailTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmailTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailTemplateImpl emailTemplateImpl = new EmailTemplateImpl();

		emailTemplateImpl.setId(getId());
		emailTemplateImpl.setTemplateName(getTemplateName());
		emailTemplateImpl.setEmailFor(getEmailFor());
		emailTemplateImpl.setTemplateBody(getTemplateBody());
		emailTemplateImpl.setCreatedBy(getCreatedBy());
		emailTemplateImpl.setModifiedBy(getModifiedBy());
		emailTemplateImpl.setStatus(isStatus());
		emailTemplateImpl.setRestoreTemplateBody(getRestoreTemplateBody());

		emailTemplateImpl.resetOriginalValues();

		return emailTemplateImpl;
	}

	@Override
	public int compareTo(EmailTemplate emailTemplate) {
		long primaryKey = emailTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmailTemplate)) {
			return false;
		}

		EmailTemplate emailTemplate = (EmailTemplate)obj;

		long primaryKey = emailTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmailTemplateModelImpl emailTemplateModelImpl = this;

		emailTemplateModelImpl._originalEmailFor = emailTemplateModelImpl._emailFor;

		emailTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailTemplate> toCacheModel() {
		EmailTemplateCacheModel emailTemplateCacheModel = new EmailTemplateCacheModel();

		emailTemplateCacheModel.id = getId();

		emailTemplateCacheModel.templateName = getTemplateName();

		String templateName = emailTemplateCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			emailTemplateCacheModel.templateName = null;
		}

		emailTemplateCacheModel.emailFor = getEmailFor();

		String emailFor = emailTemplateCacheModel.emailFor;

		if ((emailFor != null) && (emailFor.length() == 0)) {
			emailTemplateCacheModel.emailFor = null;
		}

		emailTemplateCacheModel.templateBody = getTemplateBody();

		String templateBody = emailTemplateCacheModel.templateBody;

		if ((templateBody != null) && (templateBody.length() == 0)) {
			emailTemplateCacheModel.templateBody = null;
		}

		Date createdBy = getCreatedBy();

		if (createdBy != null) {
			emailTemplateCacheModel.createdBy = createdBy.getTime();
		}
		else {
			emailTemplateCacheModel.createdBy = Long.MIN_VALUE;
		}

		Date ModifiedBy = getModifiedBy();

		if (ModifiedBy != null) {
			emailTemplateCacheModel.ModifiedBy = ModifiedBy.getTime();
		}
		else {
			emailTemplateCacheModel.ModifiedBy = Long.MIN_VALUE;
		}

		emailTemplateCacheModel.Status = isStatus();

		emailTemplateCacheModel.restoreTemplateBody = getRestoreTemplateBody();

		String restoreTemplateBody = emailTemplateCacheModel.restoreTemplateBody;

		if ((restoreTemplateBody != null) &&
				(restoreTemplateBody.length() == 0)) {
			emailTemplateCacheModel.restoreTemplateBody = null;
		}

		return emailTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", templateName=");
		sb.append(getTemplateName());
		sb.append(", emailFor=");
		sb.append(getEmailFor());
		sb.append(", templateBody=");
		sb.append(getTemplateBody());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", Status=");
		sb.append(isStatus());
		sb.append(", restoreTemplateBody=");
		sb.append(getRestoreTemplateBody());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.EmailTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateName</column-name><column-value><![CDATA[");
		sb.append(getTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailFor</column-name><column-value><![CDATA[");
		sb.append(getEmailFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateBody</column-name><column-value><![CDATA[");
		sb.append(getTemplateBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Status</column-name><column-value><![CDATA[");
		sb.append(isStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>restoreTemplateBody</column-name><column-value><![CDATA[");
		sb.append(getRestoreTemplateBody());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmailTemplate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmailTemplate.class, ModelWrapper.class
		};
	private long _id;
	private String _templateName;
	private String _emailFor;
	private String _originalEmailFor;
	private String _templateBody;
	private Date _createdBy;
	private Date _ModifiedBy;
	private boolean _Status;
	private String _restoreTemplateBody;
	private long _columnBitmask;
	private EmailTemplate _escapedModel;
}