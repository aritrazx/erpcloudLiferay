/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.TaskMaster;
import com.liferay.famocom.erpcloud.model.TaskMasterModel;
import com.liferay.famocom.erpcloud.model.TaskMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TaskMaster service. Represents a row in the &quot;taskMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TaskMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see TaskMasterImpl
 * @see TaskMaster
 * @see TaskMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TaskMasterModelImpl extends BaseModelImpl<TaskMaster>
	implements TaskMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a task master model instance should use the {@link TaskMaster} interface instead.
	 */
	public static final String TABLE_NAME = "taskMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "taskId", Types.BIGINT },
			{ "taskName", Types.VARCHAR },
			{ "taskDesc", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table taskMaster (taskId LONG not null primary key,taskName VARCHAR(75) null,taskDesc VARCHAR(75) null,status INTEGER,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table taskMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY taskMaster.taskId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY taskMaster.taskId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.TaskMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.TaskMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TaskMaster toModel(TaskMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TaskMaster model = new TaskMasterImpl();

		model.setTaskId(soapModel.getTaskId());
		model.setTaskName(soapModel.getTaskName());
		model.setTaskDesc(soapModel.getTaskDesc());
		model.setStatus(soapModel.getStatus());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TaskMaster> toModels(TaskMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TaskMaster> models = new ArrayList<TaskMaster>(soapModels.length);

		for (TaskMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.TaskMaster"));

	public TaskMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TaskMaster.class;
	}

	@Override
	public String getModelClassName() {
		return TaskMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("taskId", getTaskId());
		attributes.put("taskName", getTaskName());
		attributes.put("taskDesc", getTaskDesc());
		attributes.put("status", getStatus());
		attributes.put("createDate", getCreateDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		String taskName = (String)attributes.get("taskName");

		if (taskName != null) {
			setTaskName(taskName);
		}

		String taskDesc = (String)attributes.get("taskDesc");

		if (taskDesc != null) {
			setTaskDesc(taskDesc);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public String getTaskName() {
		if (_taskName == null) {
			return "";
		}
		else {
			return _taskName;
		}
	}

	@Override
	public void setTaskName(String taskName) {
		_taskName = taskName;
	}

	@JSON
	@Override
	public String getTaskDesc() {
		if (_taskDesc == null) {
			return "";
		}
		else {
			return _taskDesc;
		}
	}

	@Override
	public void setTaskDesc(String taskDesc) {
		_taskDesc = taskDesc;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TaskMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TaskMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TaskMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaskMasterImpl taskMasterImpl = new TaskMasterImpl();

		taskMasterImpl.setTaskId(getTaskId());
		taskMasterImpl.setTaskName(getTaskName());
		taskMasterImpl.setTaskDesc(getTaskDesc());
		taskMasterImpl.setStatus(getStatus());
		taskMasterImpl.setCreateDate(getCreateDate());

		taskMasterImpl.resetOriginalValues();

		return taskMasterImpl;
	}

	@Override
	public int compareTo(TaskMaster taskMaster) {
		long primaryKey = taskMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TaskMaster)) {
			return false;
		}

		TaskMaster taskMaster = (TaskMaster)obj;

		long primaryKey = taskMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TaskMaster> toCacheModel() {
		TaskMasterCacheModel taskMasterCacheModel = new TaskMasterCacheModel();

		taskMasterCacheModel.taskId = getTaskId();

		taskMasterCacheModel.taskName = getTaskName();

		String taskName = taskMasterCacheModel.taskName;

		if ((taskName != null) && (taskName.length() == 0)) {
			taskMasterCacheModel.taskName = null;
		}

		taskMasterCacheModel.taskDesc = getTaskDesc();

		String taskDesc = taskMasterCacheModel.taskDesc;

		if ((taskDesc != null) && (taskDesc.length() == 0)) {
			taskMasterCacheModel.taskDesc = null;
		}

		taskMasterCacheModel.status = getStatus();

		Date createDate = getCreateDate();

		if (createDate != null) {
			taskMasterCacheModel.createDate = createDate.getTime();
		}
		else {
			taskMasterCacheModel.createDate = Long.MIN_VALUE;
		}

		return taskMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{taskId=");
		sb.append(getTaskId());
		sb.append(", taskName=");
		sb.append(getTaskName());
		sb.append(", taskDesc=");
		sb.append(getTaskDesc());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.TaskMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskName</column-name><column-value><![CDATA[");
		sb.append(getTaskName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskDesc</column-name><column-value><![CDATA[");
		sb.append(getTaskDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TaskMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TaskMaster.class, ModelWrapper.class
		};
	private long _taskId;
	private String _taskName;
	private String _taskDesc;
	private int _status;
	private Date _createDate;
	private TaskMaster _escapedModel;
}