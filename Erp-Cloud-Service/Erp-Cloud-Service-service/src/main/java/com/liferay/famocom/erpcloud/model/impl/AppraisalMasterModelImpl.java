/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.famocom.erpcloud.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.famocom.erpcloud.model.AppraisalMaster;
import com.liferay.famocom.erpcloud.model.AppraisalMasterModel;
import com.liferay.famocom.erpcloud.model.AppraisalMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AppraisalMaster service. Represents a row in the &quot;appraisalMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AppraisalMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppraisalMasterImpl}.
 * </p>
 *
 * @author Samaresh
 * @see AppraisalMasterImpl
 * @see AppraisalMaster
 * @see AppraisalMasterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AppraisalMasterModelImpl extends BaseModelImpl<AppraisalMaster>
	implements AppraisalMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a appraisal master model instance should use the {@link AppraisalMaster} interface instead.
	 */
	public static final String TABLE_NAME = "appraisalMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "appraisalId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "appraisalSettingId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "accomplishmentsEmp", Types.VARCHAR },
			{ "strengthsEmp", Types.VARCHAR },
			{ "developmentEmp", Types.VARCHAR },
			{ "careerEmp", Types.VARCHAR },
			{ "overallRatingEmp", Types.BIGINT },
			{ "overallCommentEmp", Types.VARCHAR },
			{ "accomplishmentsMan", Types.VARCHAR },
			{ "strengthsMan", Types.VARCHAR },
			{ "developmentMan", Types.VARCHAR },
			{ "careerMan", Types.VARCHAR },
			{ "companyValue", Types.VARCHAR },
			{ "developmentPlan", Types.VARCHAR },
			{ "overallRatingMan", Types.BIGINT },
			{ "overallCommentMan", Types.VARCHAR },
			{ "submitStep", Types.BIGINT },
			{ "addedDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("appraisalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appraisalSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accomplishmentsEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("strengthsEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("developmentEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("careerEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overallRatingEmp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("overallCommentEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accomplishmentsMan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("strengthsMan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("developmentMan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("careerMan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("developmentPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overallRatingMan", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("overallCommentMan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submitStep", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table appraisalMaster (appraisalId LONG not null primary key,companyId LONG,appraisalSettingId LONG,employeeId LONG,accomplishmentsEmp VARCHAR(75) null,strengthsEmp VARCHAR(75) null,developmentEmp VARCHAR(75) null,careerEmp VARCHAR(75) null,overallRatingEmp LONG,overallCommentEmp VARCHAR(75) null,accomplishmentsMan VARCHAR(75) null,strengthsMan VARCHAR(75) null,developmentMan VARCHAR(75) null,careerMan VARCHAR(75) null,companyValue VARCHAR(75) null,developmentPlan VARCHAR(75) null,overallRatingMan LONG,overallCommentMan VARCHAR(75) null,submitStep LONG,addedDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table appraisalMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY appraisalMaster.appraisalId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY appraisalMaster.appraisalId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.famocom.erpcloud.model.AppraisalMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.famocom.erpcloud.model.AppraisalMaster"),
			true);
	public static final long APPRAISALSETTINGID_COLUMN_BITMASK = 1L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long SUBMITSTEP_COLUMN_BITMASK = 4L;
	public static final long APPRAISALID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AppraisalMaster toModel(AppraisalMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppraisalMaster model = new AppraisalMasterImpl();

		model.setAppraisalId(soapModel.getAppraisalId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAppraisalSettingId(soapModel.getAppraisalSettingId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setAccomplishmentsEmp(soapModel.getAccomplishmentsEmp());
		model.setStrengthsEmp(soapModel.getStrengthsEmp());
		model.setDevelopmentEmp(soapModel.getDevelopmentEmp());
		model.setCareerEmp(soapModel.getCareerEmp());
		model.setOverallRatingEmp(soapModel.getOverallRatingEmp());
		model.setOverallCommentEmp(soapModel.getOverallCommentEmp());
		model.setAccomplishmentsMan(soapModel.getAccomplishmentsMan());
		model.setStrengthsMan(soapModel.getStrengthsMan());
		model.setDevelopmentMan(soapModel.getDevelopmentMan());
		model.setCareerMan(soapModel.getCareerMan());
		model.setCompanyValue(soapModel.getCompanyValue());
		model.setDevelopmentPlan(soapModel.getDevelopmentPlan());
		model.setOverallRatingMan(soapModel.getOverallRatingMan());
		model.setOverallCommentMan(soapModel.getOverallCommentMan());
		model.setSubmitStep(soapModel.getSubmitStep());
		model.setAddedDate(soapModel.getAddedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AppraisalMaster> toModels(
		AppraisalMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AppraisalMaster> models = new ArrayList<AppraisalMaster>(soapModels.length);

		for (AppraisalMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.famocom.erpcloud.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.famocom.erpcloud.model.AppraisalMaster"));

	public AppraisalMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appraisalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppraisalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appraisalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppraisalMaster.class;
	}

	@Override
	public String getModelClassName() {
		return AppraisalMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("appraisalId", getAppraisalId());
		attributes.put("companyId", getCompanyId());
		attributes.put("appraisalSettingId", getAppraisalSettingId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("accomplishmentsEmp", getAccomplishmentsEmp());
		attributes.put("strengthsEmp", getStrengthsEmp());
		attributes.put("developmentEmp", getDevelopmentEmp());
		attributes.put("careerEmp", getCareerEmp());
		attributes.put("overallRatingEmp", getOverallRatingEmp());
		attributes.put("overallCommentEmp", getOverallCommentEmp());
		attributes.put("accomplishmentsMan", getAccomplishmentsMan());
		attributes.put("strengthsMan", getStrengthsMan());
		attributes.put("developmentMan", getDevelopmentMan());
		attributes.put("careerMan", getCareerMan());
		attributes.put("companyValue", getCompanyValue());
		attributes.put("developmentPlan", getDevelopmentPlan());
		attributes.put("overallRatingMan", getOverallRatingMan());
		attributes.put("overallCommentMan", getOverallCommentMan());
		attributes.put("submitStep", getSubmitStep());
		attributes.put("addedDate", getAddedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("modifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long appraisalId = (Long)attributes.get("appraisalId");

		if (appraisalId != null) {
			setAppraisalId(appraisalId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long appraisalSettingId = (Long)attributes.get("appraisalSettingId");

		if (appraisalSettingId != null) {
			setAppraisalSettingId(appraisalSettingId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		String accomplishmentsEmp = (String)attributes.get("accomplishmentsEmp");

		if (accomplishmentsEmp != null) {
			setAccomplishmentsEmp(accomplishmentsEmp);
		}

		String strengthsEmp = (String)attributes.get("strengthsEmp");

		if (strengthsEmp != null) {
			setStrengthsEmp(strengthsEmp);
		}

		String developmentEmp = (String)attributes.get("developmentEmp");

		if (developmentEmp != null) {
			setDevelopmentEmp(developmentEmp);
		}

		String careerEmp = (String)attributes.get("careerEmp");

		if (careerEmp != null) {
			setCareerEmp(careerEmp);
		}

		Long overallRatingEmp = (Long)attributes.get("overallRatingEmp");

		if (overallRatingEmp != null) {
			setOverallRatingEmp(overallRatingEmp);
		}

		String overallCommentEmp = (String)attributes.get("overallCommentEmp");

		if (overallCommentEmp != null) {
			setOverallCommentEmp(overallCommentEmp);
		}

		String accomplishmentsMan = (String)attributes.get("accomplishmentsMan");

		if (accomplishmentsMan != null) {
			setAccomplishmentsMan(accomplishmentsMan);
		}

		String strengthsMan = (String)attributes.get("strengthsMan");

		if (strengthsMan != null) {
			setStrengthsMan(strengthsMan);
		}

		String developmentMan = (String)attributes.get("developmentMan");

		if (developmentMan != null) {
			setDevelopmentMan(developmentMan);
		}

		String careerMan = (String)attributes.get("careerMan");

		if (careerMan != null) {
			setCareerMan(careerMan);
		}

		String companyValue = (String)attributes.get("companyValue");

		if (companyValue != null) {
			setCompanyValue(companyValue);
		}

		String developmentPlan = (String)attributes.get("developmentPlan");

		if (developmentPlan != null) {
			setDevelopmentPlan(developmentPlan);
		}

		Long overallRatingMan = (Long)attributes.get("overallRatingMan");

		if (overallRatingMan != null) {
			setOverallRatingMan(overallRatingMan);
		}

		String overallCommentMan = (String)attributes.get("overallCommentMan");

		if (overallCommentMan != null) {
			setOverallCommentMan(overallCommentMan);
		}

		Long submitStep = (Long)attributes.get("submitStep");

		if (submitStep != null) {
			setSubmitStep(submitStep);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getAppraisalId() {
		return _appraisalId;
	}

	@Override
	public void setAppraisalId(long appraisalId) {
		_appraisalId = appraisalId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getAppraisalSettingId() {
		return _appraisalSettingId;
	}

	@Override
	public void setAppraisalSettingId(long appraisalSettingId) {
		_columnBitmask |= APPRAISALSETTINGID_COLUMN_BITMASK;

		if (!_setOriginalAppraisalSettingId) {
			_setOriginalAppraisalSettingId = true;

			_originalAppraisalSettingId = _appraisalSettingId;
		}

		_appraisalSettingId = appraisalSettingId;
	}

	public long getOriginalAppraisalSettingId() {
		return _originalAppraisalSettingId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public String getAccomplishmentsEmp() {
		if (_accomplishmentsEmp == null) {
			return "";
		}
		else {
			return _accomplishmentsEmp;
		}
	}

	@Override
	public void setAccomplishmentsEmp(String accomplishmentsEmp) {
		_accomplishmentsEmp = accomplishmentsEmp;
	}

	@JSON
	@Override
	public String getStrengthsEmp() {
		if (_strengthsEmp == null) {
			return "";
		}
		else {
			return _strengthsEmp;
		}
	}

	@Override
	public void setStrengthsEmp(String strengthsEmp) {
		_strengthsEmp = strengthsEmp;
	}

	@JSON
	@Override
	public String getDevelopmentEmp() {
		if (_developmentEmp == null) {
			return "";
		}
		else {
			return _developmentEmp;
		}
	}

	@Override
	public void setDevelopmentEmp(String developmentEmp) {
		_developmentEmp = developmentEmp;
	}

	@JSON
	@Override
	public String getCareerEmp() {
		if (_careerEmp == null) {
			return "";
		}
		else {
			return _careerEmp;
		}
	}

	@Override
	public void setCareerEmp(String careerEmp) {
		_careerEmp = careerEmp;
	}

	@JSON
	@Override
	public long getOverallRatingEmp() {
		return _overallRatingEmp;
	}

	@Override
	public void setOverallRatingEmp(long overallRatingEmp) {
		_overallRatingEmp = overallRatingEmp;
	}

	@JSON
	@Override
	public String getOverallCommentEmp() {
		if (_overallCommentEmp == null) {
			return "";
		}
		else {
			return _overallCommentEmp;
		}
	}

	@Override
	public void setOverallCommentEmp(String overallCommentEmp) {
		_overallCommentEmp = overallCommentEmp;
	}

	@JSON
	@Override
	public String getAccomplishmentsMan() {
		if (_accomplishmentsMan == null) {
			return "";
		}
		else {
			return _accomplishmentsMan;
		}
	}

	@Override
	public void setAccomplishmentsMan(String accomplishmentsMan) {
		_accomplishmentsMan = accomplishmentsMan;
	}

	@JSON
	@Override
	public String getStrengthsMan() {
		if (_strengthsMan == null) {
			return "";
		}
		else {
			return _strengthsMan;
		}
	}

	@Override
	public void setStrengthsMan(String strengthsMan) {
		_strengthsMan = strengthsMan;
	}

	@JSON
	@Override
	public String getDevelopmentMan() {
		if (_developmentMan == null) {
			return "";
		}
		else {
			return _developmentMan;
		}
	}

	@Override
	public void setDevelopmentMan(String developmentMan) {
		_developmentMan = developmentMan;
	}

	@JSON
	@Override
	public String getCareerMan() {
		if (_careerMan == null) {
			return "";
		}
		else {
			return _careerMan;
		}
	}

	@Override
	public void setCareerMan(String careerMan) {
		_careerMan = careerMan;
	}

	@JSON
	@Override
	public String getCompanyValue() {
		if (_companyValue == null) {
			return "";
		}
		else {
			return _companyValue;
		}
	}

	@Override
	public void setCompanyValue(String companyValue) {
		_companyValue = companyValue;
	}

	@JSON
	@Override
	public String getDevelopmentPlan() {
		if (_developmentPlan == null) {
			return "";
		}
		else {
			return _developmentPlan;
		}
	}

	@Override
	public void setDevelopmentPlan(String developmentPlan) {
		_developmentPlan = developmentPlan;
	}

	@JSON
	@Override
	public long getOverallRatingMan() {
		return _overallRatingMan;
	}

	@Override
	public void setOverallRatingMan(long overallRatingMan) {
		_overallRatingMan = overallRatingMan;
	}

	@JSON
	@Override
	public String getOverallCommentMan() {
		if (_overallCommentMan == null) {
			return "";
		}
		else {
			return _overallCommentMan;
		}
	}

	@Override
	public void setOverallCommentMan(String overallCommentMan) {
		_overallCommentMan = overallCommentMan;
	}

	@JSON
	@Override
	public long getSubmitStep() {
		return _submitStep;
	}

	@Override
	public void setSubmitStep(long submitStep) {
		_columnBitmask |= SUBMITSTEP_COLUMN_BITMASK;

		if (!_setOriginalSubmitStep) {
			_setOriginalSubmitStep = true;

			_originalSubmitStep = _submitStep;
		}

		_submitStep = submitStep;
	}

	public long getOriginalSubmitStep() {
		return _originalSubmitStep;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AppraisalMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AppraisalMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AppraisalMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppraisalMasterImpl appraisalMasterImpl = new AppraisalMasterImpl();

		appraisalMasterImpl.setAppraisalId(getAppraisalId());
		appraisalMasterImpl.setCompanyId(getCompanyId());
		appraisalMasterImpl.setAppraisalSettingId(getAppraisalSettingId());
		appraisalMasterImpl.setEmployeeId(getEmployeeId());
		appraisalMasterImpl.setAccomplishmentsEmp(getAccomplishmentsEmp());
		appraisalMasterImpl.setStrengthsEmp(getStrengthsEmp());
		appraisalMasterImpl.setDevelopmentEmp(getDevelopmentEmp());
		appraisalMasterImpl.setCareerEmp(getCareerEmp());
		appraisalMasterImpl.setOverallRatingEmp(getOverallRatingEmp());
		appraisalMasterImpl.setOverallCommentEmp(getOverallCommentEmp());
		appraisalMasterImpl.setAccomplishmentsMan(getAccomplishmentsMan());
		appraisalMasterImpl.setStrengthsMan(getStrengthsMan());
		appraisalMasterImpl.setDevelopmentMan(getDevelopmentMan());
		appraisalMasterImpl.setCareerMan(getCareerMan());
		appraisalMasterImpl.setCompanyValue(getCompanyValue());
		appraisalMasterImpl.setDevelopmentPlan(getDevelopmentPlan());
		appraisalMasterImpl.setOverallRatingMan(getOverallRatingMan());
		appraisalMasterImpl.setOverallCommentMan(getOverallCommentMan());
		appraisalMasterImpl.setSubmitStep(getSubmitStep());
		appraisalMasterImpl.setAddedDate(getAddedDate());
		appraisalMasterImpl.setCreatedBy(getCreatedBy());
		appraisalMasterImpl.setModifiedDate(getModifiedDate());
		appraisalMasterImpl.setModifiedBy(getModifiedBy());

		appraisalMasterImpl.resetOriginalValues();

		return appraisalMasterImpl;
	}

	@Override
	public int compareTo(AppraisalMaster appraisalMaster) {
		long primaryKey = appraisalMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AppraisalMaster)) {
			return false;
		}

		AppraisalMaster appraisalMaster = (AppraisalMaster)obj;

		long primaryKey = appraisalMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AppraisalMasterModelImpl appraisalMasterModelImpl = this;

		appraisalMasterModelImpl._originalAppraisalSettingId = appraisalMasterModelImpl._appraisalSettingId;

		appraisalMasterModelImpl._setOriginalAppraisalSettingId = false;

		appraisalMasterModelImpl._originalEmployeeId = appraisalMasterModelImpl._employeeId;

		appraisalMasterModelImpl._setOriginalEmployeeId = false;

		appraisalMasterModelImpl._originalSubmitStep = appraisalMasterModelImpl._submitStep;

		appraisalMasterModelImpl._setOriginalSubmitStep = false;

		appraisalMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AppraisalMaster> toCacheModel() {
		AppraisalMasterCacheModel appraisalMasterCacheModel = new AppraisalMasterCacheModel();

		appraisalMasterCacheModel.appraisalId = getAppraisalId();

		appraisalMasterCacheModel.companyId = getCompanyId();

		appraisalMasterCacheModel.appraisalSettingId = getAppraisalSettingId();

		appraisalMasterCacheModel.employeeId = getEmployeeId();

		appraisalMasterCacheModel.accomplishmentsEmp = getAccomplishmentsEmp();

		String accomplishmentsEmp = appraisalMasterCacheModel.accomplishmentsEmp;

		if ((accomplishmentsEmp != null) && (accomplishmentsEmp.length() == 0)) {
			appraisalMasterCacheModel.accomplishmentsEmp = null;
		}

		appraisalMasterCacheModel.strengthsEmp = getStrengthsEmp();

		String strengthsEmp = appraisalMasterCacheModel.strengthsEmp;

		if ((strengthsEmp != null) && (strengthsEmp.length() == 0)) {
			appraisalMasterCacheModel.strengthsEmp = null;
		}

		appraisalMasterCacheModel.developmentEmp = getDevelopmentEmp();

		String developmentEmp = appraisalMasterCacheModel.developmentEmp;

		if ((developmentEmp != null) && (developmentEmp.length() == 0)) {
			appraisalMasterCacheModel.developmentEmp = null;
		}

		appraisalMasterCacheModel.careerEmp = getCareerEmp();

		String careerEmp = appraisalMasterCacheModel.careerEmp;

		if ((careerEmp != null) && (careerEmp.length() == 0)) {
			appraisalMasterCacheModel.careerEmp = null;
		}

		appraisalMasterCacheModel.overallRatingEmp = getOverallRatingEmp();

		appraisalMasterCacheModel.overallCommentEmp = getOverallCommentEmp();

		String overallCommentEmp = appraisalMasterCacheModel.overallCommentEmp;

		if ((overallCommentEmp != null) && (overallCommentEmp.length() == 0)) {
			appraisalMasterCacheModel.overallCommentEmp = null;
		}

		appraisalMasterCacheModel.accomplishmentsMan = getAccomplishmentsMan();

		String accomplishmentsMan = appraisalMasterCacheModel.accomplishmentsMan;

		if ((accomplishmentsMan != null) && (accomplishmentsMan.length() == 0)) {
			appraisalMasterCacheModel.accomplishmentsMan = null;
		}

		appraisalMasterCacheModel.strengthsMan = getStrengthsMan();

		String strengthsMan = appraisalMasterCacheModel.strengthsMan;

		if ((strengthsMan != null) && (strengthsMan.length() == 0)) {
			appraisalMasterCacheModel.strengthsMan = null;
		}

		appraisalMasterCacheModel.developmentMan = getDevelopmentMan();

		String developmentMan = appraisalMasterCacheModel.developmentMan;

		if ((developmentMan != null) && (developmentMan.length() == 0)) {
			appraisalMasterCacheModel.developmentMan = null;
		}

		appraisalMasterCacheModel.careerMan = getCareerMan();

		String careerMan = appraisalMasterCacheModel.careerMan;

		if ((careerMan != null) && (careerMan.length() == 0)) {
			appraisalMasterCacheModel.careerMan = null;
		}

		appraisalMasterCacheModel.companyValue = getCompanyValue();

		String companyValue = appraisalMasterCacheModel.companyValue;

		if ((companyValue != null) && (companyValue.length() == 0)) {
			appraisalMasterCacheModel.companyValue = null;
		}

		appraisalMasterCacheModel.developmentPlan = getDevelopmentPlan();

		String developmentPlan = appraisalMasterCacheModel.developmentPlan;

		if ((developmentPlan != null) && (developmentPlan.length() == 0)) {
			appraisalMasterCacheModel.developmentPlan = null;
		}

		appraisalMasterCacheModel.overallRatingMan = getOverallRatingMan();

		appraisalMasterCacheModel.overallCommentMan = getOverallCommentMan();

		String overallCommentMan = appraisalMasterCacheModel.overallCommentMan;

		if ((overallCommentMan != null) && (overallCommentMan.length() == 0)) {
			appraisalMasterCacheModel.overallCommentMan = null;
		}

		appraisalMasterCacheModel.submitStep = getSubmitStep();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			appraisalMasterCacheModel.addedDate = addedDate.getTime();
		}
		else {
			appraisalMasterCacheModel.addedDate = Long.MIN_VALUE;
		}

		appraisalMasterCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appraisalMasterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appraisalMasterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appraisalMasterCacheModel.modifiedBy = getModifiedBy();

		return appraisalMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{appraisalId=");
		sb.append(getAppraisalId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", appraisalSettingId=");
		sb.append(getAppraisalSettingId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", accomplishmentsEmp=");
		sb.append(getAccomplishmentsEmp());
		sb.append(", strengthsEmp=");
		sb.append(getStrengthsEmp());
		sb.append(", developmentEmp=");
		sb.append(getDevelopmentEmp());
		sb.append(", careerEmp=");
		sb.append(getCareerEmp());
		sb.append(", overallRatingEmp=");
		sb.append(getOverallRatingEmp());
		sb.append(", overallCommentEmp=");
		sb.append(getOverallCommentEmp());
		sb.append(", accomplishmentsMan=");
		sb.append(getAccomplishmentsMan());
		sb.append(", strengthsMan=");
		sb.append(getStrengthsMan());
		sb.append(", developmentMan=");
		sb.append(getDevelopmentMan());
		sb.append(", careerMan=");
		sb.append(getCareerMan());
		sb.append(", companyValue=");
		sb.append(getCompanyValue());
		sb.append(", developmentPlan=");
		sb.append(getDevelopmentPlan());
		sb.append(", overallRatingMan=");
		sb.append(getOverallRatingMan());
		sb.append(", overallCommentMan=");
		sb.append(getOverallCommentMan());
		sb.append(", submitStep=");
		sb.append(getSubmitStep());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.liferay.famocom.erpcloud.model.AppraisalMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>appraisalId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appraisalSettingId</column-name><column-value><![CDATA[");
		sb.append(getAppraisalSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accomplishmentsEmp</column-name><column-value><![CDATA[");
		sb.append(getAccomplishmentsEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strengthsEmp</column-name><column-value><![CDATA[");
		sb.append(getStrengthsEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developmentEmp</column-name><column-value><![CDATA[");
		sb.append(getDevelopmentEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>careerEmp</column-name><column-value><![CDATA[");
		sb.append(getCareerEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overallRatingEmp</column-name><column-value><![CDATA[");
		sb.append(getOverallRatingEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overallCommentEmp</column-name><column-value><![CDATA[");
		sb.append(getOverallCommentEmp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accomplishmentsMan</column-name><column-value><![CDATA[");
		sb.append(getAccomplishmentsMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strengthsMan</column-name><column-value><![CDATA[");
		sb.append(getStrengthsMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developmentMan</column-name><column-value><![CDATA[");
		sb.append(getDevelopmentMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>careerMan</column-name><column-value><![CDATA[");
		sb.append(getCareerMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyValue</column-name><column-value><![CDATA[");
		sb.append(getCompanyValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>developmentPlan</column-name><column-value><![CDATA[");
		sb.append(getDevelopmentPlan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overallRatingMan</column-name><column-value><![CDATA[");
		sb.append(getOverallRatingMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overallCommentMan</column-name><column-value><![CDATA[");
		sb.append(getOverallCommentMan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitStep</column-name><column-value><![CDATA[");
		sb.append(getSubmitStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AppraisalMaster.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AppraisalMaster.class, ModelWrapper.class
		};
	private long _appraisalId;
	private long _companyId;
	private long _appraisalSettingId;
	private long _originalAppraisalSettingId;
	private boolean _setOriginalAppraisalSettingId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private String _accomplishmentsEmp;
	private String _strengthsEmp;
	private String _developmentEmp;
	private String _careerEmp;
	private long _overallRatingEmp;
	private String _overallCommentEmp;
	private String _accomplishmentsMan;
	private String _strengthsMan;
	private String _developmentMan;
	private String _careerMan;
	private String _companyValue;
	private String _developmentPlan;
	private long _overallRatingMan;
	private String _overallCommentMan;
	private long _submitStep;
	private long _originalSubmitStep;
	private boolean _setOriginalSubmitStep;
	private Date _addedDate;
	private long _createdBy;
	private Date _modifiedDate;
	private long _modifiedBy;
	private long _columnBitmask;
	private AppraisalMaster _escapedModel;
}